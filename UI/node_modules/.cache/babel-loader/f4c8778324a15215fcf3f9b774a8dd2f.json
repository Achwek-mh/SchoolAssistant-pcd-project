{"ast":null,"code":"var _jsxFileName = \"/home/achwak/Desktop/SchoolAssistant-pcd-project/UI/src/views/face.js\",\n    _s = $RefreshSig$();\n\nimport { Routes, Route, useNavigate } from \"react-router-dom\";\nimport React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport axios from 'axios';\nimport { Button, Label, CustomInput, Input, InputGroupAddon, InputGroupText, InputGroup, Container, Row, Col } from \"reactstrap\"; // reactstrap components\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Face() {\n  _s();\n\n  const [imageSrc, setImageSrc] = useState('');\n  const [names, setNames] = useState([]);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    // Fetch video stream and recognition results from Flask API\n    const fetchVideoStream = async () => {\n      const response = await fetch('/http://localhost:5000/video');\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder('utf-8');\n      let result = '';\n      let names = [];\n      let imageBlob; // Read the stream byte by byte\n\n      while (true) {\n        const {\n          done,\n          value\n        } = await reader.read();\n\n        if (done) {\n          break;\n        } // Append the received data to the result string\n\n\n        result += decoder.decode(value); // Search for the delimiter that separates the image frames\n\n        const delimiter = result.indexOf('\\r\\n--frame\\r\\n');\n\n        if (delimiter !== -1) {\n          // Parse the result string before the delimiter as JSON\n          const data = JSON.parse(result.substring(0, delimiter)); // Extract the image data from the parsed JSON\n\n          imageBlob = new Blob([data['frame']], {\n            type: 'image/jpeg'\n          });\n          const imageUrl = URL.createObjectURL(imageBlob);\n          setImageSrc(imageUrl); // Extract the names data from the parsed JSON\n\n          names = data['names']; // Reset the result string to the remaining data after the delimiter\n\n          result = result.substring(delimiter + 11);\n        }\n      }\n    };\n\n    fetchVideoStream();\n  }, []); // Draw the recognition results on the canvas\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const fontSize = 20; // Clear the canvas\n\n    context.clearRect(0, 0, canvas.width, canvas.height); // Draw the image\n\n    const image = new Image();\n\n    image.onload = () => {\n      context.drawImage(image, 0, 0, canvas.width, canvas.height);\n      context.font = `${fontSize}px Arial`; // Draw the names\n\n      names.forEach((name, index) => {\n        const x = 10;\n        const y = canvas.height - 10 - (names.length - index) * fontSize;\n        context.fillStyle = 'red';\n        context.fillText(name, x, y);\n      });\n    };\n\n    image.src = imageSrc;\n  }, [imageSrc, names]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: \"640\",\n      height: \"480\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Face, \"97ZOViDsAM+H09PKf0SRVOn5wHk=\");\n\n_c = Face;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Face\");","map":{"version":3,"names":["Routes","Route","useNavigate","React","useState","useEffect","useRef","axios","Button","Label","CustomInput","Input","InputGroupAddon","InputGroupText","InputGroup","Container","Row","Col","Face","imageSrc","setImageSrc","names","setNames","canvasRef","fetchVideoStream","response","fetch","reader","body","getReader","decoder","TextDecoder","result","imageBlob","done","value","read","decode","delimiter","indexOf","data","JSON","parse","substring","Blob","type","imageUrl","URL","createObjectURL","canvas","current","context","getContext","fontSize","clearRect","width","height","image","Image","onload","drawImage","font","forEach","name","index","x","y","length","fillStyle","fillText","src"],"sources":["/home/achwak/Desktop/SchoolAssistant-pcd-project/UI/src/views/face.js"],"sourcesContent":["import { Routes , Route , useNavigate } from \"react-router-dom\";\nimport React from \"react\";\nimport { useState , useEffect, useRef  } from \"react\";\n\nimport axios from 'axios';\n\nimport {\n  Button,\n  Label,\n  CustomInput,\n  Input,\n  InputGroupAddon,\n  InputGroupText,\n  InputGroup,\n  Container,\n  Row,\n  Col\n} from \"reactstrap\";\n\n// reactstrap components\n\nexport default function Face() {\n    const [imageSrc, setImageSrc] = useState('');\n  const [names, setNames] = useState([]);\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    // Fetch video stream and recognition results from Flask API\n    const fetchVideoStream = async () => {\n      const response = await fetch('/http://localhost:5000/video');\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder('utf-8');\n      let result = '';\n      let names = [];\n      let imageBlob;\n\n      // Read the stream byte by byte\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          break;\n        }\n\n        // Append the received data to the result string\n        result += decoder.decode(value);\n\n        // Search for the delimiter that separates the image frames\n        const delimiter = result.indexOf('\\r\\n--frame\\r\\n');\n        if (delimiter !== -1) {\n          // Parse the result string before the delimiter as JSON\n          const data = JSON.parse(result.substring(0, delimiter));\n\n          // Extract the image data from the parsed JSON\n          imageBlob = new Blob([data['frame']], { type: 'image/jpeg' });\n          const imageUrl = URL.createObjectURL(imageBlob);\n          setImageSrc(imageUrl);\n\n          // Extract the names data from the parsed JSON\n          names = data['names'];\n\n          // Reset the result string to the remaining data after the delimiter\n          result = result.substring(delimiter + 11);\n        }\n      }\n    };\n\n    fetchVideoStream();\n  }, []);\n\n  // Draw the recognition results on the canvas\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const fontSize = 20;\n\n    // Clear the canvas\n    context.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw the image\n    const image = new Image();\n    image.onload = () => {\n      context.drawImage(image, 0, 0, canvas.width, canvas.height);\n      context.font = `${fontSize}px Arial`;\n\n      // Draw the names\n      names.forEach((name, index) => {\n        const x = 10;\n        const y = canvas.height - 10 - (names.length - index) * fontSize;\n        context.fillStyle = 'red';\n        context.fillText(name, x, y);\n      });\n    };\n    image.src = imageSrc;\n  }, [imageSrc, names]);\n\n  return (\n    <div>\n      <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}