{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar _a, _b, _c, _d;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTracerEnabled = exports.trace = exports.log = exports.setLoggerVerbosity = exports.setLogger = exports.getLogger = void 0;\nconst constants_1 = require(\"./constants\");\nconst DEFAULT_LOGGER = {\n  error: function (message) {\n    for (var _len = arguments.length, optionalParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      optionalParams[_key - 1] = arguments[_key];\n    }\n    console.error('E ' + message, ...optionalParams);\n  },\n  info: function (message) {\n    for (var _len2 = arguments.length, optionalParams = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      optionalParams[_key2 - 1] = arguments[_key2];\n    }\n    console.error('I ' + message, ...optionalParams);\n  },\n  debug: function (message) {\n    for (var _len3 = arguments.length, optionalParams = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      optionalParams[_key3 - 1] = arguments[_key3];\n    }\n    console.error('D ' + message, ...optionalParams);\n  }\n};\nlet _logger = DEFAULT_LOGGER;\nlet _logVerbosity = constants_1.LogVerbosity.ERROR;\nconst verbosityString = (_b = (_a = process.env.GRPC_NODE_VERBOSITY) !== null && _a !== void 0 ? _a : process.env.GRPC_VERBOSITY) !== null && _b !== void 0 ? _b : '';\nswitch (verbosityString.toUpperCase()) {\n  case 'DEBUG':\n    _logVerbosity = constants_1.LogVerbosity.DEBUG;\n    break;\n  case 'INFO':\n    _logVerbosity = constants_1.LogVerbosity.INFO;\n    break;\n  case 'ERROR':\n    _logVerbosity = constants_1.LogVerbosity.ERROR;\n    break;\n  case 'NONE':\n    _logVerbosity = constants_1.LogVerbosity.NONE;\n    break;\n  default:\n  // Ignore any other values\n}\n\nconst getLogger = () => {\n  return _logger;\n};\nexports.getLogger = getLogger;\nconst setLogger = logger => {\n  _logger = logger;\n};\nexports.setLogger = setLogger;\nconst setLoggerVerbosity = verbosity => {\n  _logVerbosity = verbosity;\n};\nexports.setLoggerVerbosity = setLoggerVerbosity;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst log = function (severity) {\n  let logFunction;\n  if (severity >= _logVerbosity) {\n    switch (severity) {\n      case constants_1.LogVerbosity.DEBUG:\n        logFunction = _logger.debug;\n        break;\n      case constants_1.LogVerbosity.INFO:\n        logFunction = _logger.info;\n        break;\n      case constants_1.LogVerbosity.ERROR:\n        logFunction = _logger.error;\n        break;\n    }\n    /* Fall back to _logger.error when other methods are not available for\n     * compatiblity with older behavior that always logged to _logger.error */\n    if (!logFunction) {\n      logFunction = _logger.error;\n    }\n    if (logFunction) {\n      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        args[_key4 - 1] = arguments[_key4];\n      }\n      logFunction.bind(_logger)(...args);\n    }\n  }\n};\nexports.log = log;\nconst tracersString = (_d = (_c = process.env.GRPC_NODE_TRACE) !== null && _c !== void 0 ? _c : process.env.GRPC_TRACE) !== null && _d !== void 0 ? _d : '';\nconst enabledTracers = new Set();\nconst disabledTracers = new Set();\nfor (const tracerName of tracersString.split(',')) {\n  if (tracerName.startsWith('-')) {\n    disabledTracers.add(tracerName.substring(1));\n  } else {\n    enabledTracers.add(tracerName);\n  }\n}\nconst allEnabled = enabledTracers.has('all');\nfunction trace(severity, tracer, text) {\n  if (isTracerEnabled(tracer)) {\n    (0, exports.log)(severity, new Date().toISOString() + ' | ' + tracer + ' | ' + text);\n  }\n}\nexports.trace = trace;\nfunction isTracerEnabled(tracer) {\n  return !disabledTracers.has(tracer) && (allEnabled || enabledTracers.has(tracer));\n}\nexports.isTracerEnabled = isTracerEnabled;","map":{"version":3,"mappings":"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","names":["DEFAULT_LOGGER","error","message","optionalParams","console","info","debug","_logger","_logVerbosity","constants_1","ERROR","verbosityString","env","GRPC_NODE_VERBOSITY","process","GRPC_VERBOSITY","toUpperCase","DEBUG","INFO","NONE","getLogger","exports","setLogger","logger","setLoggerVerbosity","verbosity","log","severity","logFunction","args","bind","tracersString","GRPC_NODE_TRACE","GRPC_TRACE","enabledTracers","Set","disabledTracers","tracerName","split","startsWith","add","substring","allEnabled","has","trace","tracer","text","isTracerEnabled","Date","toISOString"],"sources":["/home/achwak/node_modules/@grpc/grpc-js/src/logging.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { LogVerbosity } from './constants';\n\nconst DEFAULT_LOGGER: Partial<Console> = {\n  error: (message?: any, ...optionalParams: any[]) => {\n    console.error('E ' + message, ...optionalParams);\n  },\n  info: (message?: any, ...optionalParams: any[]) => {\n    console.error('I ' + message, ...optionalParams);\n  },\n  debug: (message?: any, ...optionalParams: any[]) => {\n    console.error('D ' + message, ...optionalParams);\n  },\n}\n\nlet _logger: Partial<Console> = DEFAULT_LOGGER;\nlet _logVerbosity: LogVerbosity = LogVerbosity.ERROR;\n\nconst verbosityString =\n  process.env.GRPC_NODE_VERBOSITY ?? process.env.GRPC_VERBOSITY ?? '';\n\nswitch (verbosityString.toUpperCase()) {\n  case 'DEBUG':\n    _logVerbosity = LogVerbosity.DEBUG;\n    break;\n  case 'INFO':\n    _logVerbosity = LogVerbosity.INFO;\n    break;\n  case 'ERROR':\n    _logVerbosity = LogVerbosity.ERROR;\n    break;\n  case 'NONE':\n    _logVerbosity = LogVerbosity.NONE;\n    break;\n  default:\n  // Ignore any other values\n}\n\nexport const getLogger = (): Partial<Console> => {\n  return _logger;\n};\n\nexport const setLogger = (logger: Partial<Console>): void => {\n  _logger = logger;\n};\n\nexport const setLoggerVerbosity = (verbosity: LogVerbosity): void => {\n  _logVerbosity = verbosity;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const log = (severity: LogVerbosity, ...args: any[]): void => {\n  let logFunction: typeof DEFAULT_LOGGER.error;\n  if (severity >= _logVerbosity) {\n    switch (severity) {\n      case LogVerbosity.DEBUG:\n        logFunction = _logger.debug;\n        break;\n      case LogVerbosity.INFO:\n        logFunction = _logger.info;\n        break;\n      case LogVerbosity.ERROR:\n        logFunction = _logger.error;\n        break;\n    }\n    /* Fall back to _logger.error when other methods are not available for\n     * compatiblity with older behavior that always logged to _logger.error */\n    if (!logFunction) {\n      logFunction = _logger.error;\n    }\n    if (logFunction) {\n      logFunction.bind(_logger)(...args);\n    }\n  }\n};\n\nconst tracersString =\n  process.env.GRPC_NODE_TRACE ?? process.env.GRPC_TRACE ?? '';\nconst enabledTracers = new Set<string>();\nconst disabledTracers = new Set<string>();\nfor (const tracerName of tracersString.split(',')) {\n  if (tracerName.startsWith('-')) {\n    disabledTracers.add(tracerName.substring(1));\n  } else {\n    enabledTracers.add(tracerName);\n  }\n}\nconst allEnabled = enabledTracers.has('all');\n\nexport function trace(\n  severity: LogVerbosity,\n  tracer: string,\n  text: string\n): void {\n  if (isTracerEnabled(tracer)) {\n    log(severity, new Date().toISOString() + ' | ' + tracer + ' | ' + text);\n  }\n}\n\nexport function isTracerEnabled(tracer: string): boolean {\n  return !disabledTracers.has(tracer) &&\n    (allEnabled || enabledTracers.has(tracer));\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}