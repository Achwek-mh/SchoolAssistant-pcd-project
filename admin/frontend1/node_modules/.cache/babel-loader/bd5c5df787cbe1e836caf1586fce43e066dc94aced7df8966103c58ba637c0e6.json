{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CallCredentials = void 0;\nconst metadata_1 = require(\"./metadata\");\nfunction isCurrentOauth2Client(client) {\n  return 'getRequestHeaders' in client && typeof client.getRequestHeaders === 'function';\n}\n/**\n * A class that represents a generic method of adding authentication-related\n * metadata on a per-request basis.\n */\nclass CallCredentials {\n  /**\n   * Creates a new CallCredentials object from a given function that generates\n   * Metadata objects.\n   * @param metadataGenerator A function that accepts a set of options, and\n   * generates a Metadata object based on these options, which is passed back\n   * to the caller via a supplied (err, metadata) callback.\n   */\n  static createFromMetadataGenerator(metadataGenerator) {\n    return new SingleCallCredentials(metadataGenerator);\n  }\n  /**\n   * Create a gRPC credential from a Google credential object.\n   * @param googleCredentials The authentication client to use.\n   * @return The resulting CallCredentials object.\n   */\n  static createFromGoogleCredential(googleCredentials) {\n    return CallCredentials.createFromMetadataGenerator((options, callback) => {\n      let getHeaders;\n      if (isCurrentOauth2Client(googleCredentials)) {\n        getHeaders = googleCredentials.getRequestHeaders(options.service_url);\n      } else {\n        getHeaders = new Promise((resolve, reject) => {\n          googleCredentials.getRequestMetadata(options.service_url, (err, headers) => {\n            if (err) {\n              reject(err);\n              return;\n            }\n            if (!headers) {\n              reject(new Error('Headers not set by metadata plugin'));\n              return;\n            }\n            resolve(headers);\n          });\n        });\n      }\n      getHeaders.then(headers => {\n        const metadata = new metadata_1.Metadata();\n        for (const key of Object.keys(headers)) {\n          metadata.add(key, headers[key]);\n        }\n        callback(null, metadata);\n      }, err => {\n        callback(err);\n      });\n    });\n  }\n  static createEmpty() {\n    return new EmptyCallCredentials();\n  }\n}\nexports.CallCredentials = CallCredentials;\nclass ComposedCallCredentials extends CallCredentials {\n  constructor(creds) {\n    super();\n    this.creds = creds;\n  }\n  async generateMetadata(options) {\n    const base = new metadata_1.Metadata();\n    const generated = await Promise.all(this.creds.map(cred => cred.generateMetadata(options)));\n    for (const gen of generated) {\n      base.merge(gen);\n    }\n    return base;\n  }\n  compose(other) {\n    return new ComposedCallCredentials(this.creds.concat([other]));\n  }\n  _equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (other instanceof ComposedCallCredentials) {\n      return this.creds.every((value, index) => value._equals(other.creds[index]));\n    } else {\n      return false;\n    }\n  }\n}\nclass SingleCallCredentials extends CallCredentials {\n  constructor(metadataGenerator) {\n    super();\n    this.metadataGenerator = metadataGenerator;\n  }\n  generateMetadata(options) {\n    return new Promise((resolve, reject) => {\n      this.metadataGenerator(options, (err, metadata) => {\n        if (metadata !== undefined) {\n          resolve(metadata);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  }\n  compose(other) {\n    return new ComposedCallCredentials([this, other]);\n  }\n  _equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (other instanceof SingleCallCredentials) {\n      return this.metadataGenerator === other.metadataGenerator;\n    } else {\n      return false;\n    }\n  }\n}\nclass EmptyCallCredentials extends CallCredentials {\n  generateMetadata(options) {\n    return Promise.resolve(new metadata_1.Metadata());\n  }\n  compose(other) {\n    return other;\n  }\n  _equals(other) {\n    return other instanceof EmptyCallCredentials;\n  }\n}","map":{"version":3,"mappings":"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","names":["isCurrentOauth2Client","client","getRequestHeaders","CallCredentials","createFromMetadataGenerator","metadataGenerator","SingleCallCredentials","createFromGoogleCredential","googleCredentials","options","callback","getHeaders","service_url","Promise","resolve","reject","getRequestMetadata","err","headers","Error","then","metadata","metadata_1","key","Object","keys","add","createEmpty","EmptyCallCredentials","exports","ComposedCallCredentials","constructor","creds","generateMetadata","base","generated","all","map","cred","gen","merge","compose","other","concat","_equals","every","value","index","undefined"],"sources":["/home/achwak/node_modules/@grpc/grpc-js/src/call-credentials.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Metadata } from './metadata';\n\nexport interface CallMetadataOptions {\n  service_url: string;\n}\n\nexport type CallMetadataGenerator = (\n  options: CallMetadataOptions,\n  cb: (err: Error | null, metadata?: Metadata) => void\n) => void;\n\n// google-auth-library pre-v2.0.0 does not have getRequestHeaders\n// but has getRequestMetadata, which is deprecated in v2.0.0\nexport interface OldOAuth2Client {\n  getRequestMetadata: (\n    url: string,\n    callback: (\n      err: Error | null,\n      headers?: {\n        [index: string]: string;\n      }\n    ) => void\n  ) => void;\n}\n\nexport interface CurrentOAuth2Client {\n  getRequestHeaders: (url?: string) => Promise<{ [index: string]: string }>;\n}\n\nexport type OAuth2Client = OldOAuth2Client | CurrentOAuth2Client;\n\nfunction isCurrentOauth2Client(\n  client: OAuth2Client\n): client is CurrentOAuth2Client {\n  return (\n    'getRequestHeaders' in client &&\n    typeof client.getRequestHeaders === 'function'\n  );\n}\n\n/**\n * A class that represents a generic method of adding authentication-related\n * metadata on a per-request basis.\n */\nexport abstract class CallCredentials {\n  /**\n   * Asynchronously generates a new Metadata object.\n   * @param options Options used in generating the Metadata object.\n   */\n  abstract generateMetadata(options: CallMetadataOptions): Promise<Metadata>;\n  /**\n   * Creates a new CallCredentials object from properties of both this and\n   * another CallCredentials object. This object's metadata generator will be\n   * called first.\n   * @param callCredentials The other CallCredentials object.\n   */\n  abstract compose(callCredentials: CallCredentials): CallCredentials;\n\n  /**\n   * Check whether two call credentials objects are equal. Separate\n   * SingleCallCredentials with identical metadata generator functions are\n   * equal.\n   * @param other The other CallCredentials object to compare with.\n   */\n  abstract _equals(other: CallCredentials): boolean;\n\n  /**\n   * Creates a new CallCredentials object from a given function that generates\n   * Metadata objects.\n   * @param metadataGenerator A function that accepts a set of options, and\n   * generates a Metadata object based on these options, which is passed back\n   * to the caller via a supplied (err, metadata) callback.\n   */\n  static createFromMetadataGenerator(\n    metadataGenerator: CallMetadataGenerator\n  ): CallCredentials {\n    return new SingleCallCredentials(metadataGenerator);\n  }\n\n  /**\n   * Create a gRPC credential from a Google credential object.\n   * @param googleCredentials The authentication client to use.\n   * @return The resulting CallCredentials object.\n   */\n  static createFromGoogleCredential(\n    googleCredentials: OAuth2Client\n  ): CallCredentials {\n    return CallCredentials.createFromMetadataGenerator((options, callback) => {\n      let getHeaders: Promise<{ [index: string]: string }>;\n      if (isCurrentOauth2Client(googleCredentials)) {\n        getHeaders = googleCredentials.getRequestHeaders(options.service_url);\n      } else {\n        getHeaders = new Promise((resolve, reject) => {\n          googleCredentials.getRequestMetadata(\n            options.service_url,\n            (err, headers) => {\n              if (err) {\n                reject(err);\n                return;\n              }\n              if (!headers) {\n                reject(new Error('Headers not set by metadata plugin'));\n                return;\n              }\n              resolve(headers);\n            }\n          );\n        });\n      }\n      getHeaders.then(\n        (headers) => {\n          const metadata = new Metadata();\n          for (const key of Object.keys(headers)) {\n            metadata.add(key, headers[key]);\n          }\n          callback(null, metadata);\n        },\n        (err) => {\n          callback(err);\n        }\n      );\n    });\n  }\n\n  static createEmpty(): CallCredentials {\n    return new EmptyCallCredentials();\n  }\n}\n\nclass ComposedCallCredentials extends CallCredentials {\n  constructor(private creds: CallCredentials[]) {\n    super();\n  }\n\n  async generateMetadata(options: CallMetadataOptions): Promise<Metadata> {\n    const base: Metadata = new Metadata();\n    const generated: Metadata[] = await Promise.all(\n      this.creds.map((cred) => cred.generateMetadata(options))\n    );\n    for (const gen of generated) {\n      base.merge(gen);\n    }\n    return base;\n  }\n\n  compose(other: CallCredentials): CallCredentials {\n    return new ComposedCallCredentials(this.creds.concat([other]));\n  }\n\n  _equals(other: CallCredentials): boolean {\n    if (this === other) {\n      return true;\n    }\n    if (other instanceof ComposedCallCredentials) {\n      return this.creds.every((value, index) =>\n        value._equals(other.creds[index])\n      );\n    } else {\n      return false;\n    }\n  }\n}\n\nclass SingleCallCredentials extends CallCredentials {\n  constructor(private metadataGenerator: CallMetadataGenerator) {\n    super();\n  }\n\n  generateMetadata(options: CallMetadataOptions): Promise<Metadata> {\n    return new Promise<Metadata>((resolve, reject) => {\n      this.metadataGenerator(options, (err, metadata) => {\n        if (metadata !== undefined) {\n          resolve(metadata);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  compose(other: CallCredentials): CallCredentials {\n    return new ComposedCallCredentials([this, other]);\n  }\n\n  _equals(other: CallCredentials): boolean {\n    if (this === other) {\n      return true;\n    }\n    if (other instanceof SingleCallCredentials) {\n      return this.metadataGenerator === other.metadataGenerator;\n    } else {\n      return false;\n    }\n  }\n}\n\nclass EmptyCallCredentials extends CallCredentials {\n  generateMetadata(options: CallMetadataOptions): Promise<Metadata> {\n    return Promise.resolve(new Metadata());\n  }\n\n  compose(other: CallCredentials): CallCredentials {\n    return other;\n  }\n\n  _equals(other: CallCredentials): boolean {\n    return other instanceof EmptyCallCredentials;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}