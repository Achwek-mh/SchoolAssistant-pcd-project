{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2018 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addCommonProtos = exports.loadProtosWithOptionsSync = exports.loadProtosWithOptions = void 0;\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst Protobuf = require(\"protobufjs\");\nfunction addIncludePathResolver(root, includePaths) {\n  const originalResolvePath = root.resolvePath;\n  root.resolvePath = (origin, target) => {\n    if (path.isAbsolute(target)) {\n      return target;\n    }\n    for (const directory of includePaths) {\n      const fullPath = path.join(directory, target);\n      try {\n        fs.accessSync(fullPath, fs.constants.R_OK);\n        return fullPath;\n      } catch (err) {\n        continue;\n      }\n    }\n    process.emitWarning(`${target} not found in any of the include paths ${includePaths}`);\n    return originalResolvePath(origin, target);\n  };\n}\nasync function loadProtosWithOptions(filename, options) {\n  const root = new Protobuf.Root();\n  options = options || {};\n  if (!!options.includeDirs) {\n    if (!Array.isArray(options.includeDirs)) {\n      return Promise.reject(new Error('The includeDirs option must be an array'));\n    }\n    addIncludePathResolver(root, options.includeDirs);\n  }\n  const loadedRoot = await root.load(filename, options);\n  loadedRoot.resolveAll();\n  return loadedRoot;\n}\nexports.loadProtosWithOptions = loadProtosWithOptions;\nfunction loadProtosWithOptionsSync(filename, options) {\n  const root = new Protobuf.Root();\n  options = options || {};\n  if (!!options.includeDirs) {\n    if (!Array.isArray(options.includeDirs)) {\n      throw new Error('The includeDirs option must be an array');\n    }\n    addIncludePathResolver(root, options.includeDirs);\n  }\n  const loadedRoot = root.loadSync(filename, options);\n  loadedRoot.resolveAll();\n  return loadedRoot;\n}\nexports.loadProtosWithOptionsSync = loadProtosWithOptionsSync;\n/**\n * Load Google's well-known proto files that aren't exposed by Protobuf.js.\n */\nfunction addCommonProtos() {\n  // Protobuf.js exposes: any, duration, empty, field_mask, struct, timestamp,\n  // and wrappers. compiler/plugin is excluded in Protobuf.js and here.\n  // Using constant strings for compatibility with tools like Webpack\n  const apiDescriptor = require('protobufjs/google/protobuf/api.json');\n  const descriptorDescriptor = require('protobufjs/google/protobuf/descriptor.json');\n  const sourceContextDescriptor = require('protobufjs/google/protobuf/source_context.json');\n  const typeDescriptor = require('protobufjs/google/protobuf/type.json');\n  Protobuf.common('api', apiDescriptor.nested.google.nested.protobuf.nested);\n  Protobuf.common('descriptor', descriptorDescriptor.nested.google.nested.protobuf.nested);\n  Protobuf.common('source_context', sourceContextDescriptor.nested.google.nested.protobuf.nested);\n  Protobuf.common('type', typeDescriptor.nested.google.nested.protobuf.nested);\n}\nexports.addCommonProtos = addCommonProtos;","map":{"version":3,"mappings":"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","names":["addIncludePathResolver","root","includePaths","originalResolvePath","resolvePath","origin","target","path","isAbsolute","directory","fullPath","join","fs","accessSync","constants","R_OK","err","process","emitWarning","loadProtosWithOptions","filename","options","Protobuf","Root","includeDirs","Array","isArray","Promise","reject","Error","loadedRoot","load","resolveAll","exports","loadProtosWithOptionsSync","loadSync","addCommonProtos","apiDescriptor","require","descriptorDescriptor","sourceContextDescriptor","typeDescriptor","common","nested","google","protobuf"],"sources":["../../src/util.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}