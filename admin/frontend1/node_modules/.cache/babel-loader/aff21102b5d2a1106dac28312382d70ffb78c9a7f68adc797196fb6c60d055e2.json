{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stringToSubchannelAddress = exports.subchannelAddressToString = exports.subchannelAddressEqual = exports.isTcpSubchannelAddress = void 0;\nconst net_1 = require(\"net\");\nfunction isTcpSubchannelAddress(address) {\n  return 'port' in address;\n}\nexports.isTcpSubchannelAddress = isTcpSubchannelAddress;\nfunction subchannelAddressEqual(address1, address2) {\n  if (!address1 && !address2) {\n    return true;\n  }\n  if (!address1 || !address2) {\n    return false;\n  }\n  if (isTcpSubchannelAddress(address1)) {\n    return isTcpSubchannelAddress(address2) && address1.host === address2.host && address1.port === address2.port;\n  } else {\n    return !isTcpSubchannelAddress(address2) && address1.path === address2.path;\n  }\n}\nexports.subchannelAddressEqual = subchannelAddressEqual;\nfunction subchannelAddressToString(address) {\n  if (isTcpSubchannelAddress(address)) {\n    return address.host + ':' + address.port;\n  } else {\n    return address.path;\n  }\n}\nexports.subchannelAddressToString = subchannelAddressToString;\nconst DEFAULT_PORT = 443;\nfunction stringToSubchannelAddress(addressString, port) {\n  if ((0, net_1.isIP)(addressString)) {\n    return {\n      host: addressString,\n      port: port !== null && port !== void 0 ? port : DEFAULT_PORT\n    };\n  } else {\n    return {\n      path: addressString\n    };\n  }\n}\nexports.stringToSubchannelAddress = stringToSubchannelAddress;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAiBA;AAmBA,SAAgBA,sBAAsB,CACpCC,OAA0B;EAE1B,OAAO,MAAM,IAAIA,OAAO;AAC1B;AAJAC;AAMA,SAAgBC,sBAAsB,CACpCC,QAA4B,EAC5BC,QAA4B;EAE5B,IAAI,CAACD,QAAQ,IAAI,CAACC,QAAQ,EAAE;IAC1B,OAAO,IAAI;;EAEb,IAAI,CAACD,QAAQ,IAAI,CAACC,QAAQ,EAAE;IAC1B,OAAO,KAAK;;EAEd,IAAIL,sBAAsB,CAACI,QAAQ,CAAC,EAAE;IACpC,OACEJ,sBAAsB,CAACK,QAAQ,CAAC,IAChCD,QAAQ,CAACE,IAAI,KAAKD,QAAQ,CAACC,IAAI,IAC/BF,QAAQ,CAACG,IAAI,KAAKF,QAAQ,CAACE,IAAI;GAElC,MAAM;IACL,OAAO,CAACP,sBAAsB,CAACK,QAAQ,CAAC,IAAID,QAAQ,CAACI,IAAI,KAAKH,QAAQ,CAACG,IAAI;;AAE/E;AAnBAN;AAqBA,SAAgBO,yBAAyB,CAACR,OAA0B;EAClE,IAAID,sBAAsB,CAACC,OAAO,CAAC,EAAE;IACnC,OAAOA,OAAO,CAACK,IAAI,GAAG,GAAG,GAAGL,OAAO,CAACM,IAAI;GACzC,MAAM;IACL,OAAON,OAAO,CAACO,IAAI;;AAEvB;AANAN;AAQA,MAAMQ,YAAY,GAAG,GAAG;AAExB,SAAgBC,yBAAyB,CAACC,aAAqB,EAAEL,IAAa;EAC5E,IAAI,cAAI,EAACK,aAAa,CAAC,EAAE;IACvB,OAAO;MACLN,IAAI,EAAEM,aAAa;MACnBL,IAAI,EAAEA,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAIG;KACf;GACF,MAAM;IACL,OAAO;MACLF,IAAI,EAAEI;KACP;;AAEL;AAXAV","names":["isTcpSubchannelAddress","address","exports","subchannelAddressEqual","address1","address2","host","port","path","subchannelAddressToString","DEFAULT_PORT","stringToSubchannelAddress","addressString"],"sources":["/home/achwak/node_modules/@grpc/grpc-js/src/subchannel-address.ts"],"sourcesContent":["/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isIP } from \"net\";\n\nexport interface TcpSubchannelAddress {\n  port: number;\n  host: string;\n}\n\nexport interface IpcSubchannelAddress {\n  path: string;\n}\n/**\n * This represents a single backend address to connect to. This interface is a\n * subset of net.SocketConnectOpts, i.e. the options described at\n * https://nodejs.org/api/net.html#net_socket_connect_options_connectlistener.\n * Those are in turn a subset of the options that can be passed to http2.connect.\n */\n\nexport type SubchannelAddress = TcpSubchannelAddress | IpcSubchannelAddress;\n\nexport function isTcpSubchannelAddress(\n  address: SubchannelAddress\n): address is TcpSubchannelAddress {\n  return 'port' in address;\n}\n\nexport function subchannelAddressEqual(\n  address1?: SubchannelAddress,\n  address2?: SubchannelAddress\n): boolean {\n  if (!address1 && !address2) {\n    return true;\n  }\n  if (!address1 || !address2) {\n    return false;\n  }\n  if (isTcpSubchannelAddress(address1)) {\n    return (\n      isTcpSubchannelAddress(address2) &&\n      address1.host === address2.host &&\n      address1.port === address2.port\n    );\n  } else {\n    return !isTcpSubchannelAddress(address2) && address1.path === address2.path;\n  }\n}\n\nexport function subchannelAddressToString(address: SubchannelAddress): string {\n  if (isTcpSubchannelAddress(address)) {\n    return address.host + ':' + address.port;\n  } else {\n    return address.path;\n  }\n}\n\nconst DEFAULT_PORT = 443;\n\nexport function stringToSubchannelAddress(addressString: string, port?: number): SubchannelAddress {\n  if (isIP(addressString)) {\n    return {\n      host: addressString,\n      port: port ?? DEFAULT_PORT\n    };\n  } else {\n    return {\n      path: addressString\n    };\n  }\n}"]},"metadata":{},"sourceType":"script","externalDependencies":[]}