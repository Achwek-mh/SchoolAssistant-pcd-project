{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = exports.getChannelzServiceDefinition = exports.getChannelzHandlers = exports.unregisterChannelzRef = exports.registerChannelzSocket = exports.registerChannelzServer = exports.registerChannelzSubchannel = exports.registerChannelzChannel = exports.ChannelzCallTracker = exports.ChannelzChildrenTracker = exports.ChannelzTrace = void 0;\nconst net_1 = require(\"net\");\nconst connectivity_state_1 = require(\"./connectivity-state\");\nconst constants_1 = require(\"./constants\");\nconst subchannel_address_1 = require(\"./subchannel-address\");\nconst admin_1 = require(\"./admin\");\nconst make_client_1 = require(\"./make-client\");\nfunction channelRefToMessage(ref) {\n  return {\n    channel_id: ref.id,\n    name: ref.name\n  };\n}\nfunction subchannelRefToMessage(ref) {\n  return {\n    subchannel_id: ref.id,\n    name: ref.name\n  };\n}\nfunction serverRefToMessage(ref) {\n  return {\n    server_id: ref.id\n  };\n}\nfunction socketRefToMessage(ref) {\n  return {\n    socket_id: ref.id,\n    name: ref.name\n  };\n}\n/**\n * The loose upper bound on the number of events that should be retained in a\n * trace. This may be exceeded by up to a factor of 2. Arbitrarily chosen as a\n * number that should be large enough to contain the recent relevant\n * information, but small enough to not use excessive memory.\n */\nconst TARGET_RETAINED_TRACES = 32;\nclass ChannelzTrace {\n  constructor() {\n    this.events = [];\n    this.eventsLogged = 0;\n    this.creationTimestamp = new Date();\n  }\n  addTrace(severity, description, child) {\n    const timestamp = new Date();\n    this.events.push({\n      description: description,\n      severity: severity,\n      timestamp: timestamp,\n      childChannel: (child === null || child === void 0 ? void 0 : child.kind) === 'channel' ? child : undefined,\n      childSubchannel: (child === null || child === void 0 ? void 0 : child.kind) === 'subchannel' ? child : undefined\n    });\n    // Whenever the trace array gets too large, discard the first half\n    if (this.events.length >= TARGET_RETAINED_TRACES * 2) {\n      this.events = this.events.slice(TARGET_RETAINED_TRACES);\n    }\n    this.eventsLogged += 1;\n  }\n  getTraceMessage() {\n    return {\n      creation_timestamp: dateToProtoTimestamp(this.creationTimestamp),\n      num_events_logged: this.eventsLogged,\n      events: this.events.map(event => {\n        return {\n          description: event.description,\n          severity: event.severity,\n          timestamp: dateToProtoTimestamp(event.timestamp),\n          channel_ref: event.childChannel ? channelRefToMessage(event.childChannel) : null,\n          subchannel_ref: event.childSubchannel ? subchannelRefToMessage(event.childSubchannel) : null\n        };\n      })\n    };\n  }\n}\nexports.ChannelzTrace = ChannelzTrace;\nclass ChannelzChildrenTracker {\n  constructor() {\n    this.channelChildren = new Map();\n    this.subchannelChildren = new Map();\n    this.socketChildren = new Map();\n  }\n  refChild(child) {\n    var _a, _b, _c;\n    switch (child.kind) {\n      case 'channel':\n        {\n          let trackedChild = (_a = this.channelChildren.get(child.id)) !== null && _a !== void 0 ? _a : {\n            ref: child,\n            count: 0\n          };\n          trackedChild.count += 1;\n          this.channelChildren.set(child.id, trackedChild);\n          break;\n        }\n      case 'subchannel':\n        {\n          let trackedChild = (_b = this.subchannelChildren.get(child.id)) !== null && _b !== void 0 ? _b : {\n            ref: child,\n            count: 0\n          };\n          trackedChild.count += 1;\n          this.subchannelChildren.set(child.id, trackedChild);\n          break;\n        }\n      case 'socket':\n        {\n          let trackedChild = (_c = this.socketChildren.get(child.id)) !== null && _c !== void 0 ? _c : {\n            ref: child,\n            count: 0\n          };\n          trackedChild.count += 1;\n          this.socketChildren.set(child.id, trackedChild);\n          break;\n        }\n    }\n  }\n  unrefChild(child) {\n    switch (child.kind) {\n      case 'channel':\n        {\n          let trackedChild = this.channelChildren.get(child.id);\n          if (trackedChild !== undefined) {\n            trackedChild.count -= 1;\n            if (trackedChild.count === 0) {\n              this.channelChildren.delete(child.id);\n            } else {\n              this.channelChildren.set(child.id, trackedChild);\n            }\n          }\n          break;\n        }\n      case 'subchannel':\n        {\n          let trackedChild = this.subchannelChildren.get(child.id);\n          if (trackedChild !== undefined) {\n            trackedChild.count -= 1;\n            if (trackedChild.count === 0) {\n              this.subchannelChildren.delete(child.id);\n            } else {\n              this.subchannelChildren.set(child.id, trackedChild);\n            }\n          }\n          break;\n        }\n      case 'socket':\n        {\n          let trackedChild = this.socketChildren.get(child.id);\n          if (trackedChild !== undefined) {\n            trackedChild.count -= 1;\n            if (trackedChild.count === 0) {\n              this.socketChildren.delete(child.id);\n            } else {\n              this.socketChildren.set(child.id, trackedChild);\n            }\n          }\n          break;\n        }\n    }\n  }\n  getChildLists() {\n    const channels = [];\n    for (const {\n      ref\n    } of this.channelChildren.values()) {\n      channels.push(ref);\n    }\n    const subchannels = [];\n    for (const {\n      ref\n    } of this.subchannelChildren.values()) {\n      subchannels.push(ref);\n    }\n    const sockets = [];\n    for (const {\n      ref\n    } of this.socketChildren.values()) {\n      sockets.push(ref);\n    }\n    return {\n      channels,\n      subchannels,\n      sockets\n    };\n  }\n}\nexports.ChannelzChildrenTracker = ChannelzChildrenTracker;\nclass ChannelzCallTracker {\n  constructor() {\n    this.callsStarted = 0;\n    this.callsSucceeded = 0;\n    this.callsFailed = 0;\n    this.lastCallStartedTimestamp = null;\n  }\n  addCallStarted() {\n    this.callsStarted += 1;\n    this.lastCallStartedTimestamp = new Date();\n  }\n  addCallSucceeded() {\n    this.callsSucceeded += 1;\n  }\n  addCallFailed() {\n    this.callsFailed += 1;\n  }\n}\nexports.ChannelzCallTracker = ChannelzCallTracker;\nlet nextId = 1;\nfunction getNextId() {\n  return nextId++;\n}\nconst channels = [];\nconst subchannels = [];\nconst servers = [];\nconst sockets = [];\nfunction registerChannelzChannel(name, getInfo, channelzEnabled) {\n  const id = getNextId();\n  const ref = {\n    id,\n    name,\n    kind: 'channel'\n  };\n  if (channelzEnabled) {\n    channels[id] = {\n      ref,\n      getInfo\n    };\n  }\n  return ref;\n}\nexports.registerChannelzChannel = registerChannelzChannel;\nfunction registerChannelzSubchannel(name, getInfo, channelzEnabled) {\n  const id = getNextId();\n  const ref = {\n    id,\n    name,\n    kind: 'subchannel'\n  };\n  if (channelzEnabled) {\n    subchannels[id] = {\n      ref,\n      getInfo\n    };\n  }\n  return ref;\n}\nexports.registerChannelzSubchannel = registerChannelzSubchannel;\nfunction registerChannelzServer(getInfo, channelzEnabled) {\n  const id = getNextId();\n  const ref = {\n    id,\n    kind: 'server'\n  };\n  if (channelzEnabled) {\n    servers[id] = {\n      ref,\n      getInfo\n    };\n  }\n  return ref;\n}\nexports.registerChannelzServer = registerChannelzServer;\nfunction registerChannelzSocket(name, getInfo, channelzEnabled) {\n  const id = getNextId();\n  const ref = {\n    id,\n    name,\n    kind: 'socket'\n  };\n  if (channelzEnabled) {\n    sockets[id] = {\n      ref,\n      getInfo\n    };\n  }\n  return ref;\n}\nexports.registerChannelzSocket = registerChannelzSocket;\nfunction unregisterChannelzRef(ref) {\n  switch (ref.kind) {\n    case 'channel':\n      delete channels[ref.id];\n      return;\n    case 'subchannel':\n      delete subchannels[ref.id];\n      return;\n    case 'server':\n      delete servers[ref.id];\n      return;\n    case 'socket':\n      delete sockets[ref.id];\n      return;\n  }\n}\nexports.unregisterChannelzRef = unregisterChannelzRef;\n/**\n * Parse a single section of an IPv6 address as two bytes\n * @param addressSection A hexadecimal string of length up to 4\n * @returns The pair of bytes representing this address section\n */\nfunction parseIPv6Section(addressSection) {\n  const numberValue = Number.parseInt(addressSection, 16);\n  return [numberValue / 256 | 0, numberValue % 256];\n}\n/**\n * Parse a chunk of an IPv6 address string to some number of bytes\n * @param addressChunk Some number of segments of up to 4 hexadecimal\n *   characters each, joined by colons.\n * @returns The list of bytes representing this address chunk\n */\nfunction parseIPv6Chunk(addressChunk) {\n  if (addressChunk === '') {\n    return [];\n  }\n  const bytePairs = addressChunk.split(':').map(section => parseIPv6Section(section));\n  const result = [];\n  return result.concat(...bytePairs);\n}\n/**\n * Converts an IPv4 or IPv6 address from string representation to binary\n * representation\n * @param ipAddress an IP address in standard IPv4 or IPv6 text format\n * @returns\n */\nfunction ipAddressStringToBuffer(ipAddress) {\n  if ((0, net_1.isIPv4)(ipAddress)) {\n    return Buffer.from(Uint8Array.from(ipAddress.split('.').map(segment => Number.parseInt(segment))));\n  } else if ((0, net_1.isIPv6)(ipAddress)) {\n    let leftSection;\n    let rightSection;\n    const doubleColonIndex = ipAddress.indexOf('::');\n    if (doubleColonIndex === -1) {\n      leftSection = ipAddress;\n      rightSection = '';\n    } else {\n      leftSection = ipAddress.substring(0, doubleColonIndex);\n      rightSection = ipAddress.substring(doubleColonIndex + 2);\n    }\n    const leftBuffer = Buffer.from(parseIPv6Chunk(leftSection));\n    const rightBuffer = Buffer.from(parseIPv6Chunk(rightSection));\n    const middleBuffer = Buffer.alloc(16 - leftBuffer.length - rightBuffer.length, 0);\n    return Buffer.concat([leftBuffer, middleBuffer, rightBuffer]);\n  } else {\n    return null;\n  }\n}\nfunction connectivityStateToMessage(state) {\n  switch (state) {\n    case connectivity_state_1.ConnectivityState.CONNECTING:\n      return {\n        state: 'CONNECTING'\n      };\n    case connectivity_state_1.ConnectivityState.IDLE:\n      return {\n        state: 'IDLE'\n      };\n    case connectivity_state_1.ConnectivityState.READY:\n      return {\n        state: 'READY'\n      };\n    case connectivity_state_1.ConnectivityState.SHUTDOWN:\n      return {\n        state: 'SHUTDOWN'\n      };\n    case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:\n      return {\n        state: 'TRANSIENT_FAILURE'\n      };\n    default:\n      return {\n        state: 'UNKNOWN'\n      };\n  }\n}\nfunction dateToProtoTimestamp(date) {\n  if (!date) {\n    return null;\n  }\n  const millisSinceEpoch = date.getTime();\n  return {\n    seconds: millisSinceEpoch / 1000 | 0,\n    nanos: millisSinceEpoch % 1000 * 1000000\n  };\n}\nfunction getChannelMessage(channelEntry) {\n  const resolvedInfo = channelEntry.getInfo();\n  return {\n    ref: channelRefToMessage(channelEntry.ref),\n    data: {\n      target: resolvedInfo.target,\n      state: connectivityStateToMessage(resolvedInfo.state),\n      calls_started: resolvedInfo.callTracker.callsStarted,\n      calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n      calls_failed: resolvedInfo.callTracker.callsFailed,\n      last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n      trace: resolvedInfo.trace.getTraceMessage()\n    },\n    channel_ref: resolvedInfo.children.channels.map(ref => channelRefToMessage(ref)),\n    subchannel_ref: resolvedInfo.children.subchannels.map(ref => subchannelRefToMessage(ref))\n  };\n}\nfunction GetChannel(call, callback) {\n  const channelId = Number.parseInt(call.request.channel_id);\n  const channelEntry = channels[channelId];\n  if (channelEntry === undefined) {\n    callback({\n      'code': constants_1.Status.NOT_FOUND,\n      'details': 'No channel data found for id ' + channelId\n    });\n    return;\n  }\n  callback(null, {\n    channel: getChannelMessage(channelEntry)\n  });\n}\nfunction GetTopChannels(call, callback) {\n  const maxResults = Number.parseInt(call.request.max_results);\n  const resultList = [];\n  let i = Number.parseInt(call.request.start_channel_id);\n  for (; i < channels.length; i++) {\n    const channelEntry = channels[i];\n    if (channelEntry === undefined) {\n      continue;\n    }\n    resultList.push(getChannelMessage(channelEntry));\n    if (resultList.length >= maxResults) {\n      break;\n    }\n  }\n  callback(null, {\n    channel: resultList,\n    end: i >= servers.length\n  });\n}\nfunction getServerMessage(serverEntry) {\n  const resolvedInfo = serverEntry.getInfo();\n  return {\n    ref: serverRefToMessage(serverEntry.ref),\n    data: {\n      calls_started: resolvedInfo.callTracker.callsStarted,\n      calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n      calls_failed: resolvedInfo.callTracker.callsFailed,\n      last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n      trace: resolvedInfo.trace.getTraceMessage()\n    },\n    listen_socket: resolvedInfo.listenerChildren.sockets.map(ref => socketRefToMessage(ref))\n  };\n}\nfunction GetServer(call, callback) {\n  const serverId = Number.parseInt(call.request.server_id);\n  const serverEntry = servers[serverId];\n  if (serverEntry === undefined) {\n    callback({\n      'code': constants_1.Status.NOT_FOUND,\n      'details': 'No server data found for id ' + serverId\n    });\n    return;\n  }\n  callback(null, {\n    server: getServerMessage(serverEntry)\n  });\n}\nfunction GetServers(call, callback) {\n  const maxResults = Number.parseInt(call.request.max_results);\n  const resultList = [];\n  let i = Number.parseInt(call.request.start_server_id);\n  for (; i < servers.length; i++) {\n    const serverEntry = servers[i];\n    if (serverEntry === undefined) {\n      continue;\n    }\n    resultList.push(getServerMessage(serverEntry));\n    if (resultList.length >= maxResults) {\n      break;\n    }\n  }\n  callback(null, {\n    server: resultList,\n    end: i >= servers.length\n  });\n}\nfunction GetSubchannel(call, callback) {\n  const subchannelId = Number.parseInt(call.request.subchannel_id);\n  const subchannelEntry = subchannels[subchannelId];\n  if (subchannelEntry === undefined) {\n    callback({\n      'code': constants_1.Status.NOT_FOUND,\n      'details': 'No subchannel data found for id ' + subchannelId\n    });\n    return;\n  }\n  const resolvedInfo = subchannelEntry.getInfo();\n  const subchannelMessage = {\n    ref: subchannelRefToMessage(subchannelEntry.ref),\n    data: {\n      target: resolvedInfo.target,\n      state: connectivityStateToMessage(resolvedInfo.state),\n      calls_started: resolvedInfo.callTracker.callsStarted,\n      calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n      calls_failed: resolvedInfo.callTracker.callsFailed,\n      last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n      trace: resolvedInfo.trace.getTraceMessage()\n    },\n    socket_ref: resolvedInfo.children.sockets.map(ref => socketRefToMessage(ref))\n  };\n  callback(null, {\n    subchannel: subchannelMessage\n  });\n}\nfunction subchannelAddressToAddressMessage(subchannelAddress) {\n  var _a;\n  if ((0, subchannel_address_1.isTcpSubchannelAddress)(subchannelAddress)) {\n    return {\n      address: 'tcpip_address',\n      tcpip_address: {\n        ip_address: (_a = ipAddressStringToBuffer(subchannelAddress.host)) !== null && _a !== void 0 ? _a : undefined,\n        port: subchannelAddress.port\n      }\n    };\n  } else {\n    return {\n      address: 'uds_address',\n      uds_address: {\n        filename: subchannelAddress.path\n      }\n    };\n  }\n}\nfunction GetSocket(call, callback) {\n  var _a, _b, _c, _d, _e;\n  const socketId = Number.parseInt(call.request.socket_id);\n  const socketEntry = sockets[socketId];\n  if (socketEntry === undefined) {\n    callback({\n      'code': constants_1.Status.NOT_FOUND,\n      'details': 'No socket data found for id ' + socketId\n    });\n    return;\n  }\n  const resolvedInfo = socketEntry.getInfo();\n  const securityMessage = resolvedInfo.security ? {\n    model: 'tls',\n    tls: {\n      cipher_suite: resolvedInfo.security.cipherSuiteStandardName ? 'standard_name' : 'other_name',\n      standard_name: (_a = resolvedInfo.security.cipherSuiteStandardName) !== null && _a !== void 0 ? _a : undefined,\n      other_name: (_b = resolvedInfo.security.cipherSuiteOtherName) !== null && _b !== void 0 ? _b : undefined,\n      local_certificate: (_c = resolvedInfo.security.localCertificate) !== null && _c !== void 0 ? _c : undefined,\n      remote_certificate: (_d = resolvedInfo.security.remoteCertificate) !== null && _d !== void 0 ? _d : undefined\n    }\n  } : null;\n  const socketMessage = {\n    ref: socketRefToMessage(socketEntry.ref),\n    local: resolvedInfo.localAddress ? subchannelAddressToAddressMessage(resolvedInfo.localAddress) : null,\n    remote: resolvedInfo.remoteAddress ? subchannelAddressToAddressMessage(resolvedInfo.remoteAddress) : null,\n    remote_name: (_e = resolvedInfo.remoteName) !== null && _e !== void 0 ? _e : undefined,\n    security: securityMessage,\n    data: {\n      keep_alives_sent: resolvedInfo.keepAlivesSent,\n      streams_started: resolvedInfo.streamsStarted,\n      streams_succeeded: resolvedInfo.streamsSucceeded,\n      streams_failed: resolvedInfo.streamsFailed,\n      last_local_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastLocalStreamCreatedTimestamp),\n      last_remote_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastRemoteStreamCreatedTimestamp),\n      messages_received: resolvedInfo.messagesReceived,\n      messages_sent: resolvedInfo.messagesSent,\n      last_message_received_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageReceivedTimestamp),\n      last_message_sent_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageSentTimestamp),\n      local_flow_control_window: resolvedInfo.localFlowControlWindow ? {\n        value: resolvedInfo.localFlowControlWindow\n      } : null,\n      remote_flow_control_window: resolvedInfo.remoteFlowControlWindow ? {\n        value: resolvedInfo.remoteFlowControlWindow\n      } : null\n    }\n  };\n  callback(null, {\n    socket: socketMessage\n  });\n}\nfunction GetServerSockets(call, callback) {\n  const serverId = Number.parseInt(call.request.server_id);\n  const serverEntry = servers[serverId];\n  if (serverEntry === undefined) {\n    callback({\n      'code': constants_1.Status.NOT_FOUND,\n      'details': 'No server data found for id ' + serverId\n    });\n    return;\n  }\n  const startId = Number.parseInt(call.request.start_socket_id);\n  const maxResults = Number.parseInt(call.request.max_results);\n  const resolvedInfo = serverEntry.getInfo();\n  // If we wanted to include listener sockets in the result, this line would\n  // instead say\n  // const allSockets = resolvedInfo.listenerChildren.sockets.concat(resolvedInfo.sessionChildren.sockets).sort((ref1, ref2) => ref1.id - ref2.id);\n  const allSockets = resolvedInfo.sessionChildren.sockets.sort((ref1, ref2) => ref1.id - ref2.id);\n  const resultList = [];\n  let i = 0;\n  for (; i < allSockets.length; i++) {\n    if (allSockets[i].id >= startId) {\n      resultList.push(socketRefToMessage(allSockets[i]));\n      if (resultList.length >= maxResults) {\n        break;\n      }\n    }\n  }\n  callback(null, {\n    socket_ref: resultList,\n    end: i >= allSockets.length\n  });\n}\nfunction getChannelzHandlers() {\n  return {\n    GetChannel,\n    GetTopChannels,\n    GetServer,\n    GetServers,\n    GetSubchannel,\n    GetSocket,\n    GetServerSockets\n  };\n}\nexports.getChannelzHandlers = getChannelzHandlers;\nlet loadedChannelzDefinition = null;\nfunction getChannelzServiceDefinition() {\n  if (loadedChannelzDefinition) {\n    return loadedChannelzDefinition;\n  }\n  /* The purpose of this complexity is to avoid loading @grpc/proto-loader at\n   * runtime for users who will not use/enable channelz. */\n  const loaderLoadSync = require('@grpc/proto-loader').loadSync;\n  const loadedProto = loaderLoadSync('channelz.proto', {\n    keepCase: true,\n    longs: String,\n    enums: String,\n    defaults: true,\n    oneofs: true,\n    includeDirs: [`${__dirname}/../../proto`]\n  });\n  const channelzGrpcObject = (0, make_client_1.loadPackageDefinition)(loadedProto);\n  loadedChannelzDefinition = channelzGrpcObject.grpc.channelz.v1.Channelz.service;\n  return loadedChannelzDefinition;\n}\nexports.getChannelzServiceDefinition = getChannelzServiceDefinition;\nfunction setup() {\n  (0, admin_1.registerAdminService)(getChannelzServiceDefinition, getChannelzHandlers);\n}\nexports.setup = setup;","map":{"version":3,"mappings":"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","names":["channelRefToMessage","ref","channel_id","id","name","subchannelRefToMessage","subchannel_id","serverRefToMessage","server_id","socketRefToMessage","socket_id","TARGET_RETAINED_TRACES","ChannelzTrace","constructor","creationTimestamp","Date","addTrace","severity","description","child","timestamp","events","push","childChannel","kind","undefined","childSubchannel","length","slice","eventsLogged","getTraceMessage","creation_timestamp","dateToProtoTimestamp","num_events_logged","map","event","channel_ref","subchannel_ref","exports","ChannelzChildrenTracker","Map","refChild","trackedChild","channelChildren","get","count","set","subchannelChildren","socketChildren","unrefChild","delete","getChildLists","channels","values","subchannels","sockets","ChannelzCallTracker","addCallStarted","callsStarted","lastCallStartedTimestamp","addCallSucceeded","callsSucceeded","addCallFailed","callsFailed","nextId","getNextId","servers","registerChannelzChannel","getInfo","channelzEnabled","registerChannelzSubchannel","registerChannelzServer","registerChannelzSocket","unregisterChannelzRef","parseIPv6Section","addressSection","numberValue","Number","parseInt","parseIPv6Chunk","addressChunk","bytePairs","split","section","result","concat","ipAddressStringToBuffer","ipAddress","Buffer","from","Uint8Array","segment","leftSection","rightSection","doubleColonIndex","indexOf","substring","leftBuffer","rightBuffer","middleBuffer","alloc","connectivityStateToMessage","state","connectivity_state_1","CONNECTING","IDLE","READY","SHUTDOWN","TRANSIENT_FAILURE","date","millisSinceEpoch","getTime","seconds","nanos","getChannelMessage","channelEntry","resolvedInfo","data","target","calls_started","callTracker","calls_succeeded","calls_failed","last_call_started_timestamp","trace","children","GetChannel","call","callback","channelId","request","constants_1","NOT_FOUND","channel","GetTopChannels","maxResults","max_results","resultList","i","start_channel_id","end","getServerMessage","serverEntry","listen_socket","listenerChildren","GetServer","serverId","server","GetServers","start_server_id","GetSubchannel","subchannelId","subchannelEntry","subchannelMessage","socket_ref","subchannel","subchannelAddressToAddressMessage","subchannelAddress","address","tcpip_address","ip_address","host","port","uds_address","filename","path","GetSocket","socketId","socketEntry","securityMessage","security","model","tls","cipher_suite","cipherSuiteStandardName","standard_name","other_name","cipherSuiteOtherName","local_certificate","localCertificate","remote_certificate","remoteCertificate","socketMessage","local","localAddress","remote","remoteAddress","remote_name","remoteName","keep_alives_sent","keepAlivesSent","streams_started","streamsStarted","streams_succeeded","streamsSucceeded","streams_failed","streamsFailed","last_local_stream_created_timestamp","lastLocalStreamCreatedTimestamp","last_remote_stream_created_timestamp","lastRemoteStreamCreatedTimestamp","messages_received","messagesReceived","messages_sent","messagesSent","last_message_received_timestamp","lastMessageReceivedTimestamp","last_message_sent_timestamp","lastMessageSentTimestamp","local_flow_control_window","localFlowControlWindow","value","remote_flow_control_window","remoteFlowControlWindow","socket","GetServerSockets","startId","start_socket_id","allSockets","sessionChildren","sort","ref1","ref2","getChannelzHandlers","loadedChannelzDefinition","getChannelzServiceDefinition","loaderLoadSync","require","loadSync","loadedProto","keepCase","longs","String","enums","defaults","oneofs","includeDirs","__dirname","channelzGrpcObject","grpc","channelz","v1","Channelz","service","setup"],"sources":["/home/achwak/node_modules/@grpc/grpc-js/src/channelz.ts"],"sourcesContent":["/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isIPv4, isIPv6 } from \"net\";\nimport { ConnectivityState } from \"./connectivity-state\";\nimport { Status } from \"./constants\";\nimport { Timestamp } from \"./generated/google/protobuf/Timestamp\";\nimport { Channel as ChannelMessage } from \"./generated/grpc/channelz/v1/Channel\";\nimport { ChannelConnectivityState__Output } from \"./generated/grpc/channelz/v1/ChannelConnectivityState\";\nimport { ChannelRef as ChannelRefMessage } from \"./generated/grpc/channelz/v1/ChannelRef\";\nimport { ChannelTrace } from \"./generated/grpc/channelz/v1/ChannelTrace\";\nimport { GetChannelRequest__Output } from \"./generated/grpc/channelz/v1/GetChannelRequest\";\nimport { GetChannelResponse } from \"./generated/grpc/channelz/v1/GetChannelResponse\";\nimport { sendUnaryData, ServerUnaryCall } from \"./server-call\";\nimport { ServerRef as ServerRefMessage } from \"./generated/grpc/channelz/v1/ServerRef\";\nimport { SocketRef as SocketRefMessage } from \"./generated/grpc/channelz/v1/SocketRef\";\nimport { isTcpSubchannelAddress, SubchannelAddress } from \"./subchannel-address\";\nimport { SubchannelRef as SubchannelRefMessage } from \"./generated/grpc/channelz/v1/SubchannelRef\";\nimport { GetServerRequest__Output } from \"./generated/grpc/channelz/v1/GetServerRequest\";\nimport { GetServerResponse } from \"./generated/grpc/channelz/v1/GetServerResponse\";\nimport { Server as ServerMessage } from \"./generated/grpc/channelz/v1/Server\";\nimport { GetServersRequest__Output } from \"./generated/grpc/channelz/v1/GetServersRequest\";\nimport { GetServersResponse } from \"./generated/grpc/channelz/v1/GetServersResponse\";\nimport { GetTopChannelsRequest__Output } from \"./generated/grpc/channelz/v1/GetTopChannelsRequest\";\nimport { GetTopChannelsResponse } from \"./generated/grpc/channelz/v1/GetTopChannelsResponse\";\nimport { GetSubchannelRequest__Output } from \"./generated/grpc/channelz/v1/GetSubchannelRequest\";\nimport { GetSubchannelResponse } from \"./generated/grpc/channelz/v1/GetSubchannelResponse\";\nimport { Subchannel as SubchannelMessage } from \"./generated/grpc/channelz/v1/Subchannel\";\nimport { GetSocketRequest__Output } from \"./generated/grpc/channelz/v1/GetSocketRequest\";\nimport { GetSocketResponse } from \"./generated/grpc/channelz/v1/GetSocketResponse\";\nimport { Socket as SocketMessage } from \"./generated/grpc/channelz/v1/Socket\";\nimport { Address } from \"./generated/grpc/channelz/v1/Address\";\nimport { Security } from \"./generated/grpc/channelz/v1/Security\";\nimport { GetServerSocketsRequest__Output } from \"./generated/grpc/channelz/v1/GetServerSocketsRequest\";\nimport { GetServerSocketsResponse } from \"./generated/grpc/channelz/v1/GetServerSocketsResponse\";\nimport { ChannelzDefinition, ChannelzHandlers } from \"./generated/grpc/channelz/v1/Channelz\";\nimport { ProtoGrpcType as ChannelzProtoGrpcType } from \"./generated/channelz\";\nimport type { loadSync } from '@grpc/proto-loader';\nimport { registerAdminService } from \"./admin\";\nimport { loadPackageDefinition } from \"./make-client\";\n\nexport type TraceSeverity = 'CT_UNKNOWN' | 'CT_INFO' | 'CT_WARNING' | 'CT_ERROR';\n\nexport interface ChannelRef {\n  kind: 'channel';\n  id: number;\n  name: string;\n}\n\nexport interface SubchannelRef {\n  kind: 'subchannel';\n  id: number;\n  name: string;\n}\n\nexport interface ServerRef {\n  kind: 'server';\n  id: number;\n}\n\nexport interface SocketRef {\n  kind: 'socket';\n  id: number;\n  name: string;\n}\n\nfunction channelRefToMessage(ref: ChannelRef): ChannelRefMessage {\n  return {\n    channel_id: ref.id,\n    name: ref.name\n  };\n}\n\nfunction subchannelRefToMessage(ref: SubchannelRef): SubchannelRefMessage {\n  return {\n    subchannel_id: ref.id,\n    name: ref.name\n  }\n}\n\nfunction serverRefToMessage(ref: ServerRef): ServerRefMessage {\n  return {\n    server_id: ref.id\n  }\n}\n\nfunction socketRefToMessage(ref: SocketRef): SocketRefMessage {\n  return {\n    socket_id: ref.id,\n    name: ref.name\n  }\n}\n\ninterface TraceEvent {\n  description: string;\n  severity: TraceSeverity;\n  timestamp: Date;\n  childChannel?: ChannelRef;\n  childSubchannel?: SubchannelRef;\n}\n\n/**\n * The loose upper bound on the number of events that should be retained in a\n * trace. This may be exceeded by up to a factor of 2. Arbitrarily chosen as a\n * number that should be large enough to contain the recent relevant\n * information, but small enough to not use excessive memory.\n */\nconst TARGET_RETAINED_TRACES = 32;\n\nexport class ChannelzTrace {\n  events: TraceEvent[] = [];\n  creationTimestamp: Date;\n  eventsLogged: number = 0;\n\n  constructor() {\n    this.creationTimestamp = new Date();\n  }\n\n  addTrace(severity: TraceSeverity, description: string, child?: ChannelRef | SubchannelRef) {\n    const timestamp = new Date();\n    this.events.push({\n      description: description,\n      severity: severity,\n      timestamp: timestamp,\n      childChannel: child?.kind === 'channel' ? child : undefined,\n      childSubchannel: child?.kind === 'subchannel' ? child : undefined\n    });\n    // Whenever the trace array gets too large, discard the first half\n    if (this.events.length >= TARGET_RETAINED_TRACES * 2) {\n      this.events = this.events.slice(TARGET_RETAINED_TRACES);\n    }\n    this.eventsLogged += 1;\n  }\n\n  getTraceMessage(): ChannelTrace {\n    return {\n      creation_timestamp: dateToProtoTimestamp(this.creationTimestamp),\n      num_events_logged: this.eventsLogged,\n      events: this.events.map(event => {\n        return {\n          description: event.description,\n          severity: event.severity,\n          timestamp: dateToProtoTimestamp(event.timestamp),\n          channel_ref: event.childChannel ? channelRefToMessage(event.childChannel) : null,\n          subchannel_ref: event.childSubchannel ? subchannelRefToMessage(event.childSubchannel) : null\n        }\n      })\n    };\n  }\n}\n\nexport class ChannelzChildrenTracker {\n  private channelChildren: Map<number, {ref: ChannelRef, count: number}> = new Map<number, {ref: ChannelRef, count: number}>();\n  private subchannelChildren: Map<number, {ref: SubchannelRef, count: number}> = new Map<number, {ref: SubchannelRef, count: number}>();\n  private socketChildren: Map<number, {ref: SocketRef, count: number}> = new Map<number, {ref: SocketRef, count: number}>();\n\n  refChild(child: ChannelRef | SubchannelRef | SocketRef) {\n    switch (child.kind) {\n      case 'channel': {\n        let trackedChild = this.channelChildren.get(child.id) ?? {ref: child, count: 0};\n        trackedChild.count += 1;\n        this.channelChildren.set(child.id, trackedChild);\n        break;\n      }\n      case 'subchannel':{\n        let trackedChild = this.subchannelChildren.get(child.id) ?? {ref: child, count: 0};\n        trackedChild.count += 1;\n        this.subchannelChildren.set(child.id, trackedChild);\n        break;\n      }\n      case 'socket':{\n        let trackedChild = this.socketChildren.get(child.id) ?? {ref: child, count: 0};\n        trackedChild.count += 1;\n        this.socketChildren.set(child.id, trackedChild);\n        break;\n      }\n    }\n  }\n\n  unrefChild(child: ChannelRef | SubchannelRef | SocketRef) {\n    switch (child.kind) {\n      case 'channel': {\n        let trackedChild = this.channelChildren.get(child.id);\n        if (trackedChild !== undefined) {\n          trackedChild.count -= 1;\n          if (trackedChild.count === 0) {\n            this.channelChildren.delete(child.id);\n          } else {\n            this.channelChildren.set(child.id, trackedChild);\n          }\n        }\n        break;\n      }\n      case 'subchannel': {\n        let trackedChild = this.subchannelChildren.get(child.id);\n        if (trackedChild !== undefined) {\n          trackedChild.count -= 1;\n          if (trackedChild.count === 0) {\n            this.subchannelChildren.delete(child.id);\n          } else {\n            this.subchannelChildren.set(child.id, trackedChild);\n          }\n        }\n        break;\n      }\n      case 'socket': {\n        let trackedChild = this.socketChildren.get(child.id);\n        if (trackedChild !== undefined) {\n          trackedChild.count -= 1;\n          if (trackedChild.count === 0) {\n            this.socketChildren.delete(child.id);\n          } else {\n            this.socketChildren.set(child.id, trackedChild);\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  getChildLists(): ChannelzChildren {\n    const channels: ChannelRef[] = [];\n    for (const {ref} of this.channelChildren.values()) {\n      channels.push(ref);\n    }\n    const subchannels: SubchannelRef[] = [];\n    for (const {ref} of this.subchannelChildren.values()) {\n      subchannels.push(ref);\n    }\n    const sockets: SocketRef[] = [];\n    for (const {ref} of this.socketChildren.values()) {\n      sockets.push(ref);\n    }\n    return {channels, subchannels, sockets};\n  }\n}\n\nexport class ChannelzCallTracker {\n  callsStarted: number = 0;\n  callsSucceeded: number = 0;\n  callsFailed: number = 0;\n  lastCallStartedTimestamp: Date | null = null;\n\n  addCallStarted() {\n    this.callsStarted += 1;\n    this.lastCallStartedTimestamp = new Date();\n  }\n  addCallSucceeded() {\n    this.callsSucceeded += 1;\n  }\n  addCallFailed() {\n    this.callsFailed += 1;\n  }\n}\n\nexport interface ChannelzChildren {\n  channels: ChannelRef[];\n  subchannels: SubchannelRef[];\n  sockets: SocketRef[];\n}\n\nexport interface ChannelInfo {\n  target: string;\n  state: ConnectivityState;\n  trace: ChannelzTrace;\n  callTracker: ChannelzCallTracker;\n  children: ChannelzChildren;\n}\n\nexport interface SubchannelInfo extends ChannelInfo {}\n\nexport interface ServerInfo {\n  trace: ChannelzTrace;\n  callTracker: ChannelzCallTracker;\n  listenerChildren: ChannelzChildren;\n  sessionChildren: ChannelzChildren;\n}\n\nexport interface TlsInfo {\n  cipherSuiteStandardName: string | null;\n  cipherSuiteOtherName: string | null;\n  localCertificate: Buffer | null;\n  remoteCertificate: Buffer | null;\n}\n\nexport interface SocketInfo {\n  localAddress: SubchannelAddress | null;\n  remoteAddress: SubchannelAddress | null;\n  security: TlsInfo | null;\n  remoteName: string | null;\n  streamsStarted: number;\n  streamsSucceeded: number;\n  streamsFailed: number;\n  messagesSent: number;\n  messagesReceived: number;\n  keepAlivesSent: number;\n  lastLocalStreamCreatedTimestamp: Date | null;\n  lastRemoteStreamCreatedTimestamp: Date | null;\n  lastMessageSentTimestamp: Date | null;\n  lastMessageReceivedTimestamp: Date | null;\n  localFlowControlWindow: number | null;\n  remoteFlowControlWindow: number | null;\n}\n\ninterface ChannelEntry {\n  ref: ChannelRef;\n  getInfo(): ChannelInfo;\n}\n\ninterface SubchannelEntry {\n  ref: SubchannelRef;\n  getInfo(): SubchannelInfo;\n}\n\ninterface ServerEntry {\n  ref: ServerRef;\n  getInfo(): ServerInfo;\n}\n\ninterface SocketEntry {\n  ref: SocketRef;\n  getInfo(): SocketInfo;\n}\n\nlet nextId = 1;\n\nfunction getNextId(): number {\n  return nextId++;\n}\n\nconst channels: (ChannelEntry | undefined)[] = [];\nconst subchannels: (SubchannelEntry | undefined)[] = [];\nconst servers: (ServerEntry | undefined)[] = [];\nconst sockets: (SocketEntry | undefined)[] = [];\n\nexport function registerChannelzChannel(name: string, getInfo: () => ChannelInfo, channelzEnabled: boolean): ChannelRef {\n  const id = getNextId();\n  const ref: ChannelRef = {id, name, kind: 'channel'};\n  if (channelzEnabled) {\n    channels[id] = { ref, getInfo };\n  }\n  return ref;\n}\n\nexport function registerChannelzSubchannel(name: string, getInfo:() => SubchannelInfo, channelzEnabled: boolean): SubchannelRef {\n  const id = getNextId();\n  const ref: SubchannelRef = {id, name, kind: 'subchannel'};\n  if (channelzEnabled) {\n    subchannels[id] = { ref, getInfo };\n  }\n  return ref;\n}\n\nexport function registerChannelzServer(getInfo: () => ServerInfo, channelzEnabled: boolean): ServerRef {\n  const id = getNextId();\n  const ref: ServerRef = {id, kind: 'server'};\n  if (channelzEnabled) {\n    servers[id] = { ref, getInfo };\n  }\n  return ref;\n}\n\nexport function registerChannelzSocket(name: string, getInfo: () => SocketInfo, channelzEnabled: boolean): SocketRef {\n  const id = getNextId();\n  const ref: SocketRef = {id, name, kind: 'socket'};\n  if (channelzEnabled) {\n    sockets[id] = { ref, getInfo};\n  }\n  return ref;\n}\n\nexport function unregisterChannelzRef(ref: ChannelRef | SubchannelRef | ServerRef | SocketRef) {\n  switch (ref.kind) {\n    case 'channel':\n      delete channels[ref.id];\n      return;\n    case 'subchannel':\n      delete subchannels[ref.id];\n      return;\n    case 'server':\n      delete servers[ref.id];\n      return;\n    case 'socket':\n      delete sockets[ref.id];\n      return;\n  }\n}\n\n/**\n * Parse a single section of an IPv6 address as two bytes\n * @param addressSection A hexadecimal string of length up to 4\n * @returns The pair of bytes representing this address section\n */\nfunction parseIPv6Section(addressSection: string): [number, number] {\n  const numberValue = Number.parseInt(addressSection, 16);\n  return [numberValue / 256 | 0, numberValue % 256];\n}\n\n/**\n * Parse a chunk of an IPv6 address string to some number of bytes\n * @param addressChunk Some number of segments of up to 4 hexadecimal\n *   characters each, joined by colons.\n * @returns The list of bytes representing this address chunk\n */\nfunction parseIPv6Chunk(addressChunk: string): number[] {\n  if (addressChunk === '') {\n    return [];\n  }\n  const bytePairs = addressChunk.split(':').map(section => parseIPv6Section(section));\n  const result: number[] = [];\n  return result.concat(...bytePairs);\n}\n\n/**\n * Converts an IPv4 or IPv6 address from string representation to binary\n * representation\n * @param ipAddress an IP address in standard IPv4 or IPv6 text format\n * @returns \n */\nfunction ipAddressStringToBuffer(ipAddress: string): Buffer | null {\n  if (isIPv4(ipAddress)) {\n    return Buffer.from(Uint8Array.from(ipAddress.split('.').map(segment => Number.parseInt(segment))));\n  } else if (isIPv6(ipAddress)) {\n    let leftSection: string;\n    let rightSection: string;\n    const doubleColonIndex = ipAddress.indexOf('::');\n    if (doubleColonIndex === -1) {\n      leftSection = ipAddress;\n      rightSection = '';\n    } else {\n      leftSection = ipAddress.substring(0, doubleColonIndex);\n      rightSection = ipAddress.substring(doubleColonIndex + 2);\n    }\n    const leftBuffer = Buffer.from(parseIPv6Chunk(leftSection));\n    const rightBuffer = Buffer.from(parseIPv6Chunk(rightSection));\n    const middleBuffer = Buffer.alloc(16 - leftBuffer.length - rightBuffer.length, 0);\n    return Buffer.concat([leftBuffer, middleBuffer, rightBuffer]);\n  } else {\n    return null;\n  }\n}\n\nfunction connectivityStateToMessage(state: ConnectivityState): ChannelConnectivityState__Output {\n  switch (state) {\n    case ConnectivityState.CONNECTING:\n      return {\n        state: 'CONNECTING'\n      };\n    case ConnectivityState.IDLE:\n      return {\n        state: 'IDLE'\n      };\n    case ConnectivityState.READY:\n      return {\n        state: 'READY'\n      };\n    case ConnectivityState.SHUTDOWN:\n      return {\n        state: 'SHUTDOWN'\n      };\n    case ConnectivityState.TRANSIENT_FAILURE:\n      return {\n        state: 'TRANSIENT_FAILURE'\n      };\n    default:\n      return {\n        state: 'UNKNOWN'\n      };\n  }\n}\n\nfunction dateToProtoTimestamp(date?: Date | null): Timestamp | null {\n  if (!date) {\n    return null;\n  }\n  const millisSinceEpoch = date.getTime();\n  return {\n    seconds: (millisSinceEpoch / 1000) | 0,\n    nanos: (millisSinceEpoch % 1000) * 1_000_000\n  }\n}\n\nfunction getChannelMessage(channelEntry: ChannelEntry): ChannelMessage {\n  const resolvedInfo = channelEntry.getInfo();\n  return {\n    ref: channelRefToMessage(channelEntry.ref),\n    data: {\n      target: resolvedInfo.target,\n      state: connectivityStateToMessage(resolvedInfo.state),\n      calls_started: resolvedInfo.callTracker.callsStarted,\n      calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n      calls_failed: resolvedInfo.callTracker.callsFailed,\n      last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n      trace: resolvedInfo.trace.getTraceMessage()\n    },\n    channel_ref: resolvedInfo.children.channels.map(ref => channelRefToMessage(ref)),\n    subchannel_ref: resolvedInfo.children.subchannels.map(ref => subchannelRefToMessage(ref))\n  };\n}\n\nfunction GetChannel(call: ServerUnaryCall<GetChannelRequest__Output, GetChannelResponse>, callback: sendUnaryData<GetChannelResponse>): void {\n  const channelId = Number.parseInt(call.request.channel_id);\n  const channelEntry = channels[channelId];\n  if (channelEntry === undefined) {\n    callback({\n      'code': Status.NOT_FOUND,\n      'details': 'No channel data found for id ' + channelId\n    });\n    return;\n  }\n  callback(null, {channel: getChannelMessage(channelEntry)});\n}\n\nfunction GetTopChannels(call: ServerUnaryCall<GetTopChannelsRequest__Output, GetTopChannelsResponse>, callback: sendUnaryData<GetTopChannelsResponse>): void {\n  const maxResults = Number.parseInt(call.request.max_results);\n  const resultList: ChannelMessage[] = [];\n  let i = Number.parseInt(call.request.start_channel_id);\n  for (; i < channels.length; i++) {\n    const channelEntry = channels[i];\n    if (channelEntry === undefined) {\n      continue;\n    }\n    resultList.push(getChannelMessage(channelEntry));\n    if (resultList.length >= maxResults) {\n      break;\n    }\n  }\n  callback(null, {\n    channel: resultList,\n    end: i >= servers.length\n  });\n}\n\nfunction getServerMessage(serverEntry: ServerEntry): ServerMessage {\n  const resolvedInfo = serverEntry.getInfo();\n  return {\n    ref: serverRefToMessage(serverEntry.ref),\n    data: {\n      calls_started: resolvedInfo.callTracker.callsStarted,\n      calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n      calls_failed: resolvedInfo.callTracker.callsFailed,\n      last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n      trace: resolvedInfo.trace.getTraceMessage()\n    },\n    listen_socket: resolvedInfo.listenerChildren.sockets.map(ref => socketRefToMessage(ref))\n  };\n}\n\nfunction GetServer(call: ServerUnaryCall<GetServerRequest__Output, GetServerResponse>, callback: sendUnaryData<GetServerResponse>): void {\n  const serverId = Number.parseInt(call.request.server_id);\n  const serverEntry = servers[serverId];\n  if (serverEntry === undefined) {\n    callback({\n      'code': Status.NOT_FOUND,\n      'details': 'No server data found for id ' + serverId\n    });\n    return;\n  }\n  callback(null, {server: getServerMessage(serverEntry)});\n}\n\nfunction GetServers(call: ServerUnaryCall<GetServersRequest__Output, GetServersResponse>, callback: sendUnaryData<GetServersResponse>): void {\n  const maxResults = Number.parseInt(call.request.max_results);\n  const resultList: ServerMessage[] = [];\n  let i = Number.parseInt(call.request.start_server_id);\n  for (; i < servers.length; i++) {\n    const serverEntry = servers[i];\n    if (serverEntry === undefined) {\n      continue;\n    }\n    resultList.push(getServerMessage(serverEntry));\n    if (resultList.length >= maxResults) {\n      break;\n    }\n  }\n  callback(null, {\n    server: resultList,\n    end: i >= servers.length\n  });\n}\n\nfunction GetSubchannel(call: ServerUnaryCall<GetSubchannelRequest__Output, GetSubchannelResponse>, callback: sendUnaryData<GetSubchannelResponse>): void {\n  const subchannelId = Number.parseInt(call.request.subchannel_id);\n  const subchannelEntry = subchannels[subchannelId];\n  if (subchannelEntry === undefined) {\n    callback({\n      'code': Status.NOT_FOUND,\n      'details': 'No subchannel data found for id ' + subchannelId\n    });\n    return;\n  }\n  const resolvedInfo = subchannelEntry.getInfo();\n  const subchannelMessage: SubchannelMessage = {\n    ref: subchannelRefToMessage(subchannelEntry.ref),\n    data: {\n      target: resolvedInfo.target,\n      state: connectivityStateToMessage(resolvedInfo.state),\n      calls_started: resolvedInfo.callTracker.callsStarted,\n      calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n      calls_failed: resolvedInfo.callTracker.callsFailed,\n      last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n      trace: resolvedInfo.trace.getTraceMessage()\n    },\n    socket_ref: resolvedInfo.children.sockets.map(ref => socketRefToMessage(ref))\n  };\n  callback(null, {subchannel: subchannelMessage});\n}\n\nfunction subchannelAddressToAddressMessage(subchannelAddress: SubchannelAddress): Address {\n  if (isTcpSubchannelAddress(subchannelAddress)) {\n    return {\n      address: 'tcpip_address',\n      tcpip_address: {\n        ip_address: ipAddressStringToBuffer(subchannelAddress.host) ?? undefined,\n        port: subchannelAddress.port\n      }\n    };\n  } else {\n    return {\n      address: 'uds_address',\n      uds_address: {\n        filename: subchannelAddress.path\n      }\n    };\n  }\n}\n\nfunction GetSocket(call: ServerUnaryCall<GetSocketRequest__Output, GetSocketResponse>, callback: sendUnaryData<GetSocketResponse>): void {\n  const socketId = Number.parseInt(call.request.socket_id);\n  const socketEntry = sockets[socketId];\n  if (socketEntry === undefined) {\n    callback({\n      'code': Status.NOT_FOUND,\n      'details': 'No socket data found for id ' + socketId\n    });\n    return;\n  }\n  const resolvedInfo = socketEntry.getInfo();\n  const securityMessage: Security | null = resolvedInfo.security ? {\n    model: 'tls',\n    tls: {\n      cipher_suite: resolvedInfo.security.cipherSuiteStandardName ? 'standard_name' : 'other_name',\n      standard_name: resolvedInfo.security.cipherSuiteStandardName ?? undefined,\n      other_name: resolvedInfo.security.cipherSuiteOtherName ?? undefined,\n      local_certificate: resolvedInfo.security.localCertificate ?? undefined,\n      remote_certificate: resolvedInfo.security.remoteCertificate ?? undefined\n    }\n  } : null;\n  const socketMessage: SocketMessage = {\n    ref: socketRefToMessage(socketEntry.ref),\n    local: resolvedInfo.localAddress ? subchannelAddressToAddressMessage(resolvedInfo.localAddress) : null,\n    remote: resolvedInfo.remoteAddress ? subchannelAddressToAddressMessage(resolvedInfo.remoteAddress) : null,\n    remote_name: resolvedInfo.remoteName ?? undefined,\n    security: securityMessage,\n    data: {\n      keep_alives_sent: resolvedInfo.keepAlivesSent,\n      streams_started: resolvedInfo.streamsStarted,\n      streams_succeeded: resolvedInfo.streamsSucceeded,\n      streams_failed: resolvedInfo.streamsFailed,\n      last_local_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastLocalStreamCreatedTimestamp),\n      last_remote_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastRemoteStreamCreatedTimestamp),\n      messages_received: resolvedInfo.messagesReceived,\n      messages_sent: resolvedInfo.messagesSent,\n      last_message_received_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageReceivedTimestamp),\n      last_message_sent_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageSentTimestamp),\n      local_flow_control_window: resolvedInfo.localFlowControlWindow ? { value: resolvedInfo.localFlowControlWindow } : null,\n      remote_flow_control_window: resolvedInfo.remoteFlowControlWindow ? { value: resolvedInfo.remoteFlowControlWindow } : null,\n    }\n  };\n  callback(null, {socket: socketMessage});\n}\n\nfunction GetServerSockets(call: ServerUnaryCall<GetServerSocketsRequest__Output, GetServerSocketsResponse>, callback: sendUnaryData<GetServerSocketsResponse>): void {\n  const serverId = Number.parseInt(call.request.server_id);\n  const serverEntry = servers[serverId];\n  if (serverEntry === undefined) {\n    callback({\n      'code': Status.NOT_FOUND,\n      'details': 'No server data found for id ' + serverId\n    });\n    return;\n  }\n  const startId = Number.parseInt(call.request.start_socket_id);\n  const maxResults = Number.parseInt(call.request.max_results);\n  const resolvedInfo = serverEntry.getInfo();\n  // If we wanted to include listener sockets in the result, this line would\n  // instead say\n  // const allSockets = resolvedInfo.listenerChildren.sockets.concat(resolvedInfo.sessionChildren.sockets).sort((ref1, ref2) => ref1.id - ref2.id);\n  const allSockets = resolvedInfo.sessionChildren.sockets.sort((ref1, ref2) => ref1.id - ref2.id);\n  const resultList: SocketRefMessage[] = [];\n  let i = 0;\n  for (; i < allSockets.length; i++) {\n    if (allSockets[i].id >= startId) {\n      resultList.push(socketRefToMessage(allSockets[i]));\n      if (resultList.length >= maxResults) {\n        break;\n      }\n    }\n  }\n  callback(null, {\n    socket_ref: resultList,\n    end: i >= allSockets.length\n  });\n}\n\nexport function getChannelzHandlers(): ChannelzHandlers {\n  return {\n    GetChannel,\n    GetTopChannels,\n    GetServer,\n    GetServers,\n    GetSubchannel,\n    GetSocket,\n    GetServerSockets\n  };\n}\n\nlet loadedChannelzDefinition: ChannelzDefinition | null = null;\n\nexport function getChannelzServiceDefinition(): ChannelzDefinition {\n  if (loadedChannelzDefinition) {\n    return loadedChannelzDefinition;\n  }\n  /* The purpose of this complexity is to avoid loading @grpc/proto-loader at\n   * runtime for users who will not use/enable channelz. */\n  const loaderLoadSync = require('@grpc/proto-loader').loadSync as typeof loadSync;\n  const loadedProto = loaderLoadSync('channelz.proto', {\n    keepCase: true,\n    longs: String,\n    enums: String,\n    defaults: true,\n    oneofs: true,\n    includeDirs: [\n      `${__dirname}/../../proto`\n    ]\n  });\n  const channelzGrpcObject = loadPackageDefinition(loadedProto) as unknown as ChannelzProtoGrpcType;\n  loadedChannelzDefinition = channelzGrpcObject.grpc.channelz.v1.Channelz.service;\n  return loadedChannelzDefinition;\n}\n\nexport function setup() {\n  registerAdminService(getChannelzServiceDefinition, getChannelzHandlers);\n}"]},"metadata":{},"sourceType":"script","externalDependencies":[]}