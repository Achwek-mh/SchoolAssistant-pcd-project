{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FilterStackFactory = exports.FilterStack = void 0;\nclass FilterStack {\n  constructor(filters) {\n    this.filters = filters;\n  }\n  sendMetadata(metadata) {\n    let result = metadata;\n    for (let i = 0; i < this.filters.length; i++) {\n      result = this.filters[i].sendMetadata(result);\n    }\n    return result;\n  }\n  receiveMetadata(metadata) {\n    let result = metadata;\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveMetadata(result);\n    }\n    return result;\n  }\n  sendMessage(message) {\n    let result = message;\n    for (let i = 0; i < this.filters.length; i++) {\n      result = this.filters[i].sendMessage(result);\n    }\n    return result;\n  }\n  receiveMessage(message) {\n    let result = message;\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveMessage(result);\n    }\n    return result;\n  }\n  receiveTrailers(status) {\n    let result = status;\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveTrailers(result);\n    }\n    return result;\n  }\n  push(filters) {\n    this.filters.unshift(...filters);\n  }\n  getFilters() {\n    return this.filters;\n  }\n}\nexports.FilterStack = FilterStack;\nclass FilterStackFactory {\n  constructor(factories) {\n    this.factories = factories;\n  }\n  push(filterFactories) {\n    this.factories.unshift(...filterFactories);\n  }\n  clone() {\n    return new FilterStackFactory([...this.factories]);\n  }\n  createFilter() {\n    return new FilterStack(this.factories.map(factory => factory.createFilter()));\n  }\n}\nexports.FilterStackFactory = FilterStackFactory;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAqBA,MAAaA,WAAW;EACtBC,YAA6BC,OAAiB;IAAjB,YAAO,GAAPA,OAAO;EAAa;EAEjDC,YAAY,CAACC,QAA2B;IACtC,IAAIC,MAAM,GAAsBD,QAAQ;IAExC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACJ,OAAO,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;MAC5CD,MAAM,GAAG,IAAI,CAACH,OAAO,CAACI,CAAC,CAAC,CAACH,YAAY,CAACE,MAAM,CAAC;;IAG/C,OAAOA,MAAM;EACf;EAEAG,eAAe,CAACJ,QAAkB;IAChC,IAAIC,MAAM,GAAaD,QAAQ;IAE/B,KAAK,IAAIE,CAAC,GAAG,IAAI,CAACJ,OAAO,CAACK,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACjDD,MAAM,GAAG,IAAI,CAACH,OAAO,CAACI,CAAC,CAAC,CAACE,eAAe,CAACH,MAAM,CAAC;;IAGlD,OAAOA,MAAM;EACf;EAEAI,WAAW,CAACC,OAA6B;IACvC,IAAIL,MAAM,GAAyBK,OAAO;IAE1C,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACJ,OAAO,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;MAC5CD,MAAM,GAAG,IAAI,CAACH,OAAO,CAACI,CAAC,CAAC,CAACG,WAAW,CAACJ,MAAM,CAAC;;IAG9C,OAAOA,MAAM;EACf;EAEAM,cAAc,CAACD,OAAwB;IACrC,IAAIL,MAAM,GAAoBK,OAAO;IAErC,KAAK,IAAIJ,CAAC,GAAG,IAAI,CAACJ,OAAO,CAACK,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACjDD,MAAM,GAAG,IAAI,CAACH,OAAO,CAACI,CAAC,CAAC,CAACK,cAAc,CAACN,MAAM,CAAC;;IAGjD,OAAOA,MAAM;EACf;EAEAO,eAAe,CAACC,MAAoB;IAClC,IAAIR,MAAM,GAAiBQ,MAAM;IAEjC,KAAK,IAAIP,CAAC,GAAG,IAAI,CAACJ,OAAO,CAACK,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACjDD,MAAM,GAAG,IAAI,CAACH,OAAO,CAACI,CAAC,CAAC,CAACM,eAAe,CAACP,MAAM,CAAC;;IAGlD,OAAOA,MAAM;EACf;EAEAS,IAAI,CAACZ,OAAiB;IACpB,IAAI,CAACA,OAAO,CAACa,OAAO,CAAC,GAAGb,OAAO,CAAC;EAClC;EAEAc,UAAU;IACR,OAAO,IAAI,CAACd,OAAO;EACrB;;AA3DFe;AA8DA,MAAaC,kBAAkB;EAC7BjB,YAA6BkB,SAAuC;IAAvC,cAAS,GAATA,SAAS;EAAiC;EAEvEL,IAAI,CAACM,eAAwC;IAC3C,IAAI,CAACD,SAAS,CAACJ,OAAO,CAAC,GAAGK,eAAe,CAAC;EAC5C;EAEAC,KAAK;IACH,OAAO,IAAIH,kBAAkB,CAAC,CAAC,GAAG,IAAI,CAACC,SAAS,CAAC,CAAC;EACpD;EAEAG,YAAY;IACV,OAAO,IAAItB,WAAW,CACpB,IAAI,CAACmB,SAAS,CAACI,GAAG,CAAEC,OAAO,IAAKA,OAAO,CAACF,YAAY,EAAE,CAAC,CACxD;EACH;;AAfFL","names":["FilterStack","constructor","filters","sendMetadata","metadata","result","i","length","receiveMetadata","sendMessage","message","receiveMessage","receiveTrailers","status","push","unshift","getFilters","exports","FilterStackFactory","factories","filterFactories","clone","createFilter","map","factory"],"sources":["/home/achwak/node_modules/@grpc/grpc-js/src/filter-stack.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { StatusObject, WriteObject } from './call-interface';\nimport { Filter, FilterFactory } from './filter';\nimport { Metadata } from './metadata';\n\nexport class FilterStack implements Filter {\n  constructor(private readonly filters: Filter[]) {}\n\n  sendMetadata(metadata: Promise<Metadata>): Promise<Metadata> {\n    let result: Promise<Metadata> = metadata;\n\n    for (let i = 0; i < this.filters.length; i++) {\n      result = this.filters[i].sendMetadata(result);\n    }\n\n    return result;\n  }\n\n  receiveMetadata(metadata: Metadata) {\n    let result: Metadata = metadata;\n\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveMetadata(result);\n    }\n\n    return result;\n  }\n\n  sendMessage(message: Promise<WriteObject>): Promise<WriteObject> {\n    let result: Promise<WriteObject> = message;\n\n    for (let i = 0; i < this.filters.length; i++) {\n      result = this.filters[i].sendMessage(result);\n    }\n\n    return result;\n  }\n\n  receiveMessage(message: Promise<Buffer>): Promise<Buffer> {\n    let result: Promise<Buffer> = message;\n\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveMessage(result);\n    }\n\n    return result;\n  }\n\n  receiveTrailers(status: StatusObject): StatusObject {\n    let result: StatusObject = status;\n\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveTrailers(result);\n    }\n\n    return result;\n  }\n\n  push(filters: Filter[]) {\n    this.filters.unshift(...filters);\n  }\n\n  getFilters(): Filter[] {\n    return this.filters;\n  }\n}\n\nexport class FilterStackFactory implements FilterFactory<FilterStack> {\n  constructor(private readonly factories: Array<FilterFactory<Filter>>) {}\n\n  push(filterFactories: FilterFactory<Filter>[]) {\n    this.factories.unshift(...filterFactories);\n  }\n\n  clone(): FilterStackFactory {\n    return new FilterStackFactory([...this.factories]);\n  }\n\n  createFilter(): FilterStack {\n    return new FilterStack(\n      this.factories.map((factory) => factory.createFilter())\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}