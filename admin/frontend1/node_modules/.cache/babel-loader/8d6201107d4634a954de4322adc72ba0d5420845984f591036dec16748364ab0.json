{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = void 0;\nconst resolver_1 = require(\"./resolver\");\nconst dns = require(\"dns\");\nconst util = require(\"util\");\nconst service_config_1 = require(\"./service-config\");\nconst constants_1 = require(\"./constants\");\nconst metadata_1 = require(\"./metadata\");\nconst logging = require(\"./logging\");\nconst constants_2 = require(\"./constants\");\nconst uri_parser_1 = require(\"./uri-parser\");\nconst net_1 = require(\"net\");\nconst backoff_timeout_1 = require(\"./backoff-timeout\");\nconst TRACER_NAME = 'dns_resolver';\nfunction trace(text) {\n  logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n/**\n * The default TCP port to connect to if not explicitly specified in the target.\n */\nconst DEFAULT_PORT = 443;\nconst DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS = 30000;\nconst resolveTxtPromise = util.promisify(dns.resolveTxt);\nconst dnsLookupPromise = util.promisify(dns.lookup);\n/**\n * Merge any number of arrays into a single alternating array\n * @param arrays\n */\nfunction mergeArrays() {\n  const result = [];\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n  for (let i = 0; i < Math.max.apply(null, arrays.map(array => array.length)); i++) {\n    for (const array of arrays) {\n      if (i < array.length) {\n        result.push(array[i]);\n      }\n    }\n  }\n  return result;\n}\n/**\n * Resolver implementation that handles DNS names and IP addresses.\n */\nclass DnsResolver {\n  constructor(target, listener, channelOptions) {\n    var _a, _b, _c;\n    this.target = target;\n    this.listener = listener;\n    this.pendingLookupPromise = null;\n    this.pendingTxtPromise = null;\n    this.latestLookupResult = null;\n    this.latestServiceConfig = null;\n    this.latestServiceConfigError = null;\n    this.continueResolving = false;\n    this.isNextResolutionTimerRunning = false;\n    this.isServiceConfigEnabled = true;\n    trace('Resolver constructed for target ' + (0, uri_parser_1.uriToString)(target));\n    const hostPort = (0, uri_parser_1.splitHostPort)(target.path);\n    if (hostPort === null) {\n      this.ipResult = null;\n      this.dnsHostname = null;\n      this.port = null;\n    } else {\n      if ((0, net_1.isIPv4)(hostPort.host) || (0, net_1.isIPv6)(hostPort.host)) {\n        this.ipResult = [{\n          host: hostPort.host,\n          port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT\n        }];\n        this.dnsHostname = null;\n        this.port = null;\n      } else {\n        this.ipResult = null;\n        this.dnsHostname = hostPort.host;\n        this.port = (_b = hostPort.port) !== null && _b !== void 0 ? _b : DEFAULT_PORT;\n      }\n    }\n    this.percentage = Math.random() * 100;\n    if (channelOptions['grpc.service_config_disable_resolution'] === 1) {\n      this.isServiceConfigEnabled = false;\n    }\n    this.defaultResolutionError = {\n      code: constants_1.Status.UNAVAILABLE,\n      details: `Name resolution failed for target ${(0, uri_parser_1.uriToString)(this.target)}`,\n      metadata: new metadata_1.Metadata()\n    };\n    const backoffOptions = {\n      initialDelay: channelOptions['grpc.initial_reconnect_backoff_ms'],\n      maxDelay: channelOptions['grpc.max_reconnect_backoff_ms']\n    };\n    this.backoff = new backoff_timeout_1.BackoffTimeout(() => {\n      if (this.continueResolving) {\n        this.startResolutionWithBackoff();\n      }\n    }, backoffOptions);\n    this.backoff.unref();\n    this.minTimeBetweenResolutionsMs = (_c = channelOptions['grpc.dns_min_time_between_resolutions_ms']) !== null && _c !== void 0 ? _c : DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS;\n    this.nextResolutionTimer = setTimeout(() => {}, 0);\n    clearTimeout(this.nextResolutionTimer);\n  }\n  /**\n   * If the target is an IP address, just provide that address as a result.\n   * Otherwise, initiate A, AAAA, and TXT lookups\n   */\n  startResolution() {\n    if (this.ipResult !== null) {\n      trace('Returning IP address for target ' + (0, uri_parser_1.uriToString)(this.target));\n      setImmediate(() => {\n        this.listener.onSuccessfulResolution(this.ipResult, null, null, null, {});\n      });\n      this.backoff.stop();\n      this.backoff.reset();\n      return;\n    }\n    if (this.dnsHostname === null) {\n      trace('Failed to parse DNS address ' + (0, uri_parser_1.uriToString)(this.target));\n      setImmediate(() => {\n        this.listener.onError({\n          code: constants_1.Status.UNAVAILABLE,\n          details: `Failed to parse DNS address ${(0, uri_parser_1.uriToString)(this.target)}`,\n          metadata: new metadata_1.Metadata()\n        });\n      });\n      this.stopNextResolutionTimer();\n    } else {\n      if (this.pendingLookupPromise !== null) {\n        return;\n      }\n      trace('Looking up DNS hostname ' + this.dnsHostname);\n      /* We clear out latestLookupResult here to ensure that it contains the\n       * latest result since the last time we started resolving. That way, the\n       * TXT resolution handler can use it, but only if it finishes second. We\n       * don't clear out any previous service config results because it's\n       * better to use a service config that's slightly out of date than to\n       * revert to an effectively blank one. */\n      this.latestLookupResult = null;\n      const hostname = this.dnsHostname;\n      /* We lookup both address families here and then split them up later\n       * because when looking up a single family, dns.lookup outputs an error\n       * if the name exists but there are no records for that family, and that\n       * error is indistinguishable from other kinds of errors */\n      this.pendingLookupPromise = dnsLookupPromise(hostname, {\n        all: true\n      });\n      this.pendingLookupPromise.then(addressList => {\n        this.pendingLookupPromise = null;\n        this.backoff.reset();\n        this.backoff.stop();\n        const ip4Addresses = addressList.filter(addr => addr.family === 4);\n        const ip6Addresses = addressList.filter(addr => addr.family === 6);\n        this.latestLookupResult = mergeArrays(ip6Addresses, ip4Addresses).map(addr => ({\n          host: addr.address,\n          port: +this.port\n        }));\n        const allAddressesString = '[' + this.latestLookupResult.map(addr => addr.host + ':' + addr.port).join(',') + ']';\n        trace('Resolved addresses for target ' + (0, uri_parser_1.uriToString)(this.target) + ': ' + allAddressesString);\n        if (this.latestLookupResult.length === 0) {\n          this.listener.onError(this.defaultResolutionError);\n          return;\n        }\n        /* If the TXT lookup has not yet finished, both of the last two\n         * arguments will be null, which is the equivalent of getting an\n         * empty TXT response. When the TXT lookup does finish, its handler\n         * can update the service config by using the same address list */\n        this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});\n      }, err => {\n        trace('Resolution error for target ' + (0, uri_parser_1.uriToString)(this.target) + ': ' + err.message);\n        this.pendingLookupPromise = null;\n        this.stopNextResolutionTimer();\n        this.listener.onError(this.defaultResolutionError);\n      });\n      /* If there already is a still-pending TXT resolution, we can just use\n       * that result when it comes in */\n      if (this.isServiceConfigEnabled && this.pendingTxtPromise === null) {\n        /* We handle the TXT query promise differently than the others because\n         * the name resolution attempt as a whole is a success even if the TXT\n         * lookup fails */\n        this.pendingTxtPromise = resolveTxtPromise(hostname);\n        this.pendingTxtPromise.then(txtRecord => {\n          this.pendingTxtPromise = null;\n          try {\n            this.latestServiceConfig = (0, service_config_1.extractAndSelectServiceConfig)(txtRecord, this.percentage);\n          } catch (err) {\n            this.latestServiceConfigError = {\n              code: constants_1.Status.UNAVAILABLE,\n              details: 'Parsing service config failed',\n              metadata: new metadata_1.Metadata()\n            };\n          }\n          if (this.latestLookupResult !== null) {\n            /* We rely here on the assumption that calling this function with\n             * identical parameters will be essentialy idempotent, and calling\n             * it with the same address list and a different service config\n             * should result in a fast and seamless switchover. */\n            this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});\n          }\n        }, err => {\n          /* If TXT lookup fails we should do nothing, which means that we\n           * continue to use the result of the most recent successful lookup,\n           * or the default null config object if there has never been a\n           * successful lookup. We do not set the latestServiceConfigError\n           * here because that is specifically used for response validation\n           * errors. We still need to handle this error so that it does not\n           * bubble up as an unhandled promise rejection. */\n        });\n      }\n    }\n  }\n  startNextResolutionTimer() {\n    var _a, _b;\n    clearTimeout(this.nextResolutionTimer);\n    this.nextResolutionTimer = (_b = (_a = setTimeout(() => {\n      this.stopNextResolutionTimer();\n      if (this.continueResolving) {\n        this.startResolutionWithBackoff();\n      }\n    }, this.minTimeBetweenResolutionsMs)).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    this.isNextResolutionTimerRunning = true;\n  }\n  stopNextResolutionTimer() {\n    clearTimeout(this.nextResolutionTimer);\n    this.isNextResolutionTimerRunning = false;\n  }\n  startResolutionWithBackoff() {\n    if (this.pendingLookupPromise === null) {\n      this.continueResolving = false;\n      this.startResolution();\n      this.backoff.runOnce();\n      this.startNextResolutionTimer();\n    }\n  }\n  updateResolution() {\n    /* If there is a pending lookup, just let it finish. Otherwise, if the\n     * nextResolutionTimer or backoff timer is running, set the\n     * continueResolving flag to resolve when whichever of those timers\n     * fires. Otherwise, start resolving immediately. */\n    if (this.pendingLookupPromise === null) {\n      if (this.isNextResolutionTimerRunning || this.backoff.isRunning()) {\n        this.continueResolving = true;\n      } else {\n        this.startResolutionWithBackoff();\n      }\n    }\n  }\n  destroy() {\n    this.continueResolving = false;\n    this.backoff.stop();\n    this.stopNextResolutionTimer();\n  }\n  /**\n   * Get the default authority for the given target. For IP targets, that is\n   * the IP address. For DNS targets, it is the hostname.\n   * @param target\n   */\n  static getDefaultAuthority(target) {\n    return target.path;\n  }\n}\n/**\n * Set up the DNS resolver class by registering it as the handler for the\n * \"dns:\" prefix and as the default resolver.\n */\nfunction setup() {\n  (0, resolver_1.registerResolver)('dns', DnsResolver);\n  (0, resolver_1.registerDefaultScheme)('dns');\n}\nexports.setup = setup;","map":{"version":3,"mappings":"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","names":["TRACER_NAME","trace","text","logging","constants_2","DEBUG","DEFAULT_PORT","DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS","resolveTxtPromise","util","promisify","dns","resolveTxt","dnsLookupPromise","lookup","mergeArrays","result","arrays","i","Math","max","apply","map","array","length","push","DnsResolver","constructor","target","listener","channelOptions","hostPort","path","ipResult","dnsHostname","port","host","percentage","random","isServiceConfigEnabled","defaultResolutionError","code","constants_1","UNAVAILABLE","details","metadata","metadata_1","backoffOptions","initialDelay","maxDelay","backoff","backoff_timeout_1","continueResolving","startResolutionWithBackoff","unref","minTimeBetweenResolutionsMs","nextResolutionTimer","setTimeout","clearTimeout","startResolution","setImmediate","onSuccessfulResolution","stop","reset","onError","stopNextResolutionTimer","pendingLookupPromise","latestLookupResult","hostname","all","then","addressList","ip4Addresses","filter","addr","family","ip6Addresses","address","allAddressesString","join","latestServiceConfig","latestServiceConfigError","err","message","pendingTxtPromise","txtRecord","startNextResolutionTimer","isNextResolutionTimerRunning","runOnce","updateResolution","isRunning","destroy","getDefaultAuthority","setup","exports"],"sources":["/home/achwak/node_modules/@grpc/grpc-js/src/resolver-dns.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Resolver,\n  ResolverListener,\n  registerResolver,\n  registerDefaultScheme,\n} from './resolver';\nimport * as dns from 'dns';\nimport * as util from 'util';\nimport { extractAndSelectServiceConfig, ServiceConfig } from './service-config';\nimport { Status } from './constants';\nimport { StatusObject } from './call-interface';\nimport { Metadata } from './metadata';\nimport * as logging from './logging';\nimport { LogVerbosity } from './constants';\nimport { SubchannelAddress, TcpSubchannelAddress } from './subchannel-address';\nimport { GrpcUri, uriToString, splitHostPort } from './uri-parser';\nimport { isIPv6, isIPv4 } from 'net';\nimport { ChannelOptions } from './channel-options';\nimport { BackoffOptions, BackoffTimeout } from './backoff-timeout';\n\nconst TRACER_NAME = 'dns_resolver';\n\nfunction trace(text: string): void {\n  logging.trace(LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n\n/**\n * The default TCP port to connect to if not explicitly specified in the target.\n */\nconst DEFAULT_PORT = 443;\n\nconst DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS = 30_000;\n\nconst resolveTxtPromise = util.promisify(dns.resolveTxt);\nconst dnsLookupPromise = util.promisify(dns.lookup);\n\n/**\n * Merge any number of arrays into a single alternating array\n * @param arrays\n */\nfunction mergeArrays<T>(...arrays: T[][]): T[] {\n  const result: T[] = [];\n  for (\n    let i = 0;\n    i <\n    Math.max.apply(\n      null,\n      arrays.map((array) => array.length)\n    );\n    i++\n  ) {\n    for (const array of arrays) {\n      if (i < array.length) {\n        result.push(array[i]);\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Resolver implementation that handles DNS names and IP addresses.\n */\nclass DnsResolver implements Resolver {\n  private readonly ipResult: SubchannelAddress[] | null;\n  private readonly dnsHostname: string | null;\n  private readonly port: number | null;\n  /**\n   * Minimum time between resolutions, measured as the time between starting\n   * successive resolution requests. Only applies to successful resolutions.\n   * Failures are handled by the backoff timer.\n   */\n  private readonly minTimeBetweenResolutionsMs: number;\n  private pendingLookupPromise: Promise<dns.LookupAddress[]> | null = null;\n  private pendingTxtPromise: Promise<string[][]> | null = null;\n  private latestLookupResult: TcpSubchannelAddress[] | null = null;\n  private latestServiceConfig: ServiceConfig | null = null;\n  private latestServiceConfigError: StatusObject | null = null;\n  private percentage: number;\n  private defaultResolutionError: StatusObject;\n  private backoff: BackoffTimeout;\n  private continueResolving = false;\n  private nextResolutionTimer: NodeJS.Timer;\n  private isNextResolutionTimerRunning = false;\n  private isServiceConfigEnabled = true;\n  constructor(\n    private target: GrpcUri,\n    private listener: ResolverListener,\n    channelOptions: ChannelOptions\n  ) {\n    trace('Resolver constructed for target ' + uriToString(target));\n    const hostPort = splitHostPort(target.path);\n    if (hostPort === null) {\n      this.ipResult = null;\n      this.dnsHostname = null;\n      this.port = null;\n    } else {\n      if (isIPv4(hostPort.host) || isIPv6(hostPort.host)) {\n        this.ipResult = [\n          {\n            host: hostPort.host,\n            port: hostPort.port ?? DEFAULT_PORT,\n          },\n        ];\n        this.dnsHostname = null;\n        this.port = null;\n      } else {\n        this.ipResult = null;\n        this.dnsHostname = hostPort.host;\n        this.port = hostPort.port ?? DEFAULT_PORT;\n      }\n    }\n    this.percentage = Math.random() * 100;\n\n    if (channelOptions['grpc.service_config_disable_resolution'] === 1) {\n      this.isServiceConfigEnabled = false;\n    }\n\n    this.defaultResolutionError = {\n      code: Status.UNAVAILABLE,\n      details: `Name resolution failed for target ${uriToString(this.target)}`,\n      metadata: new Metadata(),\n    };\n    \n    const backoffOptions: BackoffOptions = {\n      initialDelay: channelOptions['grpc.initial_reconnect_backoff_ms'],\n      maxDelay: channelOptions['grpc.max_reconnect_backoff_ms'],\n    };\n\n    this.backoff = new BackoffTimeout(() => {\n      if (this.continueResolving) {\n        this.startResolutionWithBackoff();\n      }\n    }, backoffOptions);\n    this.backoff.unref();\n\n    this.minTimeBetweenResolutionsMs = channelOptions['grpc.dns_min_time_between_resolutions_ms'] ?? DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS;\n    this.nextResolutionTimer = setTimeout(() => {}, 0);\n    clearTimeout(this.nextResolutionTimer);\n  }\n\n  /**\n   * If the target is an IP address, just provide that address as a result.\n   * Otherwise, initiate A, AAAA, and TXT lookups\n   */\n  private startResolution() {\n    if (this.ipResult !== null) {\n      trace('Returning IP address for target ' + uriToString(this.target));\n      setImmediate(() => {\n        this.listener.onSuccessfulResolution(\n          this.ipResult!,\n          null,\n          null,\n          null,\n          {}\n        );\n      });\n      this.backoff.stop();\n      this.backoff.reset();\n      return;\n    }\n    if (this.dnsHostname === null) {\n      trace('Failed to parse DNS address ' + uriToString(this.target));\n      setImmediate(() => {\n        this.listener.onError({\n          code: Status.UNAVAILABLE,\n          details: `Failed to parse DNS address ${uriToString(this.target)}`,\n          metadata: new Metadata(),\n        });\n      });\n      this.stopNextResolutionTimer();\n    } else {\n      if (this.pendingLookupPromise !== null) {\n        return;\n      }\n      trace('Looking up DNS hostname ' + this.dnsHostname);\n      /* We clear out latestLookupResult here to ensure that it contains the\n       * latest result since the last time we started resolving. That way, the\n       * TXT resolution handler can use it, but only if it finishes second. We\n       * don't clear out any previous service config results because it's\n       * better to use a service config that's slightly out of date than to\n       * revert to an effectively blank one. */\n      this.latestLookupResult = null;\n      const hostname: string = this.dnsHostname;\n      /* We lookup both address families here and then split them up later\n       * because when looking up a single family, dns.lookup outputs an error\n       * if the name exists but there are no records for that family, and that\n       * error is indistinguishable from other kinds of errors */\n      this.pendingLookupPromise = dnsLookupPromise(hostname, { all: true });\n      this.pendingLookupPromise.then(\n        (addressList) => {\n          this.pendingLookupPromise = null;\n          this.backoff.reset();\n          this.backoff.stop();\n          const ip4Addresses: dns.LookupAddress[] = addressList.filter(\n            (addr) => addr.family === 4\n          );\n          const ip6Addresses: dns.LookupAddress[] = addressList.filter(\n            (addr) => addr.family === 6\n          );\n          this.latestLookupResult = mergeArrays(\n            ip6Addresses,\n            ip4Addresses\n          ).map((addr) => ({ host: addr.address, port: +this.port! }));\n          const allAddressesString: string =\n            '[' +\n            this.latestLookupResult\n              .map((addr) => addr.host + ':' + addr.port)\n              .join(',') +\n            ']';\n          trace(\n            'Resolved addresses for target ' +\n              uriToString(this.target) +\n              ': ' +\n              allAddressesString\n          );\n          if (this.latestLookupResult.length === 0) {\n            this.listener.onError(this.defaultResolutionError);\n            return;\n          }\n          /* If the TXT lookup has not yet finished, both of the last two\n           * arguments will be null, which is the equivalent of getting an\n           * empty TXT response. When the TXT lookup does finish, its handler\n           * can update the service config by using the same address list */\n          this.listener.onSuccessfulResolution(\n            this.latestLookupResult,\n            this.latestServiceConfig,\n            this.latestServiceConfigError,\n            null,\n            {}\n          );\n        },\n        (err) => {\n          trace(\n            'Resolution error for target ' +\n              uriToString(this.target) +\n              ': ' +\n              (err as Error).message\n          );\n          this.pendingLookupPromise = null;\n          this.stopNextResolutionTimer();\n          this.listener.onError(this.defaultResolutionError);\n        }\n      );\n      /* If there already is a still-pending TXT resolution, we can just use\n       * that result when it comes in */\n      if (this.isServiceConfigEnabled && this.pendingTxtPromise === null) {\n        /* We handle the TXT query promise differently than the others because\n         * the name resolution attempt as a whole is a success even if the TXT\n         * lookup fails */\n        this.pendingTxtPromise = resolveTxtPromise(hostname);\n        this.pendingTxtPromise.then(\n          (txtRecord) => {\n            this.pendingTxtPromise = null;\n            try {\n              this.latestServiceConfig = extractAndSelectServiceConfig(\n                txtRecord,\n                this.percentage\n              );\n            } catch (err) {\n              this.latestServiceConfigError = {\n                code: Status.UNAVAILABLE,\n                details: 'Parsing service config failed',\n                metadata: new Metadata(),\n              };\n            }\n            if (this.latestLookupResult !== null) {\n              /* We rely here on the assumption that calling this function with\n               * identical parameters will be essentialy idempotent, and calling\n               * it with the same address list and a different service config\n               * should result in a fast and seamless switchover. */\n              this.listener.onSuccessfulResolution(\n                this.latestLookupResult,\n                this.latestServiceConfig,\n                this.latestServiceConfigError,\n                null,\n                {}\n              );\n            }\n          },\n          (err) => {\n            /* If TXT lookup fails we should do nothing, which means that we\n             * continue to use the result of the most recent successful lookup,\n             * or the default null config object if there has never been a\n             * successful lookup. We do not set the latestServiceConfigError\n             * here because that is specifically used for response validation\n             * errors. We still need to handle this error so that it does not\n             * bubble up as an unhandled promise rejection. */\n          }\n        );\n      }\n    }\n  }\n\n  private startNextResolutionTimer() {\n    clearTimeout(this.nextResolutionTimer);\n    this.nextResolutionTimer = setTimeout(() => {\n      this.stopNextResolutionTimer();\n      if (this.continueResolving) {\n        this.startResolutionWithBackoff();\n      }\n    }, this.minTimeBetweenResolutionsMs).unref?.();\n    this.isNextResolutionTimerRunning = true;\n  }\n\n  private stopNextResolutionTimer() {\n    clearTimeout(this.nextResolutionTimer);\n    this.isNextResolutionTimerRunning = false;\n  }\n\n  private startResolutionWithBackoff() {\n    if (this.pendingLookupPromise === null) {\n      this.continueResolving = false;\n      this.startResolution();\n      this.backoff.runOnce();\n      this.startNextResolutionTimer();\n    }\n  }\n\n  updateResolution() {\n    /* If there is a pending lookup, just let it finish. Otherwise, if the\n     * nextResolutionTimer or backoff timer is running, set the\n     * continueResolving flag to resolve when whichever of those timers\n     * fires. Otherwise, start resolving immediately. */\n    if (this.pendingLookupPromise === null) {\n      if (this.isNextResolutionTimerRunning || this.backoff.isRunning()) {\n        this.continueResolving = true;\n      } else {\n        this.startResolutionWithBackoff();\n      }\n    }\n  }\n\n  destroy() {\n    this.continueResolving = false;\n    this.backoff.stop();\n    this.stopNextResolutionTimer();\n  }\n\n  /**\n   * Get the default authority for the given target. For IP targets, that is\n   * the IP address. For DNS targets, it is the hostname.\n   * @param target\n   */\n  static getDefaultAuthority(target: GrpcUri): string {\n    return target.path;\n  }\n}\n\n/**\n * Set up the DNS resolver class by registering it as the handler for the\n * \"dns:\" prefix and as the default resolver.\n */\nexport function setup(): void {\n  registerResolver('dns', DnsResolver);\n  registerDefaultScheme('dns');\n}\n\nexport interface DnsUrl {\n  host: string;\n  port?: string;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}