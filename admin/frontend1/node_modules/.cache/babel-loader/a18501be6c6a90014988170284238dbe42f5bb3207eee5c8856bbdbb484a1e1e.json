{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.uriToString = exports.splitHostPort = exports.parseUri = void 0;\n/*\n * The groups correspond to URI parts as follows:\n * 1. scheme\n * 2. authority\n * 3. path\n */\nconst URI_REGEX = /^(?:([A-Za-z0-9+.-]+):)?(?:\\/\\/([^/]*)\\/)?(.+)$/;\nfunction parseUri(uriString) {\n  const parsedUri = URI_REGEX.exec(uriString);\n  if (parsedUri === null) {\n    return null;\n  }\n  return {\n    scheme: parsedUri[1],\n    authority: parsedUri[2],\n    path: parsedUri[3]\n  };\n}\nexports.parseUri = parseUri;\nconst NUMBER_REGEX = /^\\d+$/;\nfunction splitHostPort(path) {\n  if (path.startsWith('[')) {\n    const hostEnd = path.indexOf(']');\n    if (hostEnd === -1) {\n      return null;\n    }\n    const host = path.substring(1, hostEnd);\n    /* Only an IPv6 address should be in bracketed notation, and an IPv6\n     * address should have at least one colon */\n    if (host.indexOf(':') === -1) {\n      return null;\n    }\n    if (path.length > hostEnd + 1) {\n      if (path[hostEnd + 1] === ':') {\n        const portString = path.substring(hostEnd + 2);\n        if (NUMBER_REGEX.test(portString)) {\n          return {\n            host: host,\n            port: +portString\n          };\n        } else {\n          return null;\n        }\n      } else {\n        return null;\n      }\n    } else {\n      return {\n        host\n      };\n    }\n  } else {\n    const splitPath = path.split(':');\n    /* Exactly one colon means that this is host:port. Zero colons means that\n     * there is no port. And multiple colons means that this is a bare IPv6\n     * address with no port */\n    if (splitPath.length === 2) {\n      if (NUMBER_REGEX.test(splitPath[1])) {\n        return {\n          host: splitPath[0],\n          port: +splitPath[1]\n        };\n      } else {\n        return null;\n      }\n    } else {\n      return {\n        host: path\n      };\n    }\n  }\n}\nexports.splitHostPort = splitHostPort;\nfunction uriToString(uri) {\n  let result = '';\n  if (uri.scheme !== undefined) {\n    result += uri.scheme + ':';\n  }\n  if (uri.authority !== undefined) {\n    result += '//' + uri.authority + '/';\n  }\n  result += uri.path;\n  return result;\n}\nexports.uriToString = uriToString;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;AAMA,MAAMA,SAAS,GAAG,iDAAiD;AAEnE,SAAgBC,QAAQ,CAACC,SAAiB;EACxC,MAAMC,SAAS,GAAGH,SAAS,CAACI,IAAI,CAACF,SAAS,CAAC;EAC3C,IAAIC,SAAS,KAAK,IAAI,EAAE;IACtB,OAAO,IAAI;;EAEb,OAAO;IACLE,MAAM,EAAEF,SAAS,CAAC,CAAC,CAAC;IACpBG,SAAS,EAAEH,SAAS,CAAC,CAAC,CAAC;IACvBI,IAAI,EAAEJ,SAAS,CAAC,CAAC;GAClB;AACH;AAVAK;AAiBA,MAAMC,YAAY,GAAG,OAAO;AAE5B,SAAgBC,aAAa,CAACH,IAAY;EACxC,IAAIA,IAAI,CAACI,UAAU,CAAC,GAAG,CAAC,EAAE;IACxB,MAAMC,OAAO,GAAGL,IAAI,CAACM,OAAO,CAAC,GAAG,CAAC;IACjC,IAAID,OAAO,KAAK,CAAC,CAAC,EAAE;MAClB,OAAO,IAAI;;IAEb,MAAME,IAAI,GAAGP,IAAI,CAACQ,SAAS,CAAC,CAAC,EAAEH,OAAO,CAAC;IACvC;;IAEA,IAAIE,IAAI,CAACD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAC5B,OAAO,IAAI;;IAEb,IAAIN,IAAI,CAACS,MAAM,GAAGJ,OAAO,GAAG,CAAC,EAAE;MAC7B,IAAIL,IAAI,CAACK,OAAO,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;QAC7B,MAAMK,UAAU,GAAGV,IAAI,CAACQ,SAAS,CAACH,OAAO,GAAG,CAAC,CAAC;QAC9C,IAAIH,YAAY,CAACS,IAAI,CAACD,UAAU,CAAC,EAAE;UACjC,OAAO;YACLH,IAAI,EAAEA,IAAI;YACVK,IAAI,EAAE,CAACF;WACR;SACF,MAAM;UACL,OAAO,IAAI;;OAEd,MAAM;QACL,OAAO,IAAI;;KAEd,MAAM;MACL,OAAO;QACLH;OACD;;GAEJ,MAAM;IACL,MAAMM,SAAS,GAAGb,IAAI,CAACc,KAAK,CAAC,GAAG,CAAC;IACjC;;;IAGA,IAAID,SAAS,CAACJ,MAAM,KAAK,CAAC,EAAE;MAC1B,IAAIP,YAAY,CAACS,IAAI,CAACE,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE;QACnC,OAAO;UACLN,IAAI,EAAEM,SAAS,CAAC,CAAC,CAAC;UAClBD,IAAI,EAAE,CAACC,SAAS,CAAC,CAAC;SACnB;OACF,MAAM;QACL,OAAO,IAAI;;KAEd,MAAM;MACL,OAAO;QACLN,IAAI,EAAEP;OACP;;;AAGP;AAnDAC;AAqDA,SAAgBc,WAAW,CAACC,GAAY;EACtC,IAAIC,MAAM,GAAG,EAAE;EACf,IAAID,GAAG,CAAClB,MAAM,KAAKoB,SAAS,EAAE;IAC5BD,MAAM,IAAID,GAAG,CAAClB,MAAM,GAAG,GAAG;;EAE5B,IAAIkB,GAAG,CAACjB,SAAS,KAAKmB,SAAS,EAAE;IAC/BD,MAAM,IAAI,IAAI,GAAGD,GAAG,CAACjB,SAAS,GAAG,GAAG;;EAEtCkB,MAAM,IAAID,GAAG,CAAChB,IAAI;EAClB,OAAOiB,MAAM;AACf;AAVAhB","names":["URI_REGEX","parseUri","uriString","parsedUri","exec","scheme","authority","path","exports","NUMBER_REGEX","splitHostPort","startsWith","hostEnd","indexOf","host","substring","length","portString","test","port","splitPath","split","uriToString","uri","result","undefined"],"sources":["/home/achwak/node_modules/@grpc/grpc-js/src/uri-parser.ts"],"sourcesContent":["/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nexport interface GrpcUri {\n  scheme?: string;\n  authority?: string;\n  path: string;\n}\n\n/*\n * The groups correspond to URI parts as follows:\n * 1. scheme\n * 2. authority\n * 3. path\n */\nconst URI_REGEX = /^(?:([A-Za-z0-9+.-]+):)?(?:\\/\\/([^/]*)\\/)?(.+)$/;\n\nexport function parseUri(uriString: string): GrpcUri | null {\n  const parsedUri = URI_REGEX.exec(uriString);\n  if (parsedUri === null) {\n    return null;\n  }\n  return {\n    scheme: parsedUri[1],\n    authority: parsedUri[2],\n    path: parsedUri[3],\n  };\n}\n\nexport interface HostPort {\n  host: string;\n  port?: number;\n}\n\nconst NUMBER_REGEX = /^\\d+$/;\n\nexport function splitHostPort(path: string): HostPort | null {\n  if (path.startsWith('[')) {\n    const hostEnd = path.indexOf(']');\n    if (hostEnd === -1) {\n      return null;\n    }\n    const host = path.substring(1, hostEnd);\n    /* Only an IPv6 address should be in bracketed notation, and an IPv6\n     * address should have at least one colon */\n    if (host.indexOf(':') === -1) {\n      return null;\n    }\n    if (path.length > hostEnd + 1) {\n      if (path[hostEnd + 1] === ':') {\n        const portString = path.substring(hostEnd + 2);\n        if (NUMBER_REGEX.test(portString)) {\n          return {\n            host: host,\n            port: +portString,\n          };\n        } else {\n          return null;\n        }\n      } else {\n        return null;\n      }\n    } else {\n      return {\n        host,\n      };\n    }\n  } else {\n    const splitPath = path.split(':');\n    /* Exactly one colon means that this is host:port. Zero colons means that\n     * there is no port. And multiple colons means that this is a bare IPv6\n     * address with no port */\n    if (splitPath.length === 2) {\n      if (NUMBER_REGEX.test(splitPath[1])) {\n        return {\n          host: splitPath[0],\n          port: +splitPath[1],\n        };\n      } else {\n        return null;\n      }\n    } else {\n      return {\n        host: path,\n      };\n    }\n  }\n}\n\nexport function uriToString(uri: GrpcUri): string {\n  let result = '';\n  if (uri.scheme !== undefined) {\n    result += uri.scheme + ':';\n  }\n  if (uri.authority !== undefined) {\n    result += '//' + uri.authority + '/';\n  }\n  result += uri.path;\n  return result;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}