{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadPackageDefinition = exports.makeClientConstructor = void 0;\nconst client_1 = require(\"./client\");\n/**\n * Map with short names for each of the requester maker functions. Used in\n * makeClientConstructor\n * @private\n */\nconst requesterFuncs = {\n  unary: client_1.Client.prototype.makeUnaryRequest,\n  server_stream: client_1.Client.prototype.makeServerStreamRequest,\n  client_stream: client_1.Client.prototype.makeClientStreamRequest,\n  bidi: client_1.Client.prototype.makeBidiStreamRequest\n};\n/**\n * Returns true, if given key is included in the blacklisted\n * keys.\n * @param key key for check, string.\n */\nfunction isPrototypePolluted(key) {\n  return ['__proto__', 'prototype', 'constructor'].includes(key);\n}\n/**\n * Creates a constructor for a client with the given methods, as specified in\n * the methods argument. The resulting class will have an instance method for\n * each method in the service, which is a partial application of one of the\n * [Client]{@link grpc.Client} request methods, depending on `requestSerialize`\n * and `responseSerialize`, with the `method`, `serialize`, and `deserialize`\n * arguments predefined.\n * @param methods An object mapping method names to\n *     method attributes\n * @param serviceName The fully qualified name of the service\n * @param classOptions An options object.\n * @return New client constructor, which is a subclass of\n *     {@link grpc.Client}, and has the same arguments as that constructor.\n */\nfunction makeClientConstructor(methods, serviceName, classOptions) {\n  if (!classOptions) {\n    classOptions = {};\n  }\n  class ServiceClientImpl extends client_1.Client {}\n  Object.keys(methods).forEach(name => {\n    if (isPrototypePolluted(name)) {\n      return;\n    }\n    const attrs = methods[name];\n    let methodType;\n    // TODO(murgatroid99): Verify that we don't need this anymore\n    if (typeof name === 'string' && name.charAt(0) === '$') {\n      throw new Error('Method names cannot start with $');\n    }\n    if (attrs.requestStream) {\n      if (attrs.responseStream) {\n        methodType = 'bidi';\n      } else {\n        methodType = 'client_stream';\n      }\n    } else {\n      if (attrs.responseStream) {\n        methodType = 'server_stream';\n      } else {\n        methodType = 'unary';\n      }\n    }\n    const serialize = attrs.requestSerialize;\n    const deserialize = attrs.responseDeserialize;\n    const methodFunc = partial(requesterFuncs[methodType], attrs.path, serialize, deserialize);\n    ServiceClientImpl.prototype[name] = methodFunc;\n    // Associate all provided attributes with the method\n    Object.assign(ServiceClientImpl.prototype[name], attrs);\n    if (attrs.originalName && !isPrototypePolluted(attrs.originalName)) {\n      ServiceClientImpl.prototype[attrs.originalName] = ServiceClientImpl.prototype[name];\n    }\n  });\n  ServiceClientImpl.service = methods;\n  ServiceClientImpl.serviceName = serviceName;\n  return ServiceClientImpl;\n}\nexports.makeClientConstructor = makeClientConstructor;\nfunction partial(fn, path, serialize, deserialize) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return fn.call(this, path, serialize, deserialize, ...args);\n  };\n}\nfunction isProtobufTypeDefinition(obj) {\n  return 'format' in obj;\n}\n/**\n * Load a gRPC package definition as a gRPC object hierarchy.\n * @param packageDef The package definition object.\n * @return The resulting gRPC object.\n */\nfunction loadPackageDefinition(packageDef) {\n  const result = {};\n  for (const serviceFqn in packageDef) {\n    if (Object.prototype.hasOwnProperty.call(packageDef, serviceFqn)) {\n      const service = packageDef[serviceFqn];\n      const nameComponents = serviceFqn.split('.');\n      if (nameComponents.some(comp => isPrototypePolluted(comp))) {\n        continue;\n      }\n      const serviceName = nameComponents[nameComponents.length - 1];\n      let current = result;\n      for (const packageName of nameComponents.slice(0, -1)) {\n        if (!current[packageName]) {\n          current[packageName] = {};\n        }\n        current = current[packageName];\n      }\n      if (isProtobufTypeDefinition(service)) {\n        current[serviceName] = service;\n      } else {\n        current[serviceName] = makeClientConstructor(service, serviceName, {});\n      }\n    }\n  }\n  return result;\n}\nexports.loadPackageDefinition = loadPackageDefinition;","map":{"version":3,"mappings":"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","names":["requesterFuncs","unary","client_1","prototype","makeUnaryRequest","server_stream","makeServerStreamRequest","client_stream","makeClientStreamRequest","bidi","makeBidiStreamRequest","isPrototypePolluted","key","includes","makeClientConstructor","methods","serviceName","classOptions","ServiceClientImpl","Object","keys","forEach","name","attrs","methodType","charAt","Error","requestStream","responseStream","serialize","requestSerialize","deserialize","responseDeserialize","methodFunc","partial","path","assign","originalName","service","exports","fn","args","call","isProtobufTypeDefinition","obj","loadPackageDefinition","packageDef","result","serviceFqn","hasOwnProperty","nameComponents","split","some","comp","length","current","packageName","slice"],"sources":["/home/achwak/node_modules/@grpc/grpc-js/src/make-client.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { ChannelCredentials } from './channel-credentials';\nimport { ChannelOptions } from './channel-options';\nimport { Client } from './client';\nimport { UntypedServiceImplementation } from './server';\n\nexport interface Serialize<T> {\n  (value: T): Buffer;\n}\n\nexport interface Deserialize<T> {\n  (bytes: Buffer): T;\n}\n\nexport interface ClientMethodDefinition<RequestType, ResponseType> {\n  path: string;\n  requestStream: boolean;\n  responseStream: boolean;\n  requestSerialize: Serialize<RequestType>;\n  responseDeserialize: Deserialize<ResponseType>;\n  originalName?: string;\n}\n\nexport interface ServerMethodDefinition<RequestType, ResponseType> {\n  path: string;\n  requestStream: boolean;\n  responseStream: boolean;\n  responseSerialize: Serialize<ResponseType>;\n  requestDeserialize: Deserialize<RequestType>;\n  originalName?: string;\n}\n\nexport interface MethodDefinition<RequestType, ResponseType>\n  extends ClientMethodDefinition<RequestType, ResponseType>,\n    ServerMethodDefinition<RequestType, ResponseType> {}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport type ServiceDefinition<\n  ImplementationType = UntypedServiceImplementation\n> = {\n  readonly [index in keyof ImplementationType]: MethodDefinition<any, any>;\n};\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\nexport interface ProtobufTypeDefinition {\n  format: string;\n  type: object;\n  fileDescriptorProtos: Buffer[];\n}\n\nexport interface PackageDefinition {\n  [index: string]: ServiceDefinition | ProtobufTypeDefinition;\n}\n\n/**\n * Map with short names for each of the requester maker functions. Used in\n * makeClientConstructor\n * @private\n */\nconst requesterFuncs = {\n  unary: Client.prototype.makeUnaryRequest,\n  server_stream: Client.prototype.makeServerStreamRequest,\n  client_stream: Client.prototype.makeClientStreamRequest,\n  bidi: Client.prototype.makeBidiStreamRequest,\n};\n\nexport interface ServiceClient extends Client {\n  [methodName: string]: Function;\n}\n\nexport interface ServiceClientConstructor {\n  new (\n    address: string,\n    credentials: ChannelCredentials,\n    options?: Partial<ChannelOptions>\n  ): ServiceClient;\n  service: ServiceDefinition;\n  serviceName: string;\n}\n\n/**\n * Returns true, if given key is included in the blacklisted\n * keys.\n * @param key key for check, string.\n */\nfunction isPrototypePolluted(key: string): boolean {\n  return ['__proto__', 'prototype', 'constructor'].includes(key);\n}\n\n/**\n * Creates a constructor for a client with the given methods, as specified in\n * the methods argument. The resulting class will have an instance method for\n * each method in the service, which is a partial application of one of the\n * [Client]{@link grpc.Client} request methods, depending on `requestSerialize`\n * and `responseSerialize`, with the `method`, `serialize`, and `deserialize`\n * arguments predefined.\n * @param methods An object mapping method names to\n *     method attributes\n * @param serviceName The fully qualified name of the service\n * @param classOptions An options object.\n * @return New client constructor, which is a subclass of\n *     {@link grpc.Client}, and has the same arguments as that constructor.\n */\nexport function makeClientConstructor(\n  methods: ServiceDefinition,\n  serviceName: string,\n  classOptions?: {}\n): ServiceClientConstructor {\n  if (!classOptions) {\n    classOptions = {};\n  }\n\n  class ServiceClientImpl extends Client implements ServiceClient {\n    static service: ServiceDefinition;\n    static serviceName: string;\n    [methodName: string]: Function;\n  }\n\n  Object.keys(methods).forEach((name) => {\n    if (isPrototypePolluted(name)) {\n      return;\n    }\n    const attrs = methods[name];\n    let methodType: keyof typeof requesterFuncs;\n    // TODO(murgatroid99): Verify that we don't need this anymore\n    if (typeof name === 'string' && name.charAt(0) === '$') {\n      throw new Error('Method names cannot start with $');\n    }\n    if (attrs.requestStream) {\n      if (attrs.responseStream) {\n        methodType = 'bidi';\n      } else {\n        methodType = 'client_stream';\n      }\n    } else {\n      if (attrs.responseStream) {\n        methodType = 'server_stream';\n      } else {\n        methodType = 'unary';\n      }\n    }\n    const serialize = attrs.requestSerialize;\n    const deserialize = attrs.responseDeserialize;\n    const methodFunc = partial(\n      requesterFuncs[methodType],\n      attrs.path,\n      serialize,\n      deserialize\n    );\n    ServiceClientImpl.prototype[name] = methodFunc;\n    // Associate all provided attributes with the method\n    Object.assign(ServiceClientImpl.prototype[name], attrs);\n    if (attrs.originalName && !isPrototypePolluted(attrs.originalName)) {\n      ServiceClientImpl.prototype[attrs.originalName] =\n        ServiceClientImpl.prototype[name];\n    }\n  });\n\n  ServiceClientImpl.service = methods;\n  ServiceClientImpl.serviceName = serviceName;\n\n  return ServiceClientImpl;\n}\n\nfunction partial(\n  fn: Function,\n  path: string,\n  serialize: Function,\n  deserialize: Function\n): Function {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: any, ...args: any[]) {\n    return fn.call(this, path, serialize, deserialize, ...args);\n  };\n}\n\nexport interface GrpcObject {\n  [index: string]:\n    | GrpcObject\n    | ServiceClientConstructor\n    | ProtobufTypeDefinition;\n}\n\nfunction isProtobufTypeDefinition(\n  obj: ServiceDefinition | ProtobufTypeDefinition\n): obj is ProtobufTypeDefinition {\n  return 'format' in obj;\n}\n\n/**\n * Load a gRPC package definition as a gRPC object hierarchy.\n * @param packageDef The package definition object.\n * @return The resulting gRPC object.\n */\nexport function loadPackageDefinition(\n  packageDef: PackageDefinition\n): GrpcObject {\n  const result: GrpcObject = {};\n  for (const serviceFqn in packageDef) {\n    if (Object.prototype.hasOwnProperty.call(packageDef, serviceFqn)) {\n      const service = packageDef[serviceFqn];\n      const nameComponents = serviceFqn.split('.');\n      if (nameComponents.some((comp: string) => isPrototypePolluted(comp))) {\n        continue;\n      }\n      const serviceName = nameComponents[nameComponents.length - 1];\n      let current = result;\n      for (const packageName of nameComponents.slice(0, -1)) {\n        if (!current[packageName]) {\n          current[packageName] = {};\n        }\n        current = current[packageName] as GrpcObject;\n      }\n      if (isProtobufTypeDefinition(service)) {\n        current[serviceName] = service;\n      } else {\n        current[serviceName] = makeClientConstructor(service, serviceName, {});\n      }\n    }\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}