{"ast":null,"code":"var _jsxFileName = \"/home/achwak/Desktop/SchoolAssistant-pcd-project/admin/frontend/src/pages/profiles/prof.js\",\n  _s = $RefreshSig$();\nimport '../dash.scss';\nimport axios from 'axios';\nimport { Row, Col, Table, Card, CardTitle, CardBody, Badge, Form, FormGroup, InputGroup, InputGroupText, Label } from \"reactstrap\";\nimport { AiOutlineSearch } from 'react-icons/ai';\nimport studentsService from \"../../services/student.service\";\nimport Swal from 'sweetalert2';\nimport { useState, useEffect } from \"react\";\nimport { Input } from \"reactstrap\";\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport { useAuthContext } from '../../shared/useAuthContext';\nimport { useDataContext } from '../../hooks/useDataContext';\nimport profService from '../../services/prof.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Prof = () => {\n  _s();\n  const [searchtext, setsearchtext] = useState(\"\");\n  const [modal, setModal] = useState(false);\n  const [id, setId] = useState(null);\n  const [submitted, setSubmitted] = useState(null);\n  const {\n    user\n  } = useAuthContext();\n  const {\n    Data,\n    dispatch\n  } = useDataContext();\n  const [Json, setjson] = useState('');\n  const initialTutorialState = {\n    id: null,\n    Nom: \"\",\n    Info: \"\",\n    Contact: \"\",\n    Email: \"\",\n    Image: \"\"\n  };\n  /*   const Submit = event => {\n      event.preventDefault();\n      \n      // Upload the image to the server\n      const formData = new FormData();\n      formData.append('image', currentUser.Image);\n      axios.post('http://localhost:5000/upload-image-prof', formData)\n        .then(response => {\n          console.log(response.data.message);\n          // Add a new entry to the Prof table\n          const prof ={Image:currentUser.Image,Nom:currentUser.Nom,Info:currentUser.Info,Contact:currentUser.Contact,Email:currentUser.Email}\n  \n          axios.post('http://localhost:5000/addprof', prof)\n            .then(response => {\n              console.log(response.data.message);\n              // Update the list of entries from the Prof table\n              axios.get('http://localhost:5000/getprof')\n                .then(response => {\n                  console.log(response)\n                  setMessage(\"The tutorial was updated successfully!\");\n                  setSubmitted(true);\n                  setState(!state)\n                })\n                .catch(error => {\n                  console.log(error);\n                });\n            })\n            .catch(error => {\n              console.log(error);\n            });\n        })\n        .catch(error => {\n          console.log(error);\n        });}\n    const [currentUser, setCurrentUser] = useState(initialTutorialState);\n  \n    const [state,setState]=useState(false)\n    const[message,setMessage] =useState('');\n  \n    const toggle = () => setModal(!modal);\n    const[result,setResult]=useState([])\n   useEffect(() => {\n      const fetchData = async () => {\n   \n        profService.getProf().then(async res=>{\n          if(res){\n  \n          \n              dispatch({type: 'SET_Data', payload: res.data})\n              setjson(res.data)\n              console.log(res.data[0])\n          }\n  \n        })\n        .catch({})\n      }\n  \n   \n        fetchData()\n      \n    }, [dispatch,state])\n    const handleSubmit = async(e) => {\n      e.preventDefault();\n       const prof ={Image:currentUser.Image,Nom:currentUser.Nom,Info:currentUser.Info,Contact:currentUser.Contact,Email:currentUser.Email}\n          \n          profService.save(prof).then(res=>{ \n            if (res){\n              console.log(res)\n       \n          setMessage(\"The tutorial was updated successfully!\");\n          setSubmitted(true);\n          setState(!state)\n        }\n      else \n  \n   })\n   \n    } */\n\n  /* const editt=(data,e)=>{\n     e.preventDefault();\n    toggle() ;\n    setId(data.id);\n    setCurrentUser(data)\n  \n    console.log(data.id) \n  } */\n\n  /* const update=async(e)=>{\n    e.preventDefault();\n    toggle() ;\n    e.preventDefault();\n    studentsService.updateStudent(id,currentUser).then(res=>{ \n    if (res){\n    Swal.fire({ \n     \n    text:   \"the pre-selectioned member was updated successfully\",\n    confirmButtonText: 'Cancel',\n    icon : \"success\" ,\n    confirmButtonColor:\"#979292 \"\n  \n  }) \n  setMessage(\"The tutorial was updated successfully!\");\n  setState(!state)\n  }})\n     .catch(e => {\n       console.log(e);\n     \n     })\n   \n  \n  \n  } */\n\n  /* const handleInputChange = event => {\n    const { name, value } = event.target;\n    setCurrentUser({ ...currentUser, [name]: value });\n  };\n  \n   */\n  /* const Delete=(id,e)=>{\n    console.log(id)\n    Swal.fire({\n             text:   \"Are you sure you want to delete this User ?\",\n             icon: 'warning' ,\n             showCancelButton: true,  \n     confirmButtonText: `Yes`,  \n     confirmButtonColor: \"#ff6873\", \n         \n           }).then((result) => {\n             if (result.isConfirmed) {\n   \n   deletee(id,e) ;   \n   Swal.fire({text:   \"User was deleted successfully\",\n   icon: 'success' ,\n   confirmButtonText: `OK`, \n   confirmButtonColor: \"#ff6873\",\n   })         \n             } else\n             Swal.fire({text:   \"Cancelled\",\n             icon: 'error' ,\n             confirmButtonText: `OK`, \n             confirmButtonColor: \"#ff6873\",\n       })\n   \n         }) \n   \n   \n   } */\n  /* const deletee =async(tdata,e)=>{\n  \n    e.preventDefault();\n    studentsService.deleteStudent(tdata.id).then(res=>{\n      if(res){\n        dispatch({type: 'DELETE_Data', payload: tdata})\n        setState(!state)\n      }\n      \n    }).catch(e => {\n      console.log(e);\n    })\n  \n  } */\n\n  const [name, setName] = useState('');\n  const [info, setInfo] = useState('');\n  const [image, setImage] = useState(null);\n  const [email, setEmail] = useState('');\n  const [profs, setProfs] = useState([]);\n  useEffect(() => {\n    // Get all entries from the Prof table\n    axios.get('http://localhost:5000/get-profs').then(response => {\n      console.log(response);\n      setProfs(response.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  const handleNameChange = event => {\n    setName(event.target.value);\n  };\n  const handleInfoChange = event => {\n    setInfo(event.target.value);\n  };\n  const handleImageChange = event => {\n    setImage(event.target.files[0]);\n  };\n  const handleEmailChange = event => {\n    setEmail(event.target.value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    // Upload the image to the server\n    const formData = new FormData();\n    formData.append('image', image);\n    axios.post('http://localhost:5000/upload-image', formData).then(response => {\n      console.log(response.data.message);\n      // Add a new entry to the Prof table\n      axios.post('http://localhost:5000/add-prof', {\n        name,\n        info,\n        image: response.data.filename,\n        email\n      }).then(response => {\n        console.log(response.data.message);\n        // Update the list of entries from the Prof table\n        axios.get('http://localhost:5000/get-profs').then(response => {\n          setProfs(response.data);\n        }).catch(error => {\n          console.log(error);\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n\n    // Clear the form inputs\n    setName('');\n    setInfo('');\n    setImage(null);\n    setEmail('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add a new Prof\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: name,\n          onChange: handleNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Info:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: info,\n          onChange: handleInfoChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Image:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleImageChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Email:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: email,\n          onChange: handleEmailChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Prof\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Profs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: profs.map((prof, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: prof.Name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), \" (\", prof.Email, \")\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 54\n        }, this), prof.Info, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://localhost:5000/images/${prof.Image}`,\n          alt: prof.Name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 3\n  }, this);\n};\n\n/* return (\n  <div>\n   \n   <Row>\n  \n    <Col >\n    <Form className=\"navbar-search navbar-search-dark \" onSubmit={(e)=>{Submit(e)}}>\n          <FormGroup className=\"mb-0\">\n            <div style={{borderRadius:30  ,marginTop:'10px',marginBottom:'10px',width:'300px',float:\"right\"}}>\n            <InputGroup className=\"input-group-alternative\">\n              <InputGroupText style={{backgroundColor:\"transparent\", borderColor:\"#7a7878\" }}>\n               \n                <AiOutlineSearch style={{color:\"#555555\"}} />\n              </InputGroupText>\n              <Input  placeholder=\"Search\" type=\"text\" style={{backgroundColor:\"transparent\", borderColor:\" #7a7878\"}}  onChange={(event)=>{setsearchtext(event.target.value)}} />\n            </InputGroup>\n            </div>\n          </FormGroup>\n     \n      <Card style ={{width:1500 ,marginLeft:'-40px'}} >\n        <CardTitle tag=\"h6\" className=\"border-bottom p-3 mb-0\">\n          <i className=\"bi bi-card-text me-2\"> </i>\n          Members\n        </CardTitle>\n        <CardBody style ={{width:1500}}>\n        <Row onSubmit={handleSubmit}>\n    <Col style={{marginLeft:'30px'}}>\n      <Label>Image:</Label>\n      <Input\n       type=\"file\" \n        name=\"Image\"\n        id=\"Image\"\n        value={currentUser.Image}\n        onChange={(e) => handleInputChange(e)} \n      />\n    </Col>\n    <Col>\n      <Label>Name:</Label>\n      <Input\n        type=\"text\"\n        name=\"Nom\"\n        id=\"Nom\"\n         value={currentUser.Nom}\n        onChange={(e) => handleInputChange(e)} style={{width:'250px'}}\n      />\n    </Col>\n    <Col>\n      <Label>Info:</Label>\n      <Input\n        type=\"text\"\n        name=\"Info\"\n        id=\"Info\"\n         value={currentUser.Info}\n        onChange={(e) => handleInputChange(e)} style={{width:'300px'}}\n      />\n    </Col>\n    <Col>\n      <Label>Contact:</Label>\n      <Input\n        type=\"text\"\n        name=\"Contact\"\n        id=\"Contact\"\n         value={currentUser.Contact}\n        onChange={(e) => handleInputChange(e)} style={{width:'250px'}}\n      />\n    </Col>\n    <Col >\n      <Label>email:</Label>\n      <Input\n        type=\"text\"\n        name=\"Email\"\n        id=\"Email\"\n         value={currentUser.Email}\n        onChange={(e) => handleInputChange(e)} style={{width:'250px'}}\n      />\n    </Col>\n     <Col>\n     <Button type=\"submit\" style={{borderRadius:30  ,marginTop:'35px',marginBottom:'10px',width:'70px',float:'flex-end'}}>OK</Button>\n     </Col>\n    \n  </Row>\n  </CardBody>\n  </Card>\n  </Form>\n   <Card style ={{width:1500 ,marginLeft:'-40px'}}>\n  <CardBody style ={{width:1550,marginLeft:'-40px'}}>\n           <Table className=\"no-wrap  align-left\" responsive borderless >\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Image</th>\n               \n                <th>Name</th>\n                <th>Info</th>\n                <th>Contact</th>\n                <th>Email</th>\n                  \n                 { <th>Actions</th>}  \n              \n              </tr>\n            </thead>\n          \n            \n            <tbody>\n           {Json && Json.filter((val)=>{\n              if(searchtext===\"\")\n              return val ;\n              else if (val.name.toLowerCase().includes(searchtext.toLowerCase())){\n                return val\n              }\n            }).map((tdata, index) => ( \n                  <tr key={index}>\n                <td>{index+1}</td> \n                  { <td>{tdata.Image &&<> <img src={`http://localhost:5000/images/${tdata.Image}`} alt={`${tdata.Nom}'s profile picture`} /> </>}   </td> }\n                  \n             \n              <td>{tdata && tdata.Nom}</td>\n          <td style={{width:400}}>{tdata && tdata.Info}</td>\n           <td>{tdata && tdata.Contact}</td>\n          <td >{tdata && tdata.Email}</td>\n            \n                    <td style={{width:\"250px\",float:\"right\"}}> <><Button className =\"edit\" id=\"b5\" style={{marginTop:-2 ,float:\"right\",alignItems: 'flex-end'}}  >\n                <i className=\"bi bi-pencil-fill\" style ={{fontSize: 20+\"px\",color:\"yellow\"}}   onClick={(e)=>editt(tdata,e) } ></i>\n                \n              \n              </Button> \n            \n              <Button id =\"b4\"  /* onClick={(e)=>Delete(tdata,e)}      > \n                    <span className=\"trash\">\n                    <span></span>\n                      <i></i>\n          \n                    </span>\n                  </Button> </> \n                    \n                    \n                    \n                        </td> \n                    \n                        \n                    </tr> ))} \n                    </tbody> \n         \n\n        \n          </Table>\n         </CardBody>\n      </Card>\n    </Col>\n  </Row>\n  \n  <Modal isOpen={modal} toggle={toggle} {...result} className=\"Modal1\"  size=\"lg\" style={{maxWidth: '2000px', width: '100%'}}>\n  <ModalHeader toggle={toggle}>Modal title</ModalHeader>\n  <ModalBody>\n  <form\n        id=\"form\"\n        action=\"/\"\n        method=\"POST\"\n      \n      >\n  <Table borderless>\n  <thead>\n              <tr>\n                <th className =\"th\">Name</th>\n             \n               \n                <th>info</th>\n                <th>contact</th>\n               \n               \n                \n              </tr>\n            </thead>\n          \n          \n            <tbody>\n          \n      \n        <tr>\n          <td>\n             <div className='inline'>\n              <Row>\n                <Col>\n                 <Input \n            placeholder=\" nom\"\n            type=\"string\"\n            name=\"Nom\" id=\"Nom\"\n            className=\"input-field\"\n            onChange={(e) => handleInputChange(e)}\n            value={currentUser.Nom}\n          />   </Col>  \n    \n               </Row>\n          \n        </div>\n          </td>\n          <td>\n            <Input  \n            placeholder=\"info\"\n            type=\"string\"\n            name=\"info\"\n            className=\"input-field\"\n            onChange={(e) => handleInputChange(e)}\n            value={currentUser.Info}\n          />\n     \n     \n        </td>\n          <td>\n <Input \n placeholder=\"contact\"\n type=\"string\"\n name=\"contact\"\n className=\"input-field\"\n onChange={(e) => handleInputChange(e)}\n value={currentUser.Contact}\n required\n> \n              </Input>  </td>\n          \n  \n       \n        </tr>\n  \n    \n                </tbody>\n                </Table>  \n                <Button type=\"submit\" id=\"submit-button\" /* onClick={e=>update(e)}>\n          submit\n        </Button>  \n      </form>\n  </ModalBody>\n  \n</Modal>\n  \n</div>\n);\n}; */\n_s(Prof, \"ZIY15NmNmZVcohvGOSGkRwjJXTQ=\", false, function () {\n  return [useAuthContext, useDataContext];\n});\n_c = Prof;\nexport default Prof;\nvar _c;\n$RefreshReg$(_c, \"Prof\");","map":{"version":3,"names":["axios","Row","Col","Table","Card","CardTitle","CardBody","Badge","Form","FormGroup","InputGroup","InputGroupText","Label","AiOutlineSearch","studentsService","Swal","useState","useEffect","Input","Button","Modal","ModalHeader","ModalBody","useAuthContext","useDataContext","profService","Prof","searchtext","setsearchtext","modal","setModal","id","setId","submitted","setSubmitted","user","Data","dispatch","Json","setjson","initialTutorialState","Nom","Info","Contact","Email","Image","name","setName","info","setInfo","image","setImage","email","setEmail","profs","setProfs","get","then","response","console","log","data","catch","error","handleNameChange","event","target","value","handleInfoChange","handleImageChange","files","handleEmailChange","handleSubmit","preventDefault","formData","FormData","append","post","message","filename","map","prof","index","Name"],"sources":["/home/achwak/Desktop/SchoolAssistant-pcd-project/admin/frontend/src/pages/profiles/prof.js"],"sourcesContent":["import '../dash.scss'\nimport axios from 'axios';\nimport { Row, Col, Table, Card, CardTitle, CardBody, Badge,Form,FormGroup,InputGroup,InputGroupText ,Label} from \"reactstrap\";\nimport { AiOutlineSearch } from 'react-icons/ai';\nimport studentsService from \"../../services/student.service\" ;\nimport Swal from 'sweetalert2';\nimport { useState ,useEffect } from \"react\";\nimport { Input } from \"reactstrap\";\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap';\n\nimport { useAuthContext } from '../../shared/useAuthContext'; \nimport { useDataContext } from '../../hooks/useDataContext';\nimport profService from '../../services/prof.service';\n \nconst Prof = () => {\n  const [searchtext,setsearchtext]=useState(\"\");\n  const [modal, setModal] = useState(false);\n  const [id, setId] = useState(null);\n  const [submitted, setSubmitted] = useState(null);\n\n  const { user } = useAuthContext()\n const { Data ,dispatch } = useDataContext()\n   const[ Json,setjson]=useState('')\n\n\n  const initialTutorialState = {\n    id: null,\n    Nom: \"\",\n    Info: \"\",\n    Contact: \"\",\n    Email:\"\",\n\n    Image: \"\"\n    \n   \n  };\n/*   const Submit = event => {\n    event.preventDefault();\n    \n    // Upload the image to the server\n    const formData = new FormData();\n    formData.append('image', currentUser.Image);\n    axios.post('http://localhost:5000/upload-image-prof', formData)\n      .then(response => {\n        console.log(response.data.message);\n        // Add a new entry to the Prof table\n        const prof ={Image:currentUser.Image,Nom:currentUser.Nom,Info:currentUser.Info,Contact:currentUser.Contact,Email:currentUser.Email}\n\n        axios.post('http://localhost:5000/addprof', prof)\n          .then(response => {\n            console.log(response.data.message);\n            // Update the list of entries from the Prof table\n            axios.get('http://localhost:5000/getprof')\n              .then(response => {\n                console.log(response)\n                setMessage(\"The tutorial was updated successfully!\");\n                setSubmitted(true);\n                setState(!state)\n              })\n              .catch(error => {\n                console.log(error);\n              });\n          })\n          .catch(error => {\n            console.log(error);\n          });\n      })\n      .catch(error => {\n        console.log(error);\n      });}\n  const [currentUser, setCurrentUser] = useState(initialTutorialState);\n\n  const [state,setState]=useState(false)\n  const[message,setMessage] =useState('');\n\n  const toggle = () => setModal(!modal);\n  const[result,setResult]=useState([])\n useEffect(() => {\n    const fetchData = async () => {\n \n      profService.getProf().then(async res=>{\n        if(res){\n\n        \n            dispatch({type: 'SET_Data', payload: res.data})\n            setjson(res.data)\n            console.log(res.data[0])\n        }\n\n      })\n      .catch({})\n    }\n\n \n      fetchData()\n    \n  }, [dispatch,state])\n  const handleSubmit = async(e) => {\n    e.preventDefault();\n     const prof ={Image:currentUser.Image,Nom:currentUser.Nom,Info:currentUser.Info,Contact:currentUser.Contact,Email:currentUser.Email}\n        \n        profService.save(prof).then(res=>{ \n          if (res){\n            console.log(res)\n     \n        setMessage(\"The tutorial was updated successfully!\");\n        setSubmitted(true);\n        setState(!state)\n      }\n    else \n\n })\n \n  } */\n\n\n\n/* const editt=(data,e)=>{\n   e.preventDefault();\n  toggle() ;\n  setId(data.id);\n  setCurrentUser(data)\n\n  console.log(data.id) \n} */\n\n\n/* const update=async(e)=>{\n  e.preventDefault();\n  toggle() ;\n  e.preventDefault();\n  studentsService.updateStudent(id,currentUser).then(res=>{ \n  if (res){\n  Swal.fire({ \n   \n  text:   \"the pre-selectioned member was updated successfully\",\n  confirmButtonText: 'Cancel',\n  icon : \"success\" ,\n  confirmButtonColor:\"#979292 \"\n\n}) \nsetMessage(\"The tutorial was updated successfully!\");\nsetState(!state)\n}})\n   .catch(e => {\n     console.log(e);\n   \n   })\n \n\n\n} */\n\n/* const handleInputChange = event => {\n  const { name, value } = event.target;\n  setCurrentUser({ ...currentUser, [name]: value });\n};\n\n */\n/* const Delete=(id,e)=>{\n  console.log(id)\n  Swal.fire({\n           text:   \"Are you sure you want to delete this User ?\",\n           icon: 'warning' ,\n           showCancelButton: true,  \n   confirmButtonText: `Yes`,  \n   confirmButtonColor: \"#ff6873\", \n       \n         }).then((result) => {\n           if (result.isConfirmed) {\n \n deletee(id,e) ;   \n Swal.fire({text:   \"User was deleted successfully\",\n icon: 'success' ,\n confirmButtonText: `OK`, \n confirmButtonColor: \"#ff6873\",\n })         \n           } else\n           Swal.fire({text:   \"Cancelled\",\n           icon: 'error' ,\n           confirmButtonText: `OK`, \n           confirmButtonColor: \"#ff6873\",\n     })\n \n       }) \n \n \n } */\n/* const deletee =async(tdata,e)=>{\n\n  e.preventDefault();\n  studentsService.deleteStudent(tdata.id).then(res=>{\n    if(res){\n      dispatch({type: 'DELETE_Data', payload: tdata})\n      setState(!state)\n    }\n    \n  }).catch(e => {\n    console.log(e);\n  })\n\n} */\n\n\n\n\n\nconst [name, setName] = useState('');\nconst [info, setInfo] = useState('');\nconst [image, setImage] = useState(null);\nconst [email, setEmail] = useState('');\nconst [profs, setProfs] = useState([]);\n\nuseEffect(() => {\n  // Get all entries from the Prof table\n  axios.get('http://localhost:5000/get-profs')\n    .then(response => {\n      console.log(response)\n      setProfs(response.data);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n}, []);\n\nconst handleNameChange = event => {\n  setName(event.target.value);\n}\n\nconst handleInfoChange = event => {\n  setInfo(event.target.value);\n}\n\nconst handleImageChange = event => {\n  setImage(event.target.files[0]);\n}\n\nconst handleEmailChange = event => {\n  setEmail(event.target.value);\n}\n\nconst handleSubmit = event => {\n  event.preventDefault();\n  \n  // Upload the image to the server\n  const formData = new FormData();\n  formData.append('image', image);\n  axios.post('http://localhost:5000/upload-image', formData)\n    .then(response => {\n      console.log(response.data.message);\n      // Add a new entry to the Prof table\n      axios.post('http://localhost:5000/add-prof', { name, info, image: response.data.filename, email })\n        .then(response => {\n          console.log(response.data.message);\n          // Update the list of entries from the Prof table\n          axios.get('http://localhost:5000/get-profs')\n            .then(response => {\n              setProfs(response.data);\n            })\n            .catch(error => {\n              console.log(error);\n            });\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    })\n    .catch(error => {\n      console.log(error);\n    });\n\n  // Clear the form inputs\n  setName('');\n  setInfo('');\n  setImage(null);\n  setEmail('');\n}\n\nreturn (\n  <div className=\"App\">\n    <h1>Add a new Prof</h1>\n    <form onSubmit={handleSubmit}>\n      <label>\n        Name:\n        <input type=\"text\" value={name} onChange={handleNameChange} />\n      </label>\n      <br />\n      <label>\n        Info:\n        <textarea value={info} onChange={handleInfoChange} />\n      </label>\n      <br />\n      <label>\n        Image:\n        <input type=\"file\" onChange={handleImageChange} />\n      </label>\n      <br />\n      <label>\n        Email:\n        <input type=\"text\" value={email} onChange={handleEmailChange} />\n      </label>\n      <br />\n      <button type=\"submit\">Add Prof</button>\n    </form>\n\n    <h1>Profs</h1>\n    <ul>\n      {profs.map((prof, index) => (\n        <li key={index}>\n          <strong>{prof.Name}</strong> ({prof.Email})<br />\n          {prof.Info}<br />\n          <img src={`http://localhost:5000/images/${prof.Image}`} alt={prof.Name} />\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n}\n\n  /* return (\n    <div>\n     \n\n    <Row>\n    \n      <Col >\n      <Form className=\"navbar-search navbar-search-dark \" onSubmit={(e)=>{Submit(e)}}>\n            <FormGroup className=\"mb-0\">\n              <div style={{borderRadius:30  ,marginTop:'10px',marginBottom:'10px',width:'300px',float:\"right\"}}>\n              <InputGroup className=\"input-group-alternative\">\n                <InputGroupText style={{backgroundColor:\"transparent\", borderColor:\"#7a7878\" }}>\n                 \n                  <AiOutlineSearch style={{color:\"#555555\"}} />\n                </InputGroupText>\n                <Input  placeholder=\"Search\" type=\"text\" style={{backgroundColor:\"transparent\", borderColor:\" #7a7878\"}}  onChange={(event)=>{setsearchtext(event.target.value)}} />\n              </InputGroup>\n              </div>\n            </FormGroup>\n       \n        <Card style ={{width:1500 ,marginLeft:'-40px'}} >\n          <CardTitle tag=\"h6\" className=\"border-bottom p-3 mb-0\">\n            <i className=\"bi bi-card-text me-2\"> </i>\n            Members\n          </CardTitle>\n          <CardBody style ={{width:1500}}>\n          <Row onSubmit={handleSubmit}>\n      <Col style={{marginLeft:'30px'}}>\n        <Label>Image:</Label>\n        <Input\n         type=\"file\" \n          name=\"Image\"\n          id=\"Image\"\n          value={currentUser.Image}\n          onChange={(e) => handleInputChange(e)} \n        />\n      </Col>\n      <Col>\n        <Label>Name:</Label>\n        <Input\n          type=\"text\"\n          name=\"Nom\"\n          id=\"Nom\"\n\n          value={currentUser.Nom}\n          onChange={(e) => handleInputChange(e)} style={{width:'250px'}}\n        />\n      </Col>\n      <Col>\n        <Label>Info:</Label>\n        <Input\n          type=\"text\"\n          name=\"Info\"\n          id=\"Info\"\n\n          value={currentUser.Info}\n          onChange={(e) => handleInputChange(e)} style={{width:'300px'}}\n        />\n      </Col>\n      <Col>\n        <Label>Contact:</Label>\n        <Input\n          type=\"text\"\n          name=\"Contact\"\n          id=\"Contact\"\n\n          value={currentUser.Contact}\n          onChange={(e) => handleInputChange(e)} style={{width:'250px'}}\n        />\n      </Col>\n      <Col >\n        <Label>email:</Label>\n        <Input\n          type=\"text\"\n          name=\"Email\"\n          id=\"Email\"\n\n          value={currentUser.Email}\n          onChange={(e) => handleInputChange(e)} style={{width:'250px'}}\n        />\n      </Col>\n       <Col>\n       <Button type=\"submit\" style={{borderRadius:30  ,marginTop:'35px',marginBottom:'10px',width:'70px',float:'flex-end'}}>OK</Button>\n\n      </Col>\n      \n    </Row>\n    </CardBody>\n    </Card>\n    </Form>\n\n    <Card style ={{width:1500 ,marginLeft:'-40px'}}>\n    <CardBody style ={{width:1550,marginLeft:'-40px'}}>\n\n            <Table className=\"no-wrap  align-left\" responsive borderless >\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Image</th>\n                 \n                  <th>Name</th>\n                  <th>Info</th>\n                  <th>Contact</th>\n                  <th>Email</th>\n\n                   \n\n                  { <th>Actions</th>}  \n                \n                </tr>\n              </thead>\n            \n              \n              <tbody>\n             {Json && Json.filter((val)=>{\n                if(searchtext===\"\")\n                return val ;\n                else if (val.name.toLowerCase().includes(searchtext.toLowerCase())){\n                  return val\n                }\n              }).map((tdata, index) => ( \n                    <tr key={index}>\n                  <td>{index+1}</td> \n                    { <td>{tdata.Image &&<> <img src={`http://localhost:5000/images/${tdata.Image}`} alt={`${tdata.Nom}'s profile picture`} /> </>}   </td> }\n                    \n               \n                <td>{tdata && tdata.Nom}</td>\n            <td style={{width:400}}>{tdata && tdata.Info}</td>\n\n            <td>{tdata && tdata.Contact}</td>\n            <td >{tdata && tdata.Email}</td>\n\n\n            \n                      <td style={{width:\"250px\",float:\"right\"}}> <><Button className =\"edit\" id=\"b5\" style={{marginTop:-2 ,float:\"right\",alignItems: 'flex-end'}}  >\n                  <i className=\"bi bi-pencil-fill\" style ={{fontSize: 20+\"px\",color:\"yellow\"}}   onClick={(e)=>editt(tdata,e) } ></i>\n                  \n                \n                </Button> \n              \n                <Button id =\"b4\"  /* onClick={(e)=>Delete(tdata,e)}      > \n                      <span className=\"trash\">\n                      <span></span>\n                        <i></i>\n            \n                      </span>\n                    </Button> </> \n                      \n                      \n                      \n                          </td> \n                      \n                          \n                      </tr> ))} \n                      </tbody> \n           \n  \n          \n            </Table>\n\n          </CardBody>\n        </Card>\n      </Col>\n    </Row>\n    \n    <Modal isOpen={modal} toggle={toggle} {...result} className=\"Modal1\"  size=\"lg\" style={{maxWidth: '2000px', width: '100%'}}>\n    <ModalHeader toggle={toggle}>Modal title</ModalHeader>\n    <ModalBody>\n    <form\n          id=\"form\"\n          action=\"/\"\n          method=\"POST\"\n        \n        >\n    <Table borderless>\n    <thead>\n                <tr>\n                  <th className =\"th\">Name</th>\n               \n                 \n                  <th>info</th>\n                  <th>contact</th>\n                 \n\n                \n                  \n                </tr>\n              </thead>\n            \n            \n              <tbody>\n            \n        \n          <tr>\n            <td>\n\n              <div className='inline'>\n                <Row>\n                  <Col>\n\n                  <Input \n              placeholder=\" nom\"\n              type=\"string\"\n              name=\"Nom\" id=\"Nom\"\n              className=\"input-field\"\n              onChange={(e) => handleInputChange(e)}\n              value={currentUser.Nom}\n            />   </Col>  \n      \n\n                </Row>\n            \n          </div>\n            </td>\n            <td>\n \n            <Input  \n              placeholder=\"info\"\n              type=\"string\"\n              name=\"info\"\n              className=\"input-field\"\n              onChange={(e) => handleInputChange(e)}\n              value={currentUser.Info}\n            />\n       \n\n      \n          </td>\n            <td>\n \n <Input \n   placeholder=\"contact\"\n   type=\"string\"\n   name=\"contact\"\n   className=\"input-field\"\n   onChange={(e) => handleInputChange(e)}\n   value={currentUser.Contact}\n   required\n > \n                </Input>  </td>\n\n           \n    \n\n\n       \n          </tr>\n    \n      \n                  </tbody>\n                  </Table>  \n                  <Button type=\"submit\" id=\"submit-button\" /* onClick={e=>update(e)}>\n            submit\n          </Button>  \n        </form>\n    </ModalBody>\n    \n  </Modal>\n    \n  </div>\n  );\n}; */\n\nexport default Prof;\n"],"mappings":";;AAAA,OAAO,cAAc;AACrB,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,EAAEC,GAAG,EAAEC,KAAK,EAAEC,IAAI,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,KAAK,EAACC,IAAI,EAACC,SAAS,EAACC,UAAU,EAACC,cAAc,EAAEC,KAAK,QAAO,YAAY;AAC7H,SAASC,eAAe,QAAQ,gBAAgB;AAChD,OAAOC,eAAe,MAAM,gCAAgC;AAC5D,OAAOC,IAAI,MAAM,aAAa;AAC9B,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,KAAK,QAAQ,YAAY;AAClC,SAASC,MAAM,EAAEC,KAAK,EAAEC,WAAW,EAAEC,SAAS,QAAQ,YAAY;AAElE,SAASC,cAAc,QAAQ,6BAA6B;AAC5D,SAASC,cAAc,QAAQ,4BAA4B;AAC3D,OAAOC,WAAW,MAAM,6BAA6B;AAAC;AAEtD,MAAMC,IAAI,GAAG,MAAM;EAAA;EACjB,MAAM,CAACC,UAAU,EAACC,aAAa,CAAC,GAACZ,QAAQ,CAAC,EAAE,CAAC;EAC7C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAM,CAACe,EAAE,EAAEC,KAAK,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAClC,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAM;IAAEmB;EAAK,CAAC,GAAGZ,cAAc,EAAE;EAClC,MAAM;IAAEa,IAAI;IAAEC;EAAS,CAAC,GAAGb,cAAc,EAAE;EACzC,MAAK,CAAEc,IAAI,EAACC,OAAO,CAAC,GAACvB,QAAQ,CAAC,EAAE,CAAC;EAGlC,MAAMwB,oBAAoB,GAAG;IAC3BT,EAAE,EAAE,IAAI;IACRU,GAAG,EAAE,EAAE;IACPC,IAAI,EAAE,EAAE;IACRC,OAAO,EAAE,EAAE;IACXC,KAAK,EAAC,EAAE;IAERC,KAAK,EAAE;EAGT,CAAC;EACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAMA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACgC,IAAI,EAAEC,OAAO,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACkC,KAAK,EAAEC,QAAQ,CAAC,GAAGnC,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACoC,KAAK,EAAEC,QAAQ,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACsC,KAAK,EAAEC,QAAQ,CAAC,GAAGvC,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd;IACAjB,KAAK,CAACwD,GAAG,CAAC,iCAAiC,CAAC,CACzCC,IAAI,CAACC,QAAQ,IAAI;MAChBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MACrBH,QAAQ,CAACG,QAAQ,CAACG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QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAClC,eAEP;MAAA,UAAI;IAAK;MAAA;MAAA;MAAA;IAAA,QAAK,eACd;MAAA,UACGjB,KAAK,CAAC0B,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACrB;QAAA,wBACE;UAAA,UAASD,IAAI,CAACE;QAAI;UAAA;UAAA;UAAA;QAAA,QAAU,MAAE,EAACF,IAAI,CAACrC,KAAK,EAAC,GAAC;UAAA;UAAA;UAAA;QAAA,QAAM,EAChDqC,IAAI,CAACvC,IAAI,eAAC;UAAA;UAAA;UAAA;QAAA,QAAM,eACjB;UAAK,GAAG,EAAG,gCAA+BuC,IAAI,CAACpC,KAAM,EAAE;UAAC,GAAG,EAAEoC,IAAI,CAACE;QAAK;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA,GAHnED,KAAK;QAAA;QAAA;QAAA;MAAA,QAKf;IAAC;MAAA;MAAA;MAAA;IAAA,QACC;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAER,CAAC;;AAEC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7OE,GAjTIxD,IAAI;EAAA,QAMSH,cAAc,EACLC,cAAc;AAAA;AAAA,KAPpCE,IAAI;AAwjBV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}