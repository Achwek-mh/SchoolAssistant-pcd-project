{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\nconst call_1 = require(\"./call\");\nconst channel_1 = require(\"./channel\");\nconst connectivity_state_1 = require(\"./connectivity-state\");\nconst constants_1 = require(\"./constants\");\nconst metadata_1 = require(\"./metadata\");\nconst client_interceptors_1 = require(\"./client-interceptors\");\nconst CHANNEL_SYMBOL = Symbol();\nconst INTERCEPTOR_SYMBOL = Symbol();\nconst INTERCEPTOR_PROVIDER_SYMBOL = Symbol();\nconst CALL_INVOCATION_TRANSFORMER_SYMBOL = Symbol();\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nfunction getErrorStackString(error) {\n  return error.stack.split('\\n').slice(1).join('\\n');\n}\n/**\n * A generic gRPC client. Primarily useful as a base class for all generated\n * clients.\n */\nclass Client {\n  constructor(address, credentials) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var _a, _b;\n    options = Object.assign({}, options);\n    this[INTERCEPTOR_SYMBOL] = (_a = options.interceptors) !== null && _a !== void 0 ? _a : [];\n    delete options.interceptors;\n    this[INTERCEPTOR_PROVIDER_SYMBOL] = (_b = options.interceptor_providers) !== null && _b !== void 0 ? _b : [];\n    delete options.interceptor_providers;\n    if (this[INTERCEPTOR_SYMBOL].length > 0 && this[INTERCEPTOR_PROVIDER_SYMBOL].length > 0) {\n      throw new Error('Both interceptors and interceptor_providers were passed as options ' + 'to the client constructor. Only one of these is allowed.');\n    }\n    this[CALL_INVOCATION_TRANSFORMER_SYMBOL] = options.callInvocationTransformer;\n    delete options.callInvocationTransformer;\n    if (options.channelOverride) {\n      this[CHANNEL_SYMBOL] = options.channelOverride;\n    } else if (options.channelFactoryOverride) {\n      const channelFactoryOverride = options.channelFactoryOverride;\n      delete options.channelFactoryOverride;\n      this[CHANNEL_SYMBOL] = channelFactoryOverride(address, credentials, options);\n    } else {\n      this[CHANNEL_SYMBOL] = new channel_1.ChannelImplementation(address, credentials, options);\n    }\n  }\n  close() {\n    this[CHANNEL_SYMBOL].close();\n  }\n  getChannel() {\n    return this[CHANNEL_SYMBOL];\n  }\n  waitForReady(deadline, callback) {\n    const checkState = err => {\n      if (err) {\n        callback(new Error('Failed to connect before the deadline'));\n        return;\n      }\n      let newState;\n      try {\n        newState = this[CHANNEL_SYMBOL].getConnectivityState(true);\n      } catch (e) {\n        callback(new Error('The channel has been closed'));\n        return;\n      }\n      if (newState === connectivity_state_1.ConnectivityState.READY) {\n        callback();\n      } else {\n        try {\n          this[CHANNEL_SYMBOL].watchConnectivityState(newState, deadline, checkState);\n        } catch (e) {\n          callback(new Error('The channel has been closed'));\n        }\n      }\n    };\n    setImmediate(checkState);\n  }\n  checkOptionalUnaryResponseArguments(arg1, arg2, arg3) {\n    if (isFunction(arg1)) {\n      return {\n        metadata: new metadata_1.Metadata(),\n        options: {},\n        callback: arg1\n      };\n    } else if (isFunction(arg2)) {\n      if (arg1 instanceof metadata_1.Metadata) {\n        return {\n          metadata: arg1,\n          options: {},\n          callback: arg2\n        };\n      } else {\n        return {\n          metadata: new metadata_1.Metadata(),\n          options: arg1,\n          callback: arg2\n        };\n      }\n    } else {\n      if (!(arg1 instanceof metadata_1.Metadata && arg2 instanceof Object && isFunction(arg3))) {\n        throw new Error('Incorrect arguments passed');\n      }\n      return {\n        metadata: arg1,\n        options: arg2,\n        callback: arg3\n      };\n    }\n  }\n  makeUnaryRequest(method, serialize, deserialize, argument, metadata, options, callback) {\n    var _a, _b;\n    const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options, callback);\n    const methodDefinition = {\n      path: method,\n      requestStream: false,\n      responseStream: false,\n      requestSerialize: serialize,\n      responseDeserialize: deserialize\n    };\n    let callProperties = {\n      argument: argument,\n      metadata: checkedArguments.metadata,\n      call: new call_1.ClientUnaryCallImpl(),\n      channel: this[CHANNEL_SYMBOL],\n      methodDefinition: methodDefinition,\n      callOptions: checkedArguments.options,\n      callback: checkedArguments.callback\n    };\n    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n    }\n    const emitter = callProperties.call;\n    const interceptorArgs = {\n      clientInterceptors: this[INTERCEPTOR_SYMBOL],\n      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n      callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n      callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []\n    };\n    const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n    /* This needs to happen before the emitter is used. Unfortunately we can't\n     * enforce this with the type system. We need to construct this emitter\n     * before calling the CallInvocationTransformer, and we need to create the\n     * call after that. */\n    emitter.call = call;\n    let responseMessage = null;\n    let receivedStatus = false;\n    const callerStackError = new Error();\n    call.start(callProperties.metadata, {\n      onReceiveMetadata: metadata => {\n        emitter.emit('metadata', metadata);\n      },\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      onReceiveMessage(message) {\n        if (responseMessage !== null) {\n          call.cancelWithStatus(constants_1.Status.INTERNAL, 'Too many responses received');\n        }\n        responseMessage = message;\n      },\n      onReceiveStatus(status) {\n        if (receivedStatus) {\n          return;\n        }\n        receivedStatus = true;\n        if (status.code === constants_1.Status.OK) {\n          if (responseMessage === null) {\n            const callerStack = getErrorStackString(callerStackError);\n            callProperties.callback((0, call_1.callErrorFromStatus)({\n              code: constants_1.Status.INTERNAL,\n              details: 'No message received',\n              metadata: status.metadata\n            }, callerStack));\n          } else {\n            callProperties.callback(null, responseMessage);\n          }\n        } else {\n          const callerStack = getErrorStackString(callerStackError);\n          callProperties.callback((0, call_1.callErrorFromStatus)(status, callerStack));\n        }\n        emitter.emit('status', status);\n      }\n    });\n    call.sendMessage(argument);\n    call.halfClose();\n    return emitter;\n  }\n  makeClientStreamRequest(method, serialize, deserialize, metadata, options, callback) {\n    var _a, _b;\n    const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options, callback);\n    const methodDefinition = {\n      path: method,\n      requestStream: true,\n      responseStream: false,\n      requestSerialize: serialize,\n      responseDeserialize: deserialize\n    };\n    let callProperties = {\n      metadata: checkedArguments.metadata,\n      call: new call_1.ClientWritableStreamImpl(serialize),\n      channel: this[CHANNEL_SYMBOL],\n      methodDefinition: methodDefinition,\n      callOptions: checkedArguments.options,\n      callback: checkedArguments.callback\n    };\n    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n    }\n    const emitter = callProperties.call;\n    const interceptorArgs = {\n      clientInterceptors: this[INTERCEPTOR_SYMBOL],\n      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n      callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n      callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []\n    };\n    const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n    /* This needs to happen before the emitter is used. Unfortunately we can't\n     * enforce this with the type system. We need to construct this emitter\n     * before calling the CallInvocationTransformer, and we need to create the\n     * call after that. */\n    emitter.call = call;\n    let responseMessage = null;\n    let receivedStatus = false;\n    const callerStackError = new Error();\n    call.start(callProperties.metadata, {\n      onReceiveMetadata: metadata => {\n        emitter.emit('metadata', metadata);\n      },\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      onReceiveMessage(message) {\n        if (responseMessage !== null) {\n          call.cancelWithStatus(constants_1.Status.INTERNAL, 'Too many responses received');\n        }\n        responseMessage = message;\n      },\n      onReceiveStatus(status) {\n        if (receivedStatus) {\n          return;\n        }\n        receivedStatus = true;\n        if (status.code === constants_1.Status.OK) {\n          if (responseMessage === null) {\n            const callerStack = getErrorStackString(callerStackError);\n            callProperties.callback((0, call_1.callErrorFromStatus)({\n              code: constants_1.Status.INTERNAL,\n              details: 'No message received',\n              metadata: status.metadata\n            }, callerStack));\n          } else {\n            callProperties.callback(null, responseMessage);\n          }\n        } else {\n          const callerStack = getErrorStackString(callerStackError);\n          callProperties.callback((0, call_1.callErrorFromStatus)(status, callerStack));\n        }\n        emitter.emit('status', status);\n      }\n    });\n    return emitter;\n  }\n  checkMetadataAndOptions(arg1, arg2) {\n    let metadata;\n    let options;\n    if (arg1 instanceof metadata_1.Metadata) {\n      metadata = arg1;\n      if (arg2) {\n        options = arg2;\n      } else {\n        options = {};\n      }\n    } else {\n      if (arg1) {\n        options = arg1;\n      } else {\n        options = {};\n      }\n      metadata = new metadata_1.Metadata();\n    }\n    return {\n      metadata,\n      options\n    };\n  }\n  makeServerStreamRequest(method, serialize, deserialize, argument, metadata, options) {\n    var _a, _b;\n    const checkedArguments = this.checkMetadataAndOptions(metadata, options);\n    const methodDefinition = {\n      path: method,\n      requestStream: false,\n      responseStream: true,\n      requestSerialize: serialize,\n      responseDeserialize: deserialize\n    };\n    let callProperties = {\n      argument: argument,\n      metadata: checkedArguments.metadata,\n      call: new call_1.ClientReadableStreamImpl(deserialize),\n      channel: this[CHANNEL_SYMBOL],\n      methodDefinition: methodDefinition,\n      callOptions: checkedArguments.options\n    };\n    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n    }\n    const stream = callProperties.call;\n    const interceptorArgs = {\n      clientInterceptors: this[INTERCEPTOR_SYMBOL],\n      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n      callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n      callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []\n    };\n    const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n    /* This needs to happen before the emitter is used. Unfortunately we can't\n     * enforce this with the type system. We need to construct this emitter\n     * before calling the CallInvocationTransformer, and we need to create the\n     * call after that. */\n    stream.call = call;\n    let receivedStatus = false;\n    const callerStackError = new Error();\n    call.start(callProperties.metadata, {\n      onReceiveMetadata(metadata) {\n        stream.emit('metadata', metadata);\n      },\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      onReceiveMessage(message) {\n        stream.push(message);\n      },\n      onReceiveStatus(status) {\n        if (receivedStatus) {\n          return;\n        }\n        receivedStatus = true;\n        stream.push(null);\n        if (status.code !== constants_1.Status.OK) {\n          const callerStack = getErrorStackString(callerStackError);\n          stream.emit('error', (0, call_1.callErrorFromStatus)(status, callerStack));\n        }\n        stream.emit('status', status);\n      }\n    });\n    call.sendMessage(argument);\n    call.halfClose();\n    return stream;\n  }\n  makeBidiStreamRequest(method, serialize, deserialize, metadata, options) {\n    var _a, _b;\n    const checkedArguments = this.checkMetadataAndOptions(metadata, options);\n    const methodDefinition = {\n      path: method,\n      requestStream: true,\n      responseStream: true,\n      requestSerialize: serialize,\n      responseDeserialize: deserialize\n    };\n    let callProperties = {\n      metadata: checkedArguments.metadata,\n      call: new call_1.ClientDuplexStreamImpl(serialize, deserialize),\n      channel: this[CHANNEL_SYMBOL],\n      methodDefinition: methodDefinition,\n      callOptions: checkedArguments.options\n    };\n    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n    }\n    const stream = callProperties.call;\n    const interceptorArgs = {\n      clientInterceptors: this[INTERCEPTOR_SYMBOL],\n      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n      callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n      callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []\n    };\n    const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n    /* This needs to happen before the emitter is used. Unfortunately we can't\n     * enforce this with the type system. We need to construct this emitter\n     * before calling the CallInvocationTransformer, and we need to create the\n     * call after that. */\n    stream.call = call;\n    let receivedStatus = false;\n    const callerStackError = new Error();\n    call.start(callProperties.metadata, {\n      onReceiveMetadata(metadata) {\n        stream.emit('metadata', metadata);\n      },\n      onReceiveMessage(message) {\n        stream.push(message);\n      },\n      onReceiveStatus(status) {\n        if (receivedStatus) {\n          return;\n        }\n        receivedStatus = true;\n        stream.push(null);\n        if (status.code !== constants_1.Status.OK) {\n          const callerStack = getErrorStackString(callerStackError);\n          stream.emit('error', (0, call_1.callErrorFromStatus)(status, callerStack));\n        }\n        stream.emit('status', status);\n      }\n    });\n    return stream;\n  }\n}\nexports.Client = Client;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAiBA;AAeA;AACA;AAGA;AACA;AAEA;AAeA,MAAMA,cAAc,GAAGC,MAAM,EAAE;AAC/B,MAAMC,kBAAkB,GAAGD,MAAM,EAAE;AACnC,MAAME,2BAA2B,GAAGF,MAAM,EAAE;AAC5C,MAAMG,kCAAkC,GAAGH,MAAM,EAAE;AAEnD,SAASI,UAAU,CACjBC,GAAqE;EAErE,OAAO,OAAOA,GAAG,KAAK,UAAU;AAClC;AAgDA,SAASC,mBAAmB,CAACC,KAAY;EACvC,OAAOA,KAAK,CAACC,KAAM,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;AACrD;AAEA;;;;AAIA,MAAaC,MAAM;EAKjBC,YACEC,OAAe,EACfC,WAA+B,EACJ;IAAA,IAA3BC,8EAAyB,EAAE;;IAE3BA,OAAO,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEF,OAAO,CAAC;IACpC,IAAI,CAACf,kBAAkB,CAAC,GAAG,aAAO,CAACkB,YAAY,mCAAI,EAAE;IACrD,OAAOH,OAAO,CAACG,YAAY;IAC3B,IAAI,CAACjB,2BAA2B,CAAC,GAAG,aAAO,CAACkB,qBAAqB,mCAAI,EAAE;IACvE,OAAOJ,OAAO,CAACI,qBAAqB;IACpC,IACE,IAAI,CAACnB,kBAAkB,CAAC,CAACoB,MAAM,GAAG,CAAC,IACnC,IAAI,CAACnB,2BAA2B,CAAC,CAACmB,MAAM,GAAG,CAAC,EAC5C;MACA,MAAM,IAAIC,KAAK,CACb,qEAAqE,GACnE,0DAA0D,CAC7D;;IAEH,IAAI,CAACnB,kCAAkC,CAAC,GACtCa,OAAO,CAACO,yBAAyB;IACnC,OAAOP,OAAO,CAACO,yBAAyB;IACxC,IAAIP,OAAO,CAACQ,eAAe,EAAE;MAC3B,IAAI,CAACzB,cAAc,CAAC,GAAGiB,OAAO,CAACQ,eAAe;KAC/C,MAAM,IAAIR,OAAO,CAACS,sBAAsB,EAAE;MACzC,MAAMA,sBAAsB,GAAGT,OAAO,CAACS,sBAAsB;MAC7D,OAAOT,OAAO,CAACS,sBAAsB;MACrC,IAAI,CAAC1B,cAAc,CAAC,GAAG0B,sBAAsB,CAC3CX,OAAO,EACPC,WAAW,EACXC,OAAO,CACR;KACF,MAAM;MACL,IAAI,CAACjB,cAAc,CAAC,GAAG,IAAI2B,+BAAqB,CAC9CZ,OAAO,EACPC,WAAW,EACXC,OAAO,CACR;;EAEL;EAEAW,KAAK;IACH,IAAI,CAAC5B,cAAc,CAAC,CAAC4B,KAAK,EAAE;EAC9B;EAEAC,UAAU;IACR,OAAO,IAAI,CAAC7B,cAAc,CAAC;EAC7B;EAEA8B,YAAY,CAACC,QAAkB,EAAEC,QAAiC;IAChE,MAAMC,UAAU,GAAIC,GAAW,IAAI;MACjC,IAAIA,GAAG,EAAE;QACPF,QAAQ,CAAC,IAAIT,KAAK,CAAC,uCAAuC,CAAC,CAAC;QAC5D;;MAEF,IAAIY,QAAQ;MACZ,IAAI;QACFA,QAAQ,GAAG,IAAI,CAACnC,cAAc,CAAC,CAACoC,oBAAoB,CAAC,IAAI,CAAC;OAC3D,CAAC,OAAOC,CAAC,EAAE;QACVL,QAAQ,CAAC,IAAIT,KAAK,CAAC,6BAA6B,CAAC,CAAC;QAClD;;MAEF,IAAIY,QAAQ,KAAKG,sCAAiB,CAACC,KAAK,EAAE;QACxCP,QAAQ,EAAE;OACX,MAAM;QACL,IAAI;UACF,IAAI,CAAChC,cAAc,CAAC,CAACwC,sBAAsB,CACzCL,QAAQ,EACRJ,QAAQ,EACRE,UAAU,CACX;SACF,CAAC,OAAOI,CAAC,EAAE;UACVL,QAAQ,CAAC,IAAIT,KAAK,CAAC,6BAA6B,CAAC,CAAC;;;IAGxD,CAAC;IACDkB,YAAY,CAACR,UAAU,CAAC;EAC1B;EAEQS,mCAAmC,CACzCC,IAA0D,EAC1DC,IAAgD,EAChDC,IAAkC;IAMlC,IAAIxC,UAAU,CAACsC,IAAI,CAAC,EAAE;MACpB,OAAO;QAAEG,QAAQ,EAAE,IAAIC,mBAAQ,EAAE;QAAE9B,OAAO,EAAE,EAAE;QAAEe,QAAQ,EAAEW;MAAI,CAAE;KACjE,MAAM,IAAItC,UAAU,CAACuC,IAAI,CAAC,EAAE;MAC3B,IAAID,IAAI,YAAYI,mBAAQ,EAAE;QAC5B,OAAO;UAAED,QAAQ,EAAEH,IAAI;UAAE1B,OAAO,EAAE,EAAE;UAAEe,QAAQ,EAAEY;QAAI,CAAE;OACvD,MAAM;QACL,OAAO;UAAEE,QAAQ,EAAE,IAAIC,mBAAQ,EAAE;UAAE9B,OAAO,EAAE0B,IAAI;UAAEX,QAAQ,EAAEY;QAAI,CAAE;;KAErE,MAAM;MACL,IACE,EACED,IAAI,YAAYI,mBAAQ,IACxBH,IAAI,YAAY1B,MAAM,IACtBb,UAAU,CAACwC,IAAI,CAAC,CACjB,EACD;QACA,MAAM,IAAItB,KAAK,CAAC,4BAA4B,CAAC;;MAE/C,OAAO;QAAEuB,QAAQ,EAAEH,IAAI;QAAE1B,OAAO,EAAE2B,IAAI;QAAEZ,QAAQ,EAAEa;MAAI,CAAE;;EAE5D;EAkCAG,gBAAgB,CACdC,MAAc,EACdC,SAAyC,EACzCC,WAA4C,EAC5CC,QAAqB,EACrBN,QAA8D,EAC9D7B,OAAmD,EACnDe,QAAsC;;IAEtC,MAAMqB,gBAAgB,GAAG,IAAI,CAACX,mCAAmC,CAC/DI,QAAQ,EACR7B,OAAO,EACPe,QAAQ,CACT;IACD,MAAMsB,gBAAgB,GAGlB;MACFC,IAAI,EAAEN,MAAM;MACZO,aAAa,EAAE,KAAK;MACpBC,cAAc,EAAE,KAAK;MACrBC,gBAAgB,EAAER,SAAS;MAC3BS,mBAAmB,EAAER;KACtB;IACD,IAAIS,cAAc,GAA8C;MAC9DR,QAAQ,EAAEA,QAAQ;MAClBN,QAAQ,EAAEO,gBAAgB,CAACP,QAAQ;MACnCe,IAAI,EAAE,IAAIC,0BAAmB,EAAE;MAC/BC,OAAO,EAAE,IAAI,CAAC/D,cAAc,CAAC;MAC7BsD,gBAAgB,EAAEA,gBAAgB;MAClCU,WAAW,EAAEX,gBAAgB,CAACpC,OAAO;MACrCe,QAAQ,EAAEqB,gBAAgB,CAACrB;KAC5B;IACD,IAAI,IAAI,CAAC5B,kCAAkC,CAAC,EAAE;MAC5CwD,cAAc,GAAG,IAAI,CAACxD,kCAAkC,CAAE,CACxDwD,cAAc,CAC8B;;IAEhD,MAAMK,OAAO,GAAoBL,cAAc,CAACC,IAAI;IACpD,MAAMK,eAAe,GAAyB;MAC5CC,kBAAkB,EAAE,IAAI,CAACjE,kBAAkB,CAAC;MAC5CkE,0BAA0B,EAAE,IAAI,CAACjE,2BAA2B,CAAC;MAC7DkE,gBAAgB,EAAE,oBAAc,CAACL,WAAW,CAAC5C,YAAY,mCAAI,EAAE;MAC/DkD,wBAAwB,EACtB,oBAAc,CAACN,WAAW,CAAC3C,qBAAqB,mCAAI;KACvD;IACD,MAAMwC,IAAI,GAA8B,6CAAmB,EACzDK,eAAe,EACfN,cAAc,CAACN,gBAAgB,EAC/BM,cAAc,CAACI,WAAW,EAC1BJ,cAAc,CAACG,OAAO,CACvB;IACD;;;;IAIAE,OAAO,CAACJ,IAAI,GAAGA,IAAI;IACnB,IAAIU,eAAe,GAAwB,IAAI;IAC/C,IAAIC,cAAc,GAAG,KAAK;IAC1B,MAAMC,gBAAgB,GAAG,IAAIlD,KAAK,EAAE;IACpCsC,IAAI,CAACa,KAAK,CAACd,cAAc,CAACd,QAAQ,EAAE;MAClC6B,iBAAiB,EAAG7B,QAAQ,IAAI;QAC9BmB,OAAO,CAACW,IAAI,CAAC,UAAU,EAAE9B,QAAQ,CAAC;MACpC,CAAC;MACD;MACA+B,gBAAgB,CAACC,OAAY;QAC3B,IAAIP,eAAe,KAAK,IAAI,EAAE;UAC5BV,IAAI,CAACkB,gBAAgB,CAACC,kBAAM,CAACC,QAAQ,EAAE,6BAA6B,CAAC;;QAEvEV,eAAe,GAAGO,OAAO;MAC3B,CAAC;MACDI,eAAe,CAACC,MAAoB;QAClC,IAAIX,cAAc,EAAE;UAClB;;QAEFA,cAAc,GAAG,IAAI;QACrB,IAAIW,MAAM,CAACC,IAAI,KAAKJ,kBAAM,CAACK,EAAE,EAAE;UAC7B,IAAId,eAAe,KAAK,IAAI,EAAE;YAC5B,MAAMe,WAAW,GAAG/E,mBAAmB,CAACkE,gBAAgB,CAAC;YACzDb,cAAc,CAAC5B,QAAS,CAAC,8BAAmB,EAAC;cAC3CoD,IAAI,EAAEJ,kBAAM,CAACC,QAAQ;cACrBM,OAAO,EAAE,qBAAqB;cAC9BzC,QAAQ,EAAEqC,MAAM,CAACrC;aAClB,EAAEwC,WAAW,CAAC,CAAC;WACjB,MAAM;YACL1B,cAAc,CAAC5B,QAAS,CAAC,IAAI,EAAEuC,eAAe,CAAC;;SAElD,MAAM;UACL,MAAMe,WAAW,GAAG/E,mBAAmB,CAACkE,gBAAgB,CAAC;UACzDb,cAAc,CAAC5B,QAAS,CAAC,8BAAmB,EAACmD,MAAM,EAAEG,WAAW,CAAC,CAAC;;QAEpErB,OAAO,CAACW,IAAI,CAAC,QAAQ,EAAEO,MAAM,CAAC;MAChC;KACD,CAAC;IACFtB,IAAI,CAAC2B,WAAW,CAACpC,QAAQ,CAAC;IAC1BS,IAAI,CAAC4B,SAAS,EAAE;IAChB,OAAOxB,OAAO;EAChB;EA8BAyB,uBAAuB,CACrBzC,MAAc,EACdC,SAAyC,EACzCC,WAA4C,EAC5CL,QAA8D,EAC9D7B,OAAmD,EACnDe,QAAsC;;IAEtC,MAAMqB,gBAAgB,GAAG,IAAI,CAACX,mCAAmC,CAC/DI,QAAQ,EACR7B,OAAO,EACPe,QAAQ,CACT;IACD,MAAMsB,gBAAgB,GAGlB;MACFC,IAAI,EAAEN,MAAM;MACZO,aAAa,EAAE,IAAI;MACnBC,cAAc,EAAE,KAAK;MACrBC,gBAAgB,EAAER,SAAS;MAC3BS,mBAAmB,EAAER;KACtB;IACD,IAAIS,cAAc,GAA8C;MAC9Dd,QAAQ,EAAEO,gBAAgB,CAACP,QAAQ;MACnCe,IAAI,EAAE,IAAIC,+BAAwB,CAAcZ,SAAS,CAAC;MAC1Da,OAAO,EAAE,IAAI,CAAC/D,cAAc,CAAC;MAC7BsD,gBAAgB,EAAEA,gBAAgB;MAClCU,WAAW,EAAEX,gBAAgB,CAACpC,OAAO;MACrCe,QAAQ,EAAEqB,gBAAgB,CAACrB;KAC5B;IACD,IAAI,IAAI,CAAC5B,kCAAkC,CAAC,EAAE;MAC5CwD,cAAc,GAAG,IAAI,CAACxD,kCAAkC,CAAE,CACxDwD,cAAc,CAC8B;;IAEhD,MAAMK,OAAO,GAAsCL,cAAc,CAACC,IAAyC;IAC3G,MAAMK,eAAe,GAAyB;MAC5CC,kBAAkB,EAAE,IAAI,CAACjE,kBAAkB,CAAC;MAC5CkE,0BAA0B,EAAE,IAAI,CAACjE,2BAA2B,CAAC;MAC7DkE,gBAAgB,EAAE,oBAAc,CAACL,WAAW,CAAC5C,YAAY,mCAAI,EAAE;MAC/DkD,wBAAwB,EACtB,oBAAc,CAACN,WAAW,CAAC3C,qBAAqB,mCAAI;KACvD;IACD,MAAMwC,IAAI,GAA8B,6CAAmB,EACzDK,eAAe,EACfN,cAAc,CAACN,gBAAgB,EAC/BM,cAAc,CAACI,WAAW,EAC1BJ,cAAc,CAACG,OAAO,CACvB;IACD;;;;IAIAE,OAAO,CAACJ,IAAI,GAAGA,IAAI;IACnB,IAAIU,eAAe,GAAwB,IAAI;IAC/C,IAAIC,cAAc,GAAG,KAAK;IAC1B,MAAMC,gBAAgB,GAAG,IAAIlD,KAAK,EAAE;IACpCsC,IAAI,CAACa,KAAK,CAACd,cAAc,CAACd,QAAQ,EAAE;MAClC6B,iBAAiB,EAAG7B,QAAQ,IAAI;QAC9BmB,OAAO,CAACW,IAAI,CAAC,UAAU,EAAE9B,QAAQ,CAAC;MACpC,CAAC;MACD;MACA+B,gBAAgB,CAACC,OAAY;QAC3B,IAAIP,eAAe,KAAK,IAAI,EAAE;UAC5BV,IAAI,CAACkB,gBAAgB,CAACC,kBAAM,CAACC,QAAQ,EAAE,6BAA6B,CAAC;;QAEvEV,eAAe,GAAGO,OAAO;MAC3B,CAAC;MACDI,eAAe,CAACC,MAAoB;QAClC,IAAIX,cAAc,EAAE;UAClB;;QAEFA,cAAc,GAAG,IAAI;QACrB,IAAIW,MAAM,CAACC,IAAI,KAAKJ,kBAAM,CAACK,EAAE,EAAE;UAC7B,IAAId,eAAe,KAAK,IAAI,EAAE;YAC5B,MAAMe,WAAW,GAAG/E,mBAAmB,CAACkE,gBAAgB,CAAC;YACzDb,cAAc,CAAC5B,QAAS,CAAC,8BAAmB,EAAC;cAC3CoD,IAAI,EAAEJ,kBAAM,CAACC,QAAQ;cACrBM,OAAO,EAAE,qBAAqB;cAC9BzC,QAAQ,EAAEqC,MAAM,CAACrC;aAClB,EAAEwC,WAAW,CAAC,CAAC;WACjB,MAAM;YACL1B,cAAc,CAAC5B,QAAS,CAAC,IAAI,EAAEuC,eAAe,CAAC;;SAElD,MAAM;UACL,MAAMe,WAAW,GAAG/E,mBAAmB,CAACkE,gBAAgB,CAAC;UACzDb,cAAc,CAAC5B,QAAS,CAAC,8BAAmB,EAACmD,MAAM,EAAEG,WAAW,CAAC,CAAC;;QAEpErB,OAAO,CAACW,IAAI,CAAC,QAAQ,EAAEO,MAAM,CAAC;MAChC;KACD,CAAC;IACF,OAAOlB,OAAO;EAChB;EAEQ0B,uBAAuB,CAC7BhD,IAA6B,EAC7BC,IAAkB;IAElB,IAAIE,QAAkB;IACtB,IAAI7B,OAAoB;IACxB,IAAI0B,IAAI,YAAYI,mBAAQ,EAAE;MAC5BD,QAAQ,GAAGH,IAAI;MACf,IAAIC,IAAI,EAAE;QACR3B,OAAO,GAAG2B,IAAI;OACf,MAAM;QACL3B,OAAO,GAAG,EAAE;;KAEf,MAAM;MACL,IAAI0B,IAAI,EAAE;QACR1B,OAAO,GAAG0B,IAAI;OACf,MAAM;QACL1B,OAAO,GAAG,EAAE;;MAEd6B,QAAQ,GAAG,IAAIC,mBAAQ,EAAE;;IAE3B,OAAO;MAAED,QAAQ;MAAE7B;IAAO,CAAE;EAC9B;EAiBA2E,uBAAuB,CACrB3C,MAAc,EACdC,SAAyC,EACzCC,WAA4C,EAC5CC,QAAqB,EACrBN,QAAiC,EACjC7B,OAAqB;;IAErB,MAAMoC,gBAAgB,GAAG,IAAI,CAACsC,uBAAuB,CAAC7C,QAAQ,EAAE7B,OAAO,CAAC;IACxE,MAAMqC,gBAAgB,GAGlB;MACFC,IAAI,EAAEN,MAAM;MACZO,aAAa,EAAE,KAAK;MACpBC,cAAc,EAAE,IAAI;MACpBC,gBAAgB,EAAER,SAAS;MAC3BS,mBAAmB,EAAER;KACtB;IACD,IAAIS,cAAc,GAA8C;MAC9DR,QAAQ,EAAEA,QAAQ;MAClBN,QAAQ,EAAEO,gBAAgB,CAACP,QAAQ;MACnCe,IAAI,EAAE,IAAIC,+BAAwB,CAAeX,WAAW,CAAC;MAC7DY,OAAO,EAAE,IAAI,CAAC/D,cAAc,CAAC;MAC7BsD,gBAAgB,EAAEA,gBAAgB;MAClCU,WAAW,EAAEX,gBAAgB,CAACpC;KAC/B;IACD,IAAI,IAAI,CAACb,kCAAkC,CAAC,EAAE;MAC5CwD,cAAc,GAAG,IAAI,CAACxD,kCAAkC,CAAE,CACxDwD,cAAc,CAC8B;;IAEhD,MAAMiC,MAAM,GAAuCjC,cAAc,CAACC,IAA0C;IAC5G,MAAMK,eAAe,GAAyB;MAC5CC,kBAAkB,EAAE,IAAI,CAACjE,kBAAkB,CAAC;MAC5CkE,0BAA0B,EAAE,IAAI,CAACjE,2BAA2B,CAAC;MAC7DkE,gBAAgB,EAAE,oBAAc,CAACL,WAAW,CAAC5C,YAAY,mCAAI,EAAE;MAC/DkD,wBAAwB,EACtB,oBAAc,CAACN,WAAW,CAAC3C,qBAAqB,mCAAI;KACvD;IACD,MAAMwC,IAAI,GAA8B,6CAAmB,EACzDK,eAAe,EACfN,cAAc,CAACN,gBAAgB,EAC/BM,cAAc,CAACI,WAAW,EAC1BJ,cAAc,CAACG,OAAO,CACvB;IACD;;;;IAIA8B,MAAM,CAAChC,IAAI,GAAGA,IAAI;IAClB,IAAIW,cAAc,GAAG,KAAK;IAC1B,MAAMC,gBAAgB,GAAG,IAAIlD,KAAK,EAAE;IACpCsC,IAAI,CAACa,KAAK,CAACd,cAAc,CAACd,QAAQ,EAAE;MAClC6B,iBAAiB,CAAC7B,QAAkB;QAClC+C,MAAM,CAACjB,IAAI,CAAC,UAAU,EAAE9B,QAAQ,CAAC;MACnC,CAAC;MACD;MACA+B,gBAAgB,CAACC,OAAY;QAC3Be,MAAM,CAACC,IAAI,CAAChB,OAAO,CAAC;MACtB,CAAC;MACDI,eAAe,CAACC,MAAoB;QAClC,IAAIX,cAAc,EAAE;UAClB;;QAEFA,cAAc,GAAG,IAAI;QACrBqB,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC;QACjB,IAAIX,MAAM,CAACC,IAAI,KAAKJ,kBAAM,CAACK,EAAE,EAAE;UAC7B,MAAMC,WAAW,GAAG/E,mBAAmB,CAACkE,gBAAgB,CAAC;UACzDoB,MAAM,CAACjB,IAAI,CAAC,OAAO,EAAE,8BAAmB,EAACO,MAAM,EAAEG,WAAW,CAAC,CAAC;;QAEhEO,MAAM,CAACjB,IAAI,CAAC,QAAQ,EAAEO,MAAM,CAAC;MAC/B;KACD,CAAC;IACFtB,IAAI,CAAC2B,WAAW,CAACpC,QAAQ,CAAC;IAC1BS,IAAI,CAAC4B,SAAS,EAAE;IAChB,OAAOI,MAAM;EACf;EAeAE,qBAAqB,CACnB9C,MAAc,EACdC,SAAyC,EACzCC,WAA4C,EAC5CL,QAAiC,EACjC7B,OAAqB;;IAErB,MAAMoC,gBAAgB,GAAG,IAAI,CAACsC,uBAAuB,CAAC7C,QAAQ,EAAE7B,OAAO,CAAC;IACxE,MAAMqC,gBAAgB,GAGlB;MACFC,IAAI,EAAEN,MAAM;MACZO,aAAa,EAAE,IAAI;MACnBC,cAAc,EAAE,IAAI;MACpBC,gBAAgB,EAAER,SAAS;MAC3BS,mBAAmB,EAAER;KACtB;IACD,IAAIS,cAAc,GAA8C;MAC9Dd,QAAQ,EAAEO,gBAAgB,CAACP,QAAQ;MACnCe,IAAI,EAAE,IAAIC,6BAAsB,CAC9BZ,SAAS,EACTC,WAAW,CACZ;MACDY,OAAO,EAAE,IAAI,CAAC/D,cAAc,CAAC;MAC7BsD,gBAAgB,EAAEA,gBAAgB;MAClCU,WAAW,EAAEX,gBAAgB,CAACpC;KAC/B;IACD,IAAI,IAAI,CAACb,kCAAkC,CAAC,EAAE;MAC5CwD,cAAc,GAAG,IAAI,CAACxD,kCAAkC,CAAE,CACxDwD,cAAc,CAC8B;;IAEhD,MAAMiC,MAAM,GAGRjC,cAAc,CAACC,IAAqD;IACxE,MAAMK,eAAe,GAAyB;MAC5CC,kBAAkB,EAAE,IAAI,CAACjE,kBAAkB,CAAC;MAC5CkE,0BAA0B,EAAE,IAAI,CAACjE,2BAA2B,CAAC;MAC7DkE,gBAAgB,EAAE,oBAAc,CAACL,WAAW,CAAC5C,YAAY,mCAAI,EAAE;MAC/DkD,wBAAwB,EACtB,oBAAc,CAACN,WAAW,CAAC3C,qBAAqB,mCAAI;KACvD;IACD,MAAMwC,IAAI,GAA8B,6CAAmB,EACzDK,eAAe,EACfN,cAAc,CAACN,gBAAgB,EAC/BM,cAAc,CAACI,WAAW,EAC1BJ,cAAc,CAACG,OAAO,CACvB;IACD;;;;IAIA8B,MAAM,CAAChC,IAAI,GAAGA,IAAI;IAClB,IAAIW,cAAc,GAAG,KAAK;IAC1B,MAAMC,gBAAgB,GAAG,IAAIlD,KAAK,EAAE;IACpCsC,IAAI,CAACa,KAAK,CAACd,cAAc,CAACd,QAAQ,EAAE;MAClC6B,iBAAiB,CAAC7B,QAAkB;QAClC+C,MAAM,CAACjB,IAAI,CAAC,UAAU,EAAE9B,QAAQ,CAAC;MACnC,CAAC;MACD+B,gBAAgB,CAACC,OAAe;QAC9Be,MAAM,CAACC,IAAI,CAAChB,OAAO,CAAC;MACtB,CAAC;MACDI,eAAe,CAACC,MAAoB;QAClC,IAAIX,cAAc,EAAE;UAClB;;QAEFA,cAAc,GAAG,IAAI;QACrBqB,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC;QACjB,IAAIX,MAAM,CAACC,IAAI,KAAKJ,kBAAM,CAACK,EAAE,EAAE;UAC7B,MAAMC,WAAW,GAAG/E,mBAAmB,CAACkE,gBAAgB,CAAC;UACzDoB,MAAM,CAACjB,IAAI,CAAC,OAAO,EAAE,8BAAmB,EAACO,MAAM,EAAEG,WAAW,CAAC,CAAC;;QAEhEO,MAAM,CAACjB,IAAI,CAAC,QAAQ,EAAEO,MAAM,CAAC;MAC/B;KACD,CAAC;IACF,OAAOU,MAAM;EACf;;AAlkBFG","names":["CHANNEL_SYMBOL","Symbol","INTERCEPTOR_SYMBOL","INTERCEPTOR_PROVIDER_SYMBOL","CALL_INVOCATION_TRANSFORMER_SYMBOL","isFunction","arg","getErrorStackString","error","stack","split","slice","join","Client","constructor","address","credentials","options","Object","assign","interceptors","interceptor_providers","length","Error","callInvocationTransformer","channelOverride","channelFactoryOverride","channel_1","close","getChannel","waitForReady","deadline","callback","checkState","err","newState","getConnectivityState","e","connectivity_state_1","READY","watchConnectivityState","setImmediate","checkOptionalUnaryResponseArguments","arg1","arg2","arg3","metadata","metadata_1","makeUnaryRequest","method","serialize","deserialize","argument","checkedArguments","methodDefinition","path","requestStream","responseStream","requestSerialize","responseDeserialize","callProperties","call","call_1","channel","callOptions","emitter","interceptorArgs","clientInterceptors","clientInterceptorProviders","callInterceptors","callInterceptorProviders","responseMessage","receivedStatus","callerStackError","start","onReceiveMetadata","emit","onReceiveMessage","message","cancelWithStatus","constants_1","INTERNAL","onReceiveStatus","status","code","OK","callerStack","details","sendMessage","halfClose","makeClientStreamRequest","checkMetadataAndOptions","makeServerStreamRequest","stream","push","makeBidiStreamRequest","exports"],"sources":["/home/achwak/node_modules/@grpc/grpc-js/src/client.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  ClientDuplexStream,\n  ClientDuplexStreamImpl,\n  ClientReadableStream,\n  ClientReadableStreamImpl,\n  ClientUnaryCall,\n  ClientUnaryCallImpl,\n  ClientWritableStream,\n  ClientWritableStreamImpl,\n  ServiceError,\n  callErrorFromStatus,\n  SurfaceCall,\n} from './call';\nimport { CallCredentials } from './call-credentials';\nimport { StatusObject } from './call-interface';\nimport { Channel, ChannelImplementation } from './channel';\nimport { ConnectivityState } from './connectivity-state';\nimport { ChannelCredentials } from './channel-credentials';\nimport { ChannelOptions } from './channel-options';\nimport { Status } from './constants';\nimport { Metadata } from './metadata';\nimport { ClientMethodDefinition } from './make-client';\nimport {\n  getInterceptingCall,\n  Interceptor,\n  InterceptorProvider,\n  InterceptorArguments,\n  InterceptingCallInterface,\n} from './client-interceptors';\nimport {\n  ServerUnaryCall,\n  ServerReadableStream,\n  ServerWritableStream,\n  ServerDuplexStream,\n} from './server-call';\nimport { Deadline } from './deadline';\n\nconst CHANNEL_SYMBOL = Symbol();\nconst INTERCEPTOR_SYMBOL = Symbol();\nconst INTERCEPTOR_PROVIDER_SYMBOL = Symbol();\nconst CALL_INVOCATION_TRANSFORMER_SYMBOL = Symbol();\n\nfunction isFunction<ResponseType>(\n  arg: Metadata | CallOptions | UnaryCallback<ResponseType> | undefined\n): arg is UnaryCallback<ResponseType> {\n  return typeof arg === 'function';\n}\n\nexport interface UnaryCallback<ResponseType> {\n  (err: ServiceError | null, value?: ResponseType): void;\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport interface CallOptions {\n  deadline?: Deadline;\n  host?: string;\n  parent?:\n    | ServerUnaryCall<any, any>\n    | ServerReadableStream<any, any>\n    | ServerWritableStream<any, any>\n    | ServerDuplexStream<any, any>;\n  propagate_flags?: number;\n  credentials?: CallCredentials;\n  interceptors?: Interceptor[];\n  interceptor_providers?: InterceptorProvider[];\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\nexport interface CallProperties<RequestType, ResponseType> {\n  argument?: RequestType;\n  metadata: Metadata;\n  call: SurfaceCall;\n  channel: Channel;\n  methodDefinition: ClientMethodDefinition<RequestType, ResponseType>;\n  callOptions: CallOptions;\n  callback?: UnaryCallback<ResponseType>;\n}\n\nexport interface CallInvocationTransformer {\n  (callProperties: CallProperties<any, any>): CallProperties<any, any>; // eslint-disable-line @typescript-eslint/no-explicit-any\n}\n\nexport type ClientOptions = Partial<ChannelOptions> & {\n  channelOverride?: Channel;\n  channelFactoryOverride?: (\n    address: string,\n    credentials: ChannelCredentials,\n    options: ClientOptions\n  ) => Channel;\n  interceptors?: Interceptor[];\n  interceptor_providers?: InterceptorProvider[];\n  callInvocationTransformer?: CallInvocationTransformer;\n};\n\nfunction getErrorStackString(error: Error): string {\n  return error.stack!.split('\\n').slice(1).join('\\n');\n}\n\n/**\n * A generic gRPC client. Primarily useful as a base class for all generated\n * clients.\n */\nexport class Client {\n  private readonly [CHANNEL_SYMBOL]: Channel;\n  private readonly [INTERCEPTOR_SYMBOL]: Interceptor[];\n  private readonly [INTERCEPTOR_PROVIDER_SYMBOL]: InterceptorProvider[];\n  private readonly [CALL_INVOCATION_TRANSFORMER_SYMBOL]?: CallInvocationTransformer;\n  constructor(\n    address: string,\n    credentials: ChannelCredentials,\n    options: ClientOptions = {}\n  ) {\n    options = Object.assign({}, options);\n    this[INTERCEPTOR_SYMBOL] = options.interceptors ?? [];\n    delete options.interceptors;\n    this[INTERCEPTOR_PROVIDER_SYMBOL] = options.interceptor_providers ?? [];\n    delete options.interceptor_providers;\n    if (\n      this[INTERCEPTOR_SYMBOL].length > 0 &&\n      this[INTERCEPTOR_PROVIDER_SYMBOL].length > 0\n    ) {\n      throw new Error(\n        'Both interceptors and interceptor_providers were passed as options ' +\n          'to the client constructor. Only one of these is allowed.'\n      );\n    }\n    this[CALL_INVOCATION_TRANSFORMER_SYMBOL] =\n      options.callInvocationTransformer;\n    delete options.callInvocationTransformer;\n    if (options.channelOverride) {\n      this[CHANNEL_SYMBOL] = options.channelOverride;\n    } else if (options.channelFactoryOverride) {\n      const channelFactoryOverride = options.channelFactoryOverride;\n      delete options.channelFactoryOverride;\n      this[CHANNEL_SYMBOL] = channelFactoryOverride(\n        address,\n        credentials,\n        options\n      );\n    } else {\n      this[CHANNEL_SYMBOL] = new ChannelImplementation(\n        address,\n        credentials,\n        options\n      );\n    }\n  }\n\n  close(): void {\n    this[CHANNEL_SYMBOL].close();\n  }\n\n  getChannel(): Channel {\n    return this[CHANNEL_SYMBOL];\n  }\n\n  waitForReady(deadline: Deadline, callback: (error?: Error) => void): void {\n    const checkState = (err?: Error) => {\n      if (err) {\n        callback(new Error('Failed to connect before the deadline'));\n        return;\n      }\n      let newState;\n      try {\n        newState = this[CHANNEL_SYMBOL].getConnectivityState(true);\n      } catch (e) {\n        callback(new Error('The channel has been closed'));\n        return;\n      }\n      if (newState === ConnectivityState.READY) {\n        callback();\n      } else {\n        try {\n          this[CHANNEL_SYMBOL].watchConnectivityState(\n            newState,\n            deadline,\n            checkState\n          );\n        } catch (e) {\n          callback(new Error('The channel has been closed'));\n        }\n      }\n    };\n    setImmediate(checkState);\n  }\n\n  private checkOptionalUnaryResponseArguments<ResponseType>(\n    arg1: Metadata | CallOptions | UnaryCallback<ResponseType>,\n    arg2?: CallOptions | UnaryCallback<ResponseType>,\n    arg3?: UnaryCallback<ResponseType>\n  ): {\n    metadata: Metadata;\n    options: CallOptions;\n    callback: UnaryCallback<ResponseType>;\n  } {\n    if (isFunction(arg1)) {\n      return { metadata: new Metadata(), options: {}, callback: arg1 };\n    } else if (isFunction(arg2)) {\n      if (arg1 instanceof Metadata) {\n        return { metadata: arg1, options: {}, callback: arg2 };\n      } else {\n        return { metadata: new Metadata(), options: arg1, callback: arg2 };\n      }\n    } else {\n      if (\n        !(\n          arg1 instanceof Metadata &&\n          arg2 instanceof Object &&\n          isFunction(arg3)\n        )\n      ) {\n        throw new Error('Incorrect arguments passed');\n      }\n      return { metadata: arg1, options: arg2, callback: arg3 };\n    }\n  }\n\n  makeUnaryRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    argument: RequestType,\n    metadata: Metadata,\n    options: CallOptions,\n    callback: UnaryCallback<ResponseType>\n  ): ClientUnaryCall;\n  makeUnaryRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    argument: RequestType,\n    metadata: Metadata,\n    callback: UnaryCallback<ResponseType>\n  ): ClientUnaryCall;\n  makeUnaryRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    argument: RequestType,\n    options: CallOptions,\n    callback: UnaryCallback<ResponseType>\n  ): ClientUnaryCall;\n  makeUnaryRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    argument: RequestType,\n    callback: UnaryCallback<ResponseType>\n  ): ClientUnaryCall;\n  makeUnaryRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    argument: RequestType,\n    metadata: Metadata | CallOptions | UnaryCallback<ResponseType>,\n    options?: CallOptions | UnaryCallback<ResponseType>,\n    callback?: UnaryCallback<ResponseType>\n  ): ClientUnaryCall {\n    const checkedArguments = this.checkOptionalUnaryResponseArguments<ResponseType>(\n      metadata,\n      options,\n      callback\n    );\n    const methodDefinition: ClientMethodDefinition<\n      RequestType,\n      ResponseType\n    > = {\n      path: method,\n      requestStream: false,\n      responseStream: false,\n      requestSerialize: serialize,\n      responseDeserialize: deserialize,\n    };\n    let callProperties: CallProperties<RequestType, ResponseType> = {\n      argument: argument,\n      metadata: checkedArguments.metadata,\n      call: new ClientUnaryCallImpl(),\n      channel: this[CHANNEL_SYMBOL],\n      methodDefinition: methodDefinition,\n      callOptions: checkedArguments.options,\n      callback: checkedArguments.callback,\n    };\n    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL]!(\n        callProperties\n      ) as CallProperties<RequestType, ResponseType>;\n    }\n    const emitter: ClientUnaryCall = callProperties.call;\n    const interceptorArgs: InterceptorArguments = {\n      clientInterceptors: this[INTERCEPTOR_SYMBOL],\n      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n      callInterceptors: callProperties.callOptions.interceptors ?? [],\n      callInterceptorProviders:\n        callProperties.callOptions.interceptor_providers ?? [],\n    };\n    const call: InterceptingCallInterface = getInterceptingCall(\n      interceptorArgs,\n      callProperties.methodDefinition,\n      callProperties.callOptions,\n      callProperties.channel\n    );\n    /* This needs to happen before the emitter is used. Unfortunately we can't\n     * enforce this with the type system. We need to construct this emitter\n     * before calling the CallInvocationTransformer, and we need to create the\n     * call after that. */\n    emitter.call = call;\n    let responseMessage: ResponseType | null = null;\n    let receivedStatus = false;\n    const callerStackError = new Error();\n    call.start(callProperties.metadata, {\n      onReceiveMetadata: (metadata) => {\n        emitter.emit('metadata', metadata);\n      },\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      onReceiveMessage(message: any) {\n        if (responseMessage !== null) {\n          call.cancelWithStatus(Status.INTERNAL, 'Too many responses received');\n        }\n        responseMessage = message;\n      },\n      onReceiveStatus(status: StatusObject) {\n        if (receivedStatus) {\n          return;\n        }\n        receivedStatus = true;\n        if (status.code === Status.OK) {\n          if (responseMessage === null) {\n            const callerStack = getErrorStackString(callerStackError);\n            callProperties.callback!(callErrorFromStatus({\n              code: Status.INTERNAL,\n              details: 'No message received',\n              metadata: status.metadata\n            }, callerStack));\n          } else {\n            callProperties.callback!(null, responseMessage);\n          }\n        } else {\n          const callerStack = getErrorStackString(callerStackError);\n          callProperties.callback!(callErrorFromStatus(status, callerStack));\n        }\n        emitter.emit('status', status);\n      },\n    });\n    call.sendMessage(argument);\n    call.halfClose();\n    return emitter;\n  }\n\n  makeClientStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    metadata: Metadata,\n    options: CallOptions,\n    callback: UnaryCallback<ResponseType>\n  ): ClientWritableStream<RequestType>;\n  makeClientStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    metadata: Metadata,\n    callback: UnaryCallback<ResponseType>\n  ): ClientWritableStream<RequestType>;\n  makeClientStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    options: CallOptions,\n    callback: UnaryCallback<ResponseType>\n  ): ClientWritableStream<RequestType>;\n  makeClientStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    callback: UnaryCallback<ResponseType>\n  ): ClientWritableStream<RequestType>;\n  makeClientStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    metadata: Metadata | CallOptions | UnaryCallback<ResponseType>,\n    options?: CallOptions | UnaryCallback<ResponseType>,\n    callback?: UnaryCallback<ResponseType>\n  ): ClientWritableStream<RequestType> {\n    const checkedArguments = this.checkOptionalUnaryResponseArguments<ResponseType>(\n      metadata,\n      options,\n      callback\n    );\n    const methodDefinition: ClientMethodDefinition<\n      RequestType,\n      ResponseType\n    > = {\n      path: method,\n      requestStream: true,\n      responseStream: false,\n      requestSerialize: serialize,\n      responseDeserialize: deserialize,\n    };\n    let callProperties: CallProperties<RequestType, ResponseType> = {\n      metadata: checkedArguments.metadata,\n      call: new ClientWritableStreamImpl<RequestType>(serialize),\n      channel: this[CHANNEL_SYMBOL],\n      methodDefinition: methodDefinition,\n      callOptions: checkedArguments.options,\n      callback: checkedArguments.callback,\n    };\n    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL]!(\n        callProperties\n      ) as CallProperties<RequestType, ResponseType>;\n    }\n    const emitter: ClientWritableStream<RequestType> = callProperties.call as ClientWritableStream<RequestType>;\n    const interceptorArgs: InterceptorArguments = {\n      clientInterceptors: this[INTERCEPTOR_SYMBOL],\n      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n      callInterceptors: callProperties.callOptions.interceptors ?? [],\n      callInterceptorProviders:\n        callProperties.callOptions.interceptor_providers ?? [],\n    };\n    const call: InterceptingCallInterface = getInterceptingCall(\n      interceptorArgs,\n      callProperties.methodDefinition,\n      callProperties.callOptions,\n      callProperties.channel\n    );\n    /* This needs to happen before the emitter is used. Unfortunately we can't\n     * enforce this with the type system. We need to construct this emitter\n     * before calling the CallInvocationTransformer, and we need to create the\n     * call after that. */\n    emitter.call = call;\n    let responseMessage: ResponseType | null = null;\n    let receivedStatus = false;\n    const callerStackError = new Error();\n    call.start(callProperties.metadata, {\n      onReceiveMetadata: (metadata) => {\n        emitter.emit('metadata', metadata);\n      },\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      onReceiveMessage(message: any) {\n        if (responseMessage !== null) {\n          call.cancelWithStatus(Status.INTERNAL, 'Too many responses received');\n        }\n        responseMessage = message;\n      },\n      onReceiveStatus(status: StatusObject) {\n        if (receivedStatus) {\n          return;\n        }\n        receivedStatus = true;\n        if (status.code === Status.OK) {\n          if (responseMessage === null) {\n            const callerStack = getErrorStackString(callerStackError);\n            callProperties.callback!(callErrorFromStatus({\n              code: Status.INTERNAL,\n              details: 'No message received',\n              metadata: status.metadata\n            }, callerStack));\n          } else {\n            callProperties.callback!(null, responseMessage);\n          }\n        } else {\n          const callerStack = getErrorStackString(callerStackError);\n          callProperties.callback!(callErrorFromStatus(status, callerStack));\n        }\n        emitter.emit('status', status);\n      },\n    });\n    return emitter;\n  }\n\n  private checkMetadataAndOptions(\n    arg1?: Metadata | CallOptions,\n    arg2?: CallOptions\n  ): { metadata: Metadata; options: CallOptions } {\n    let metadata: Metadata;\n    let options: CallOptions;\n    if (arg1 instanceof Metadata) {\n      metadata = arg1;\n      if (arg2) {\n        options = arg2;\n      } else {\n        options = {};\n      }\n    } else {\n      if (arg1) {\n        options = arg1;\n      } else {\n        options = {};\n      }\n      metadata = new Metadata();\n    }\n    return { metadata, options };\n  }\n\n  makeServerStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    argument: RequestType,\n    metadata: Metadata,\n    options?: CallOptions\n  ): ClientReadableStream<ResponseType>;\n  makeServerStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    argument: RequestType,\n    options?: CallOptions\n  ): ClientReadableStream<ResponseType>;\n  makeServerStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    argument: RequestType,\n    metadata?: Metadata | CallOptions,\n    options?: CallOptions\n  ): ClientReadableStream<ResponseType> {\n    const checkedArguments = this.checkMetadataAndOptions(metadata, options);\n    const methodDefinition: ClientMethodDefinition<\n      RequestType,\n      ResponseType\n    > = {\n      path: method,\n      requestStream: false,\n      responseStream: true,\n      requestSerialize: serialize,\n      responseDeserialize: deserialize,\n    };\n    let callProperties: CallProperties<RequestType, ResponseType> = {\n      argument: argument,\n      metadata: checkedArguments.metadata,\n      call: new ClientReadableStreamImpl<ResponseType>(deserialize),\n      channel: this[CHANNEL_SYMBOL],\n      methodDefinition: methodDefinition,\n      callOptions: checkedArguments.options,\n    };\n    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL]!(\n        callProperties\n      ) as CallProperties<RequestType, ResponseType>;\n    }\n    const stream: ClientReadableStream<ResponseType> = callProperties.call as ClientReadableStream<ResponseType>;\n    const interceptorArgs: InterceptorArguments = {\n      clientInterceptors: this[INTERCEPTOR_SYMBOL],\n      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n      callInterceptors: callProperties.callOptions.interceptors ?? [],\n      callInterceptorProviders:\n        callProperties.callOptions.interceptor_providers ?? [],\n    };\n    const call: InterceptingCallInterface = getInterceptingCall(\n      interceptorArgs,\n      callProperties.methodDefinition,\n      callProperties.callOptions,\n      callProperties.channel\n    );\n    /* This needs to happen before the emitter is used. Unfortunately we can't\n     * enforce this with the type system. We need to construct this emitter\n     * before calling the CallInvocationTransformer, and we need to create the\n     * call after that. */\n    stream.call = call;\n    let receivedStatus = false;\n    const callerStackError = new Error();\n    call.start(callProperties.metadata, {\n      onReceiveMetadata(metadata: Metadata) {\n        stream.emit('metadata', metadata);\n      },\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      onReceiveMessage(message: any) {\n        stream.push(message);\n      },\n      onReceiveStatus(status: StatusObject) {\n        if (receivedStatus) {\n          return;\n        }\n        receivedStatus = true;\n        stream.push(null);\n        if (status.code !== Status.OK) {\n          const callerStack = getErrorStackString(callerStackError);\n          stream.emit('error', callErrorFromStatus(status, callerStack));\n        }\n        stream.emit('status', status);\n      },\n    });\n    call.sendMessage(argument);\n    call.halfClose();\n    return stream;\n  }\n\n  makeBidiStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    metadata: Metadata,\n    options?: CallOptions\n  ): ClientDuplexStream<RequestType, ResponseType>;\n  makeBidiStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    options?: CallOptions\n  ): ClientDuplexStream<RequestType, ResponseType>;\n  makeBidiStreamRequest<RequestType, ResponseType>(\n    method: string,\n    serialize: (value: RequestType) => Buffer,\n    deserialize: (value: Buffer) => ResponseType,\n    metadata?: Metadata | CallOptions,\n    options?: CallOptions\n  ): ClientDuplexStream<RequestType, ResponseType> {\n    const checkedArguments = this.checkMetadataAndOptions(metadata, options);\n    const methodDefinition: ClientMethodDefinition<\n      RequestType,\n      ResponseType\n    > = {\n      path: method,\n      requestStream: true,\n      responseStream: true,\n      requestSerialize: serialize,\n      responseDeserialize: deserialize,\n    };\n    let callProperties: CallProperties<RequestType, ResponseType> = {\n      metadata: checkedArguments.metadata,\n      call: new ClientDuplexStreamImpl<RequestType, ResponseType>(\n        serialize,\n        deserialize\n      ),\n      channel: this[CHANNEL_SYMBOL],\n      methodDefinition: methodDefinition,\n      callOptions: checkedArguments.options,\n    };\n    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL]!(\n        callProperties\n      ) as CallProperties<RequestType, ResponseType>;\n    }\n    const stream: ClientDuplexStream<\n      RequestType,\n      ResponseType\n    > = callProperties.call as ClientDuplexStream<RequestType, ResponseType>;\n    const interceptorArgs: InterceptorArguments = {\n      clientInterceptors: this[INTERCEPTOR_SYMBOL],\n      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n      callInterceptors: callProperties.callOptions.interceptors ?? [],\n      callInterceptorProviders:\n        callProperties.callOptions.interceptor_providers ?? [],\n    };\n    const call: InterceptingCallInterface = getInterceptingCall(\n      interceptorArgs,\n      callProperties.methodDefinition,\n      callProperties.callOptions,\n      callProperties.channel\n    );\n    /* This needs to happen before the emitter is used. Unfortunately we can't\n     * enforce this with the type system. We need to construct this emitter\n     * before calling the CallInvocationTransformer, and we need to create the\n     * call after that. */\n    stream.call = call;\n    let receivedStatus = false;\n    const callerStackError = new Error();\n    call.start(callProperties.metadata, {\n      onReceiveMetadata(metadata: Metadata) {\n        stream.emit('metadata', metadata);\n      },\n      onReceiveMessage(message: Buffer) {\n        stream.push(message);\n      },\n      onReceiveStatus(status: StatusObject) {\n        if (receivedStatus) {\n          return;\n        }\n        receivedStatus = true;\n        stream.push(null);\n        if (status.code !== Status.OK) {\n          const callerStack = getErrorStackString(callerStackError);\n          stream.emit('error', callErrorFromStatus(status, callerStack));\n        }\n        stream.emit('status', status);\n      },\n    });\n    return stream;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}