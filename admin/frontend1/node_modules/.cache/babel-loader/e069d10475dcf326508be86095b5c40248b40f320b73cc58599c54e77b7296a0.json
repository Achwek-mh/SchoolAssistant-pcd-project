{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2018 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadFileDescriptorSetFromObject = exports.loadFileDescriptorSetFromBuffer = exports.fromJSON = exports.loadSync = exports.load = exports.isAnyExtension = exports.Long = void 0;\nconst camelCase = require(\"lodash.camelcase\");\nconst Protobuf = require(\"protobufjs\");\nconst descriptor = require(\"protobufjs/ext/descriptor\");\nconst util_1 = require(\"./util\");\nconst Long = require(\"long\");\nexports.Long = Long;\nfunction isAnyExtension(obj) {\n  return '@type' in obj && typeof obj['@type'] === 'string';\n}\nexports.isAnyExtension = isAnyExtension;\nconst descriptorOptions = {\n  longs: String,\n  enums: String,\n  bytes: String,\n  defaults: true,\n  oneofs: true,\n  json: true\n};\nfunction joinName(baseName, name) {\n  if (baseName === '') {\n    return name;\n  } else {\n    return baseName + '.' + name;\n  }\n}\nfunction isHandledReflectionObject(obj) {\n  return obj instanceof Protobuf.Service || obj instanceof Protobuf.Type || obj instanceof Protobuf.Enum;\n}\nfunction isNamespaceBase(obj) {\n  return obj instanceof Protobuf.Namespace || obj instanceof Protobuf.Root;\n}\nfunction getAllHandledReflectionObjects(obj, parentName) {\n  const objName = joinName(parentName, obj.name);\n  if (isHandledReflectionObject(obj)) {\n    return [[objName, obj]];\n  } else {\n    if (isNamespaceBase(obj) && typeof obj.nested !== 'undefined') {\n      return Object.keys(obj.nested).map(name => {\n        return getAllHandledReflectionObjects(obj.nested[name], objName);\n      }).reduce((accumulator, currentValue) => accumulator.concat(currentValue), []);\n    }\n  }\n  return [];\n}\nfunction createDeserializer(cls, options) {\n  return function deserialize(argBuf) {\n    return cls.toObject(cls.decode(argBuf), options);\n  };\n}\nfunction createSerializer(cls) {\n  return function serialize(arg) {\n    if (Array.isArray(arg)) {\n      throw new Error(`Failed to serialize message: expected object with ${cls.name} structure, got array instead`);\n    }\n    const message = cls.fromObject(arg);\n    return cls.encode(message).finish();\n  };\n}\nfunction createMethodDefinition(method, serviceName, options, fileDescriptors) {\n  /* This is only ever called after the corresponding root.resolveAll(), so we\n   * can assume that the resolved request and response types are non-null */\n  const requestType = method.resolvedRequestType;\n  const responseType = method.resolvedResponseType;\n  return {\n    path: '/' + serviceName + '/' + method.name,\n    requestStream: !!method.requestStream,\n    responseStream: !!method.responseStream,\n    requestSerialize: createSerializer(requestType),\n    requestDeserialize: createDeserializer(requestType, options),\n    responseSerialize: createSerializer(responseType),\n    responseDeserialize: createDeserializer(responseType, options),\n    // TODO(murgatroid99): Find a better way to handle this\n    originalName: camelCase(method.name),\n    requestType: createMessageDefinition(requestType, fileDescriptors),\n    responseType: createMessageDefinition(responseType, fileDescriptors)\n  };\n}\nfunction createServiceDefinition(service, name, options, fileDescriptors) {\n  const def = {};\n  for (const method of service.methodsArray) {\n    def[method.name] = createMethodDefinition(method, name, options, fileDescriptors);\n  }\n  return def;\n}\nfunction createMessageDefinition(message, fileDescriptors) {\n  const messageDescriptor = message.toDescriptor('proto3');\n  return {\n    format: 'Protocol Buffer 3 DescriptorProto',\n    type: messageDescriptor.$type.toObject(messageDescriptor, descriptorOptions),\n    fileDescriptorProtos: fileDescriptors\n  };\n}\nfunction createEnumDefinition(enumType, fileDescriptors) {\n  const enumDescriptor = enumType.toDescriptor('proto3');\n  return {\n    format: 'Protocol Buffer 3 EnumDescriptorProto',\n    type: enumDescriptor.$type.toObject(enumDescriptor, descriptorOptions),\n    fileDescriptorProtos: fileDescriptors\n  };\n}\n/**\n * function createDefinition(obj: Protobuf.Service, name: string, options:\n * Options): ServiceDefinition; function createDefinition(obj: Protobuf.Type,\n * name: string, options: Options): MessageTypeDefinition; function\n * createDefinition(obj: Protobuf.Enum, name: string, options: Options):\n * EnumTypeDefinition;\n */\nfunction createDefinition(obj, name, options, fileDescriptors) {\n  if (obj instanceof Protobuf.Service) {\n    return createServiceDefinition(obj, name, options, fileDescriptors);\n  } else if (obj instanceof Protobuf.Type) {\n    return createMessageDefinition(obj, fileDescriptors);\n  } else if (obj instanceof Protobuf.Enum) {\n    return createEnumDefinition(obj, fileDescriptors);\n  } else {\n    throw new Error('Type mismatch in reflection object handling');\n  }\n}\nfunction createPackageDefinition(root, options) {\n  const def = {};\n  root.resolveAll();\n  const descriptorList = root.toDescriptor('proto3').file;\n  const bufferList = descriptorList.map(value => Buffer.from(descriptor.FileDescriptorProto.encode(value).finish()));\n  for (const [name, obj] of getAllHandledReflectionObjects(root, '')) {\n    def[name] = createDefinition(obj, name, options, bufferList);\n  }\n  return def;\n}\nfunction createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options) {\n  options = options || {};\n  const root = Protobuf.Root.fromDescriptor(decodedDescriptorSet);\n  root.resolveAll();\n  return createPackageDefinition(root, options);\n}\n/**\n * Load a .proto file with the specified options.\n * @param filename One or multiple file paths to load. Can be an absolute path\n *     or relative to an include path.\n * @param options.keepCase Preserve field names. The default is to change them\n *     to camel case.\n * @param options.longs The type that should be used to represent `long` values.\n *     Valid options are `Number` and `String`. Defaults to a `Long` object type\n *     from a library.\n * @param options.enums The type that should be used to represent `enum` values.\n *     The only valid option is `String`. Defaults to the numeric value.\n * @param options.bytes The type that should be used to represent `bytes`\n *     values. Valid options are `Array` and `String`. The default is to use\n *     `Buffer`.\n * @param options.defaults Set default values on output objects. Defaults to\n *     `false`.\n * @param options.arrays Set empty arrays for missing array values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.objects Set empty objects for missing object values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.oneofs Set virtual oneof properties to the present field's\n *     name\n * @param options.json Represent Infinity and NaN as strings in float fields,\n *     and automatically decode google.protobuf.Any values.\n * @param options.includeDirs Paths to search for imported `.proto` files.\n */\nfunction load(filename, options) {\n  return (0, util_1.loadProtosWithOptions)(filename, options).then(loadedRoot => {\n    return createPackageDefinition(loadedRoot, options);\n  });\n}\nexports.load = load;\nfunction loadSync(filename, options) {\n  const loadedRoot = (0, util_1.loadProtosWithOptionsSync)(filename, options);\n  return createPackageDefinition(loadedRoot, options);\n}\nexports.loadSync = loadSync;\nfunction fromJSON(json, options) {\n  options = options || {};\n  const loadedRoot = Protobuf.Root.fromJSON(json);\n  loadedRoot.resolveAll();\n  return createPackageDefinition(loadedRoot, options);\n}\nexports.fromJSON = fromJSON;\nfunction loadFileDescriptorSetFromBuffer(descriptorSet, options) {\n  const decodedDescriptorSet = descriptor.FileDescriptorSet.decode(descriptorSet);\n  return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);\n}\nexports.loadFileDescriptorSetFromBuffer = loadFileDescriptorSetFromBuffer;\nfunction loadFileDescriptorSetFromObject(descriptorSet, options) {\n  const decodedDescriptorSet = descriptor.FileDescriptorSet.fromObject(descriptorSet);\n  return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);\n}\nexports.loadFileDescriptorSetFromObject = loadFileDescriptorSetFromObject;\n(0, util_1.addCommonProtos)();","map":{"version":3,"mappings":"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","names":["exports","isAnyExtension","obj","descriptorOptions","longs","String","enums","bytes","defaults","oneofs","json","joinName","baseName","name","isHandledReflectionObject","Protobuf","Service","Type","Enum","isNamespaceBase","Namespace","Root","getAllHandledReflectionObjects","parentName","objName","nested","Object","keys","map","reduce","accumulator","currentValue","concat","createDeserializer","cls","options","deserialize","argBuf","toObject","decode","createSerializer","serialize","arg","Array","isArray","Error","message","fromObject","encode","finish","createMethodDefinition","method","serviceName","fileDescriptors","requestType","resolvedRequestType","responseType","resolvedResponseType","path","requestStream","responseStream","requestSerialize","requestDeserialize","responseSerialize","responseDeserialize","originalName","camelCase","createMessageDefinition","createServiceDefinition","service","def","methodsArray","messageDescriptor","toDescriptor","format","type","$type","fileDescriptorProtos","createEnumDefinition","enumType","enumDescriptor","createDefinition","createPackageDefinition","root","resolveAll","descriptorList","file","bufferList","value","Buffer","from","descriptor","FileDescriptorProto","createPackageDefinitionFromDescriptorSet","decodedDescriptorSet","fromDescriptor","load","filename","then","loadedRoot","loadSync","fromJSON","loadFileDescriptorSetFromBuffer","descriptorSet","FileDescriptorSet","loadFileDescriptorSetFromObject"],"sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}