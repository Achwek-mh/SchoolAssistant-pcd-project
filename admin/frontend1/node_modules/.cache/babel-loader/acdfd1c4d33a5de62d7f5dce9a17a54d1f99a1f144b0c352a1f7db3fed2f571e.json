{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Metadata = void 0;\nconst logging_1 = require(\"./logging\");\nconst constants_1 = require(\"./constants\");\nconst error_1 = require(\"./error\");\nconst LEGAL_KEY_REGEX = /^[0-9a-z_.-]+$/;\nconst LEGAL_NON_BINARY_VALUE_REGEX = /^[ -~]*$/;\nfunction isLegalKey(key) {\n  return LEGAL_KEY_REGEX.test(key);\n}\nfunction isLegalNonBinaryValue(value) {\n  return LEGAL_NON_BINARY_VALUE_REGEX.test(value);\n}\nfunction isBinaryKey(key) {\n  return key.endsWith('-bin');\n}\nfunction isCustomMetadata(key) {\n  return !key.startsWith('grpc-');\n}\nfunction normalizeKey(key) {\n  return key.toLowerCase();\n}\nfunction validate(key, value) {\n  if (!isLegalKey(key)) {\n    throw new Error('Metadata key \"' + key + '\" contains illegal characters');\n  }\n  if (value !== null && value !== undefined) {\n    if (isBinaryKey(key)) {\n      if (!Buffer.isBuffer(value)) {\n        throw new Error(\"keys that end with '-bin' must have Buffer values\");\n      }\n    } else {\n      if (Buffer.isBuffer(value)) {\n        throw new Error(\"keys that don't end with '-bin' must have String values\");\n      }\n      if (!isLegalNonBinaryValue(value)) {\n        throw new Error('Metadata string value \"' + value + '\" contains illegal characters');\n      }\n    }\n  }\n}\n/**\n * A class for storing metadata. Keys are normalized to lowercase ASCII.\n */\nclass Metadata {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.internalRepr = new Map();\n    this.options = options;\n  }\n  /**\n   * Sets the given value for the given key by replacing any other values\n   * associated with that key. Normalizes the key.\n   * @param key The key to whose value should be set.\n   * @param value The value to set. Must be a buffer if and only\n   *   if the normalized key ends with '-bin'.\n   */\n  set(key, value) {\n    key = normalizeKey(key);\n    validate(key, value);\n    this.internalRepr.set(key, [value]);\n  }\n  /**\n   * Adds the given value for the given key by appending to a list of previous\n   * values associated with that key. Normalizes the key.\n   * @param key The key for which a new value should be appended.\n   * @param value The value to add. Must be a buffer if and only\n   *   if the normalized key ends with '-bin'.\n   */\n  add(key, value) {\n    key = normalizeKey(key);\n    validate(key, value);\n    const existingValue = this.internalRepr.get(key);\n    if (existingValue === undefined) {\n      this.internalRepr.set(key, [value]);\n    } else {\n      existingValue.push(value);\n    }\n  }\n  /**\n   * Removes the given key and any associated values. Normalizes the key.\n   * @param key The key whose values should be removed.\n   */\n  remove(key) {\n    key = normalizeKey(key);\n    // validate(key);\n    this.internalRepr.delete(key);\n  }\n  /**\n   * Gets a list of all values associated with the key. Normalizes the key.\n   * @param key The key whose value should be retrieved.\n   * @return A list of values associated with the given key.\n   */\n  get(key) {\n    key = normalizeKey(key);\n    // validate(key);\n    return this.internalRepr.get(key) || [];\n  }\n  /**\n   * Gets a plain object mapping each key to the first value associated with it.\n   * This reflects the most common way that people will want to see metadata.\n   * @return A key/value mapping of the metadata.\n   */\n  getMap() {\n    const result = {};\n    for (const [key, values] of this.internalRepr) {\n      if (values.length > 0) {\n        const v = values[0];\n        result[key] = Buffer.isBuffer(v) ? Buffer.from(v) : v;\n      }\n    }\n    return result;\n  }\n  /**\n   * Clones the metadata object.\n   * @return The newly cloned object.\n   */\n  clone() {\n    const newMetadata = new Metadata(this.options);\n    const newInternalRepr = newMetadata.internalRepr;\n    for (const [key, value] of this.internalRepr) {\n      const clonedValue = value.map(v => {\n        if (Buffer.isBuffer(v)) {\n          return Buffer.from(v);\n        } else {\n          return v;\n        }\n      });\n      newInternalRepr.set(key, clonedValue);\n    }\n    return newMetadata;\n  }\n  /**\n   * Merges all key-value pairs from a given Metadata object into this one.\n   * If both this object and the given object have values in the same key,\n   * values from the other Metadata object will be appended to this object's\n   * values.\n   * @param other A Metadata object.\n   */\n  merge(other) {\n    for (const [key, values] of other.internalRepr) {\n      const mergedValue = (this.internalRepr.get(key) || []).concat(values);\n      this.internalRepr.set(key, mergedValue);\n    }\n  }\n  setOptions(options) {\n    this.options = options;\n  }\n  getOptions() {\n    return this.options;\n  }\n  /**\n   * Creates an OutgoingHttpHeaders object that can be used with the http2 API.\n   */\n  toHttp2Headers() {\n    // NOTE: Node <8.9 formats http2 headers incorrectly.\n    const result = {};\n    for (const [key, values] of this.internalRepr) {\n      // We assume that the user's interaction with this object is limited to\n      // through its public API (i.e. keys and values are already validated).\n      result[key] = values.map(bufToString);\n    }\n    return result;\n  }\n  // For compatibility with the other Metadata implementation\n  _getCoreRepresentation() {\n    return this.internalRepr;\n  }\n  /**\n   * This modifies the behavior of JSON.stringify to show an object\n   * representation of the metadata map.\n   */\n  toJSON() {\n    const result = {};\n    for (const [key, values] of this.internalRepr) {\n      result[key] = values;\n    }\n    return result;\n  }\n  /**\n   * Returns a new Metadata object based fields in a given IncomingHttpHeaders\n   * object.\n   * @param headers An IncomingHttpHeaders object.\n   */\n  static fromHttp2Headers(headers) {\n    const result = new Metadata();\n    for (const key of Object.keys(headers)) {\n      // Reserved headers (beginning with `:`) are not valid keys.\n      if (key.charAt(0) === ':') {\n        continue;\n      }\n      const values = headers[key];\n      try {\n        if (isBinaryKey(key)) {\n          if (Array.isArray(values)) {\n            values.forEach(value => {\n              result.add(key, Buffer.from(value, 'base64'));\n            });\n          } else if (values !== undefined) {\n            if (isCustomMetadata(key)) {\n              values.split(',').forEach(v => {\n                result.add(key, Buffer.from(v.trim(), 'base64'));\n              });\n            } else {\n              result.add(key, Buffer.from(values, 'base64'));\n            }\n          }\n        } else {\n          if (Array.isArray(values)) {\n            values.forEach(value => {\n              result.add(key, value);\n            });\n          } else if (values !== undefined) {\n            result.add(key, values);\n          }\n        }\n      } catch (error) {\n        const message = `Failed to add metadata entry ${key}: ${values}. ${(0, error_1.getErrorMessage)(error)}. For more information see https://github.com/grpc/grpc-node/issues/1173`;\n        (0, logging_1.log)(constants_1.LogVerbosity.ERROR, message);\n      }\n    }\n    return result;\n  }\n}\nexports.Metadata = Metadata;\nconst bufToString = val => {\n  return Buffer.isBuffer(val) ? val.toString('base64') : val;\n};","map":{"version":3,"mappings":"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","names":["LEGAL_KEY_REGEX","LEGAL_NON_BINARY_VALUE_REGEX","isLegalKey","key","test","isLegalNonBinaryValue","value","isBinaryKey","endsWith","isCustomMetadata","startsWith","normalizeKey","toLowerCase","validate","Error","undefined","Buffer","isBuffer","Metadata","constructor","options","Map","set","internalRepr","add","existingValue","get","push","remove","delete","getMap","result","values","length","v","from","clone","newMetadata","newInternalRepr","clonedValue","map","merge","other","mergedValue","concat","setOptions","getOptions","toHttp2Headers","bufToString","_getCoreRepresentation","toJSON","fromHttp2Headers","headers","Object","keys","charAt","Array","isArray","forEach","split","trim","error","message","constants_1","ERROR","exports","val","toString"],"sources":["/home/achwak/node_modules/@grpc/grpc-js/src/metadata.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport * as http2 from 'http2';\nimport { log } from './logging';\nimport { LogVerbosity } from './constants';\nimport { getErrorMessage } from './error';\nconst LEGAL_KEY_REGEX = /^[0-9a-z_.-]+$/;\nconst LEGAL_NON_BINARY_VALUE_REGEX = /^[ -~]*$/;\n\nexport type MetadataValue = string | Buffer;\nexport type MetadataObject = Map<string, MetadataValue[]>;\n\nfunction isLegalKey(key: string): boolean {\n  return LEGAL_KEY_REGEX.test(key);\n}\n\nfunction isLegalNonBinaryValue(value: string): boolean {\n  return LEGAL_NON_BINARY_VALUE_REGEX.test(value);\n}\n\nfunction isBinaryKey(key: string): boolean {\n  return key.endsWith('-bin');\n}\n\nfunction isCustomMetadata(key: string): boolean {\n  return !key.startsWith('grpc-');\n}\n\nfunction normalizeKey(key: string): string {\n  return key.toLowerCase();\n}\n\nfunction validate(key: string, value?: MetadataValue): void {\n  if (!isLegalKey(key)) {\n    throw new Error('Metadata key \"' + key + '\" contains illegal characters');\n  }\n\n  if (value !== null && value !== undefined) {\n    if (isBinaryKey(key)) {\n      if (!Buffer.isBuffer(value)) {\n        throw new Error(\"keys that end with '-bin' must have Buffer values\");\n      }\n    } else {\n      if (Buffer.isBuffer(value)) {\n        throw new Error(\n          \"keys that don't end with '-bin' must have String values\"\n        );\n      }\n      if (!isLegalNonBinaryValue(value)) {\n        throw new Error(\n          'Metadata string value \"' + value + '\" contains illegal characters'\n        );\n      }\n    }\n  }\n}\n\nexport interface MetadataOptions {\n  /* Signal that the request is idempotent. Defaults to false */\n  idempotentRequest?: boolean;\n  /* Signal that the call should not return UNAVAILABLE before it has\n   * started. Defaults to false. */\n  waitForReady?: boolean;\n  /* Signal that the call is cacheable. GRPC is free to use GET verb.\n   * Defaults to false */\n  cacheableRequest?: boolean;\n  /* Signal that the initial metadata should be corked. Defaults to false. */\n  corked?: boolean;\n}\n\n/**\n * A class for storing metadata. Keys are normalized to lowercase ASCII.\n */\nexport class Metadata {\n  protected internalRepr: MetadataObject = new Map<string, MetadataValue[]>();\n  private options: MetadataOptions;\n\n  constructor(options: MetadataOptions = {}) {\n    this.options = options;\n  }\n\n  /**\n   * Sets the given value for the given key by replacing any other values\n   * associated with that key. Normalizes the key.\n   * @param key The key to whose value should be set.\n   * @param value The value to set. Must be a buffer if and only\n   *   if the normalized key ends with '-bin'.\n   */\n  set(key: string, value: MetadataValue): void {\n    key = normalizeKey(key);\n    validate(key, value);\n    this.internalRepr.set(key, [value]);\n  }\n\n  /**\n   * Adds the given value for the given key by appending to a list of previous\n   * values associated with that key. Normalizes the key.\n   * @param key The key for which a new value should be appended.\n   * @param value The value to add. Must be a buffer if and only\n   *   if the normalized key ends with '-bin'.\n   */\n  add(key: string, value: MetadataValue): void {\n    key = normalizeKey(key);\n    validate(key, value);\n\n    const existingValue: MetadataValue[] | undefined = this.internalRepr.get(key);\n\n    if (existingValue === undefined) {\n      this.internalRepr.set(key, [value]);\n    } else {\n      existingValue.push(value);\n    }\n  }\n\n  /**\n   * Removes the given key and any associated values. Normalizes the key.\n   * @param key The key whose values should be removed.\n   */\n  remove(key: string): void {\n    key = normalizeKey(key);\n    // validate(key);\n    this.internalRepr.delete(key);\n  }\n\n  /**\n   * Gets a list of all values associated with the key. Normalizes the key.\n   * @param key The key whose value should be retrieved.\n   * @return A list of values associated with the given key.\n   */\n  get(key: string): MetadataValue[] {\n    key = normalizeKey(key);\n    // validate(key);\n    return this.internalRepr.get(key) || [];\n  }\n\n  /**\n   * Gets a plain object mapping each key to the first value associated with it.\n   * This reflects the most common way that people will want to see metadata.\n   * @return A key/value mapping of the metadata.\n   */\n  getMap(): { [key: string]: MetadataValue } {\n    const result: { [key: string]: MetadataValue } = {};\n\n    for (const [key, values] of this.internalRepr) {\n      if (values.length > 0) {\n        const v = values[0];\n        result[key] = Buffer.isBuffer(v) ? Buffer.from(v) : v;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Clones the metadata object.\n   * @return The newly cloned object.\n   */\n  clone(): Metadata {\n    const newMetadata = new Metadata(this.options);\n    const newInternalRepr = newMetadata.internalRepr;\n\n    for (const [key, value] of this.internalRepr) {\n      const clonedValue: MetadataValue[] = value.map((v) => {\n        if (Buffer.isBuffer(v)) {\n          return Buffer.from(v);\n        } else {\n          return v;\n        }\n      });\n\n      newInternalRepr.set(key, clonedValue);\n    }\n\n    return newMetadata;\n  }\n\n  /**\n   * Merges all key-value pairs from a given Metadata object into this one.\n   * If both this object and the given object have values in the same key,\n   * values from the other Metadata object will be appended to this object's\n   * values.\n   * @param other A Metadata object.\n   */\n  merge(other: Metadata): void {\n    for (const [key, values] of other.internalRepr) {\n      const mergedValue: MetadataValue[] = (\n        this.internalRepr.get(key) || []\n      ).concat(values);\n\n      this.internalRepr.set(key, mergedValue);\n    }\n  }\n\n  setOptions(options: MetadataOptions) {\n    this.options = options;\n  }\n\n  getOptions(): MetadataOptions {\n    return this.options;\n  }\n\n  /**\n   * Creates an OutgoingHttpHeaders object that can be used with the http2 API.\n   */\n  toHttp2Headers(): http2.OutgoingHttpHeaders {\n    // NOTE: Node <8.9 formats http2 headers incorrectly.\n    const result: http2.OutgoingHttpHeaders = {};\n\n    for (const [key, values] of this.internalRepr) {\n      // We assume that the user's interaction with this object is limited to\n      // through its public API (i.e. keys and values are already validated).\n      result[key] = values.map(bufToString);\n    }\n\n    return result;\n  }\n\n  // For compatibility with the other Metadata implementation\n  private _getCoreRepresentation() {\n    return this.internalRepr;\n  }\n\n  /**\n   * This modifies the behavior of JSON.stringify to show an object\n   * representation of the metadata map.\n   */\n  toJSON() {\n    const result: { [key: string]: MetadataValue[] } = {};\n    for (const [key, values] of this.internalRepr) {\n      result[key] = values;\n    }\n    return result;\n  }\n\n  /**\n   * Returns a new Metadata object based fields in a given IncomingHttpHeaders\n   * object.\n   * @param headers An IncomingHttpHeaders object.\n   */\n  static fromHttp2Headers(headers: http2.IncomingHttpHeaders): Metadata {\n    const result = new Metadata();\n    for (const key of Object.keys(headers)) {\n      // Reserved headers (beginning with `:`) are not valid keys.\n      if (key.charAt(0) === ':') {\n        continue;\n      }\n\n      const values = headers[key];\n\n      try {\n        if (isBinaryKey(key)) {\n          if (Array.isArray(values)) {\n            values.forEach((value) => {\n              result.add(key, Buffer.from(value, 'base64'));\n            });\n          } else if (values !== undefined) {\n            if (isCustomMetadata(key)) {\n              values.split(',').forEach((v) => {\n                result.add(key, Buffer.from(v.trim(), 'base64'));\n              });\n            } else {\n              result.add(key, Buffer.from(values, 'base64'));\n            }\n          }\n        } else {\n          if (Array.isArray(values)) {\n            values.forEach((value) => {\n              result.add(key, value);\n            });\n          } else if (values !== undefined) {\n            result.add(key, values);\n          }\n        }\n      } catch (error) {\n        const message = `Failed to add metadata entry ${key}: ${values}. ${getErrorMessage(error)}. For more information see https://github.com/grpc/grpc-node/issues/1173`;\n        log(LogVerbosity.ERROR, message);\n      }\n    }\n\n    return result;\n  }\n}\n\nconst bufToString = (val: string | Buffer): string => {\n  return Buffer.isBuffer(val) ? val.toString('base64') : val\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}