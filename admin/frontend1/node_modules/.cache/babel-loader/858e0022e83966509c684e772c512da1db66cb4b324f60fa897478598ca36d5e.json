{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = void 0;\nconst net_1 = require(\"net\");\nconst constants_1 = require(\"./constants\");\nconst metadata_1 = require(\"./metadata\");\nconst resolver_1 = require(\"./resolver\");\nconst uri_parser_1 = require(\"./uri-parser\");\nconst logging = require(\"./logging\");\nconst TRACER_NAME = 'ip_resolver';\nfunction trace(text) {\n  logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst IPV4_SCHEME = 'ipv4';\nconst IPV6_SCHEME = 'ipv6';\n/**\n * The default TCP port to connect to if not explicitly specified in the target.\n */\nconst DEFAULT_PORT = 443;\nclass IpResolver {\n  constructor(target, listener, channelOptions) {\n    var _a;\n    this.target = target;\n    this.listener = listener;\n    this.addresses = [];\n    this.error = null;\n    trace('Resolver constructed for target ' + (0, uri_parser_1.uriToString)(target));\n    const addresses = [];\n    if (!(target.scheme === IPV4_SCHEME || target.scheme === IPV6_SCHEME)) {\n      this.error = {\n        code: constants_1.Status.UNAVAILABLE,\n        details: `Unrecognized scheme ${target.scheme} in IP resolver`,\n        metadata: new metadata_1.Metadata()\n      };\n      return;\n    }\n    const pathList = target.path.split(',');\n    for (const path of pathList) {\n      const hostPort = (0, uri_parser_1.splitHostPort)(path);\n      if (hostPort === null) {\n        this.error = {\n          code: constants_1.Status.UNAVAILABLE,\n          details: `Failed to parse ${target.scheme} address ${path}`,\n          metadata: new metadata_1.Metadata()\n        };\n        return;\n      }\n      if (target.scheme === IPV4_SCHEME && !(0, net_1.isIPv4)(hostPort.host) || target.scheme === IPV6_SCHEME && !(0, net_1.isIPv6)(hostPort.host)) {\n        this.error = {\n          code: constants_1.Status.UNAVAILABLE,\n          details: `Failed to parse ${target.scheme} address ${path}`,\n          metadata: new metadata_1.Metadata()\n        };\n        return;\n      }\n      addresses.push({\n        host: hostPort.host,\n        port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT\n      });\n    }\n    this.addresses = addresses;\n    trace('Parsed ' + target.scheme + ' address list ' + this.addresses);\n  }\n  updateResolution() {\n    process.nextTick(() => {\n      if (this.error) {\n        this.listener.onError(this.error);\n      } else {\n        this.listener.onSuccessfulResolution(this.addresses, null, null, null, {});\n      }\n    });\n  }\n  destroy() {\n    // This resolver owns no resources, so we do nothing here.\n  }\n  static getDefaultAuthority(target) {\n    return target.path.split(',')[0];\n  }\n}\nfunction setup() {\n  (0, resolver_1.registerResolver)(IPV4_SCHEME, IpResolver);\n  (0, resolver_1.registerResolver)(IPV6_SCHEME, IpResolver);\n}\nexports.setup = setup;","map":{"version":3,"mappings":"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","names":["TRACER_NAME","trace","text","logging","constants_1","DEBUG","IPV4_SCHEME","IPV6_SCHEME","DEFAULT_PORT","IpResolver","constructor","target","listener","channelOptions","addresses","scheme","error","code","UNAVAILABLE","details","metadata","metadata_1","pathList","path","split","hostPort","host","push","port","updateResolution","process","nextTick","onError","onSuccessfulResolution","destroy","getDefaultAuthority","setup","exports"],"sources":["/home/achwak/node_modules/@grpc/grpc-js/src/resolver-ip.ts"],"sourcesContent":["/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isIPv4, isIPv6 } from 'net';\nimport { StatusObject } from './call-interface';\nimport { ChannelOptions } from './channel-options';\nimport { LogVerbosity, Status } from './constants';\nimport { Metadata } from './metadata';\nimport { registerResolver, Resolver, ResolverListener } from './resolver';\nimport { SubchannelAddress } from './subchannel-address';\nimport { GrpcUri, splitHostPort, uriToString } from './uri-parser';\nimport * as logging from './logging';\n\nconst TRACER_NAME = 'ip_resolver';\n\nfunction trace(text: string): void {\n  logging.trace(LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n\nconst IPV4_SCHEME = 'ipv4';\nconst IPV6_SCHEME = 'ipv6';\n\n/**\n * The default TCP port to connect to if not explicitly specified in the target.\n */\nconst DEFAULT_PORT = 443;\n\nclass IpResolver implements Resolver {\n  private addresses: SubchannelAddress[] = [];\n  private error: StatusObject | null = null;\n  constructor(\n    private target: GrpcUri,\n    private listener: ResolverListener,\n    channelOptions: ChannelOptions\n  ) {\n    trace('Resolver constructed for target ' + uriToString(target));\n    const addresses: SubchannelAddress[] = [];\n    if (!(target.scheme === IPV4_SCHEME || target.scheme === IPV6_SCHEME)) {\n      this.error = {\n        code: Status.UNAVAILABLE,\n        details: `Unrecognized scheme ${target.scheme} in IP resolver`,\n        metadata: new Metadata(),\n      };\n      return;\n    }\n    const pathList = target.path.split(',');\n    for (const path of pathList) {\n      const hostPort = splitHostPort(path);\n      if (hostPort === null) {\n        this.error = {\n          code: Status.UNAVAILABLE,\n          details: `Failed to parse ${target.scheme} address ${path}`,\n          metadata: new Metadata(),\n        };\n        return;\n      }\n      if (\n        (target.scheme === IPV4_SCHEME && !isIPv4(hostPort.host)) ||\n        (target.scheme === IPV6_SCHEME && !isIPv6(hostPort.host))\n      ) {\n        this.error = {\n          code: Status.UNAVAILABLE,\n          details: `Failed to parse ${target.scheme} address ${path}`,\n          metadata: new Metadata(),\n        };\n        return;\n      }\n      addresses.push({\n        host: hostPort.host,\n        port: hostPort.port ?? DEFAULT_PORT,\n      });\n    }\n    this.addresses = addresses;\n    trace('Parsed ' + target.scheme + ' address list ' + this.addresses);\n  }\n  updateResolution(): void {\n    process.nextTick(() => {\n      if (this.error) {\n        this.listener.onError(this.error);\n      } else {\n        this.listener.onSuccessfulResolution(\n          this.addresses,\n          null,\n          null,\n          null,\n          {}\n        );\n      }\n    });\n  }\n  destroy(): void {\n    // This resolver owns no resources, so we do nothing here.\n  }\n\n  static getDefaultAuthority(target: GrpcUri): string {\n    return target.path.split(',')[0];\n  }\n}\n\nexport function setup() {\n  registerResolver(IPV4_SCHEME, IpResolver);\n  registerResolver(IPV6_SCHEME, IpResolver);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}