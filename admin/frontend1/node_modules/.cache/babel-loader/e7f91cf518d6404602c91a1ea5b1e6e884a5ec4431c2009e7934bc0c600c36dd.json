{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamDecoder = void 0;\nvar ReadState;\n(function (ReadState) {\n  ReadState[ReadState[\"NO_DATA\"] = 0] = \"NO_DATA\";\n  ReadState[ReadState[\"READING_SIZE\"] = 1] = \"READING_SIZE\";\n  ReadState[ReadState[\"READING_MESSAGE\"] = 2] = \"READING_MESSAGE\";\n})(ReadState || (ReadState = {}));\nclass StreamDecoder {\n  constructor() {\n    this.readState = ReadState.NO_DATA;\n    this.readCompressFlag = Buffer.alloc(1);\n    this.readPartialSize = Buffer.alloc(4);\n    this.readSizeRemaining = 4;\n    this.readMessageSize = 0;\n    this.readPartialMessage = [];\n    this.readMessageRemaining = 0;\n  }\n  write(data) {\n    let readHead = 0;\n    let toRead;\n    const result = [];\n    while (readHead < data.length) {\n      switch (this.readState) {\n        case ReadState.NO_DATA:\n          this.readCompressFlag = data.slice(readHead, readHead + 1);\n          readHead += 1;\n          this.readState = ReadState.READING_SIZE;\n          this.readPartialSize.fill(0);\n          this.readSizeRemaining = 4;\n          this.readMessageSize = 0;\n          this.readMessageRemaining = 0;\n          this.readPartialMessage = [];\n          break;\n        case ReadState.READING_SIZE:\n          toRead = Math.min(data.length - readHead, this.readSizeRemaining);\n          data.copy(this.readPartialSize, 4 - this.readSizeRemaining, readHead, readHead + toRead);\n          this.readSizeRemaining -= toRead;\n          readHead += toRead;\n          // readSizeRemaining >=0 here\n          if (this.readSizeRemaining === 0) {\n            this.readMessageSize = this.readPartialSize.readUInt32BE(0);\n            this.readMessageRemaining = this.readMessageSize;\n            if (this.readMessageRemaining > 0) {\n              this.readState = ReadState.READING_MESSAGE;\n            } else {\n              const message = Buffer.concat([this.readCompressFlag, this.readPartialSize], 5);\n              this.readState = ReadState.NO_DATA;\n              result.push(message);\n            }\n          }\n          break;\n        case ReadState.READING_MESSAGE:\n          toRead = Math.min(data.length - readHead, this.readMessageRemaining);\n          this.readPartialMessage.push(data.slice(readHead, readHead + toRead));\n          this.readMessageRemaining -= toRead;\n          readHead += toRead;\n          // readMessageRemaining >=0 here\n          if (this.readMessageRemaining === 0) {\n            // At this point, we have read a full message\n            const framedMessageBuffers = [this.readCompressFlag, this.readPartialSize].concat(this.readPartialMessage);\n            const framedMessage = Buffer.concat(framedMessageBuffers, this.readMessageSize + 5);\n            this.readState = ReadState.NO_DATA;\n            result.push(framedMessage);\n          }\n          break;\n        default:\n          throw new Error('Unexpected read state');\n      }\n    }\n    return result;\n  }\n}\nexports.StreamDecoder = StreamDecoder;","map":{"version":3,"mappings":"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","names":["ReadState","StreamDecoder","constructor","NO_DATA","Buffer","alloc","write","data","readHead","toRead","result","length","readState","readCompressFlag","slice","READING_SIZE","readPartialSize","fill","readSizeRemaining","readMessageSize","readMessageRemaining","readPartialMessage","Math","min","copy","readUInt32BE","READING_MESSAGE","message","concat","push","framedMessageBuffers","framedMessage","Error","exports"],"sources":["/home/achwak/node_modules/@grpc/grpc-js/src/stream-decoder.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nenum ReadState {\n  NO_DATA,\n  READING_SIZE,\n  READING_MESSAGE,\n}\n\nexport class StreamDecoder {\n  private readState: ReadState = ReadState.NO_DATA;\n  private readCompressFlag: Buffer = Buffer.alloc(1);\n  private readPartialSize: Buffer = Buffer.alloc(4);\n  private readSizeRemaining = 4;\n  private readMessageSize = 0;\n  private readPartialMessage: Buffer[] = [];\n  private readMessageRemaining = 0;\n\n  write(data: Buffer): Buffer[] {\n    let readHead = 0;\n    let toRead: number;\n    const result: Buffer[] = [];\n\n    while (readHead < data.length) {\n      switch (this.readState) {\n        case ReadState.NO_DATA:\n          this.readCompressFlag = data.slice(readHead, readHead + 1);\n          readHead += 1;\n          this.readState = ReadState.READING_SIZE;\n          this.readPartialSize.fill(0);\n          this.readSizeRemaining = 4;\n          this.readMessageSize = 0;\n          this.readMessageRemaining = 0;\n          this.readPartialMessage = [];\n          break;\n        case ReadState.READING_SIZE:\n          toRead = Math.min(data.length - readHead, this.readSizeRemaining);\n          data.copy(\n            this.readPartialSize,\n            4 - this.readSizeRemaining,\n            readHead,\n            readHead + toRead\n          );\n          this.readSizeRemaining -= toRead;\n          readHead += toRead;\n          // readSizeRemaining >=0 here\n          if (this.readSizeRemaining === 0) {\n            this.readMessageSize = this.readPartialSize.readUInt32BE(0);\n            this.readMessageRemaining = this.readMessageSize;\n            if (this.readMessageRemaining > 0) {\n              this.readState = ReadState.READING_MESSAGE;\n            } else {\n              const message = Buffer.concat(\n                [this.readCompressFlag, this.readPartialSize],\n                5\n              );\n\n              this.readState = ReadState.NO_DATA;\n              result.push(message);\n            }\n          }\n          break;\n        case ReadState.READING_MESSAGE:\n          toRead = Math.min(data.length - readHead, this.readMessageRemaining);\n          this.readPartialMessage.push(data.slice(readHead, readHead + toRead));\n          this.readMessageRemaining -= toRead;\n          readHead += toRead;\n          // readMessageRemaining >=0 here\n          if (this.readMessageRemaining === 0) {\n            // At this point, we have read a full message\n            const framedMessageBuffers = [\n              this.readCompressFlag,\n              this.readPartialSize,\n            ].concat(this.readPartialMessage);\n            const framedMessage = Buffer.concat(\n              framedMessageBuffers,\n              this.readMessageSize + 5\n            );\n\n            this.readState = ReadState.NO_DATA;\n            result.push(framedMessage);\n          }\n          break;\n        default:\n          throw new Error('Unexpected read state');\n      }\n    }\n\n    return result;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}